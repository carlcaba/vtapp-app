/* SELECT THE SCHEMA */
USE VTAPPCORP;

/* DELIMITER */
DELIMITER //


-- COLOR TABLE
DROP TRIGGER IF EXISTS TBL_SYSTEM_COLOR_INSERT//
CREATE TRIGGER TBL_SYSTEM_COLOR_INSERT
AFTER INSERT
   ON TBL_SYSTEM_COLOR FOR EACH ROW

BEGIN

	DECLARE vIPClient VARCHAR(20);
	DECLARE vTranx VARCHAR(2000) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vUser VARCHAR(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci;

	-- Find username of person performing the INSERT into table
	SELECT SUBSTRING_INDEX(USER(), '@', 1) INTO vUser;
   
	IF vUser <> 'root' THEN
		-- Find IP of person performing the INSERT into table
		SELECT IFNULL(L.USER_IP,'localhost') INTO vIPClient FROM TBL_SYSTEM_LOG L WHERE NEW.REGISTERED_BY = L.USER_ID AND L.TEXT_TRANSACTION = 'LOGIN' ORDER BY L.LOGDATE DESC LIMIT 1;
	   
		-- Define the transaction
		SET vTranx = CONCAT('Add /COLOR/ ',NEW.RESOURCE_NAME,' ',NEW.HEXA,' ',NEW.CLASS_NAME,' Id:',NEW.ID);

		-- Insert record into log table
		INSERT INTO TBL_SYSTEM_LOG (ID,USER_IP,USER_ID,LOGDATE,TEXT_TRANSACTION) VALUES (0,vIPClient,NEW.REGISTERED_BY,SYSDATE(),vTranx);

	END IF;

END; //


-- AREA TABLE
DROP TRIGGER IF EXISTS TBL_AREA_INSERT//
CREATE TRIGGER TBL_AREA_INSERT
AFTER INSERT
   ON TBL_AREA FOR EACH ROW

BEGIN

	DECLARE vIPClient VARCHAR(20);
	DECLARE vTranx VARCHAR(2000) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vUser VARCHAR(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci;

	-- Find username of person performing the INSERT into table
	SELECT SUBSTRING_INDEX(USER(), '@', 1) INTO vUser;
   
	IF vUser <> 'root' THEN
		-- Find IP of person performing the INSERT into table
		SELECT IFNULL(L.USER_IP,'localhost') INTO vIPClient FROM TBL_SYSTEM_LOG L WHERE NEW.REGISTERED_BY = L.USER_ID AND L.TEXT_TRANSACTION = 'LOGIN' ORDER BY L.LOGDATE DESC LIMIT 1;
	   
		-- Define the transaction
		SET vTranx = CONCAT('Add /AREA/ ',NEW.AREA_NAME,' ',NEW.COSTCENTER,' Id:',NEW.ID);

		-- Insert record into log table
		INSERT INTO TBL_SYSTEM_LOG (ID,USER_IP,USER_ID,LOGDATE,TEXT_TRANSACTION) VALUES (0,vIPClient,NEW.REGISTERED_BY,SYSDATE(),vTranx);

	END IF;

END; //


-- AREA TYPE TABLE
DROP TRIGGER IF EXISTS TBL_AREA_TYPE_INSERT//
CREATE TRIGGER TBL_AREA_TYPE_INSERT
AFTER INSERT
   ON TBL_AREA_TYPE FOR EACH ROW

BEGIN

	DECLARE vIPClient VARCHAR(20);
	DECLARE vTranx VARCHAR(2000) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vUser VARCHAR(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci;

	-- Find username of person performing the INSERT into table
	SELECT SUBSTRING_INDEX(USER(), '@', 1) INTO vUser;
   
	IF vUser <> 'root' THEN
		-- Find IP of person performing the INSERT into table
		SELECT IFNULL(L.USER_IP,'localhost') INTO vIPClient FROM TBL_SYSTEM_LOG L WHERE NEW.REGISTERED_BY = L.USER_ID AND L.TEXT_TRANSACTION = 'LOGIN' ORDER BY L.LOGDATE DESC LIMIT 1;
	   
		-- Define the transaction
		SET vTranx = CONCAT('Add /AREA_TYPE/ ',NEW.AREA_TYPE_NAME,' ',NEW.PARENT_ID,' Id:',NEW.ID);

		-- Insert record into log table
		INSERT INTO TBL_SYSTEM_LOG (ID,USER_IP,USER_ID,LOGDATE,TEXT_TRANSACTION) VALUES (0,vIPClient,NEW.REGISTERED_BY,SYSDATE(),vTranx);

	END IF;

END; //


-- JOURNEY TABLE
DROP TRIGGER IF EXISTS TBL_JOURNEY_INSERT//
CREATE TRIGGER TBL_JOURNEY_INSERT
AFTER INSERT
   ON TBL_JOURNEY FOR EACH ROW

BEGIN

	DECLARE vIPClient VARCHAR(20);
	DECLARE vTranx VARCHAR(2000) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vUser VARCHAR(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci;

	-- Find username of person performing the INSERT into table
	SELECT SUBSTRING_INDEX(USER(), '@', 1) INTO vUser;
   
	IF vUser <> 'root' THEN
		-- Find IP of person performing the INSERT into table
		SELECT IFNULL(L.USER_IP,'localhost') INTO vIPClient FROM TBL_SYSTEM_LOG L WHERE NEW.REGISTERED_BY = L.USER_ID AND L.TEXT_TRANSACTION = 'LOGIN' ORDER BY L.LOGDATE DESC LIMIT 1;
	   
		-- Define the transaction
		SET vTranx = CONCAT('Add /JOURNEY/ ',NEW.RESOURCE_NAME,' Id:',NEW.ID);

		-- Insert record into log table
		INSERT INTO TBL_SYSTEM_LOG (ID,USER_IP,USER_ID,LOGDATE,TEXT_TRANSACTION) VALUES (0,vIPClient,NEW.REGISTERED_BY,SYSDATE(),vTranx);

	END IF;

END; //


-- VEHICLE PROTECTION TABLE
DROP TRIGGER IF EXISTS TBL_SYSTEM_VEHICLE_PROTECTION_INSERT//
CREATE TRIGGER TBL_SYSTEM_VEHICLE_PROTECTION_INSERT
AFTER INSERT
   ON TBL_SYSTEM_VEHICLE_PROTECTION FOR EACH ROW

BEGIN

	DECLARE vIPClient VARCHAR(20);
	DECLARE vTranx VARCHAR(2000) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vUser VARCHAR(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci;

	-- Find username of person performing the INSERT into table
	SELECT SUBSTRING_INDEX(USER(), '@', 1) INTO vUser;
   
	IF vUser <> 'root' THEN
		-- Find IP of person performing the INSERT into table
		SELECT IFNULL(L.USER_IP,'localhost') INTO vIPClient FROM TBL_SYSTEM_LOG L WHERE NEW.REGISTERED_BY = L.USER_ID AND L.TEXT_TRANSACTION = 'LOGIN' ORDER BY L.LOGDATE DESC LIMIT 1;
	   
		-- Define the transaction
		SET vTranx = CONCAT('Add /VEHICLE PROTECTION/ ',NEW.VEHICLE_TYPE_ID,' ',NEW.RESOURCE_NAME,' Id:',NEW.ID);

		-- Insert record into log table
		INSERT INTO TBL_SYSTEM_LOG (ID,USER_IP,USER_ID,LOGDATE,TEXT_TRANSACTION) VALUES (0,vIPClient,NEW.REGISTERED_BY,SYSDATE(),vTranx);

	END IF;

END; //


-- CLIENT TABLE
DROP TRIGGER IF EXISTS TBL_CLIENT_INSERT//
CREATE TRIGGER TBL_CLIENT_INSERT
AFTER INSERT
	ON TBL_CLIENT FOR EACH ROW

BEGIN

	DECLARE vIPClient VARCHAR(20);
	DECLARE vTranx VARCHAR(2000) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vUser VARCHAR(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci;

	-- Find username of person performing the INSERT into table
	SELECT SUBSTRING_INDEX(USER(), '@', 1) INTO vUser;
   
	IF vUser <> 'root' THEN	-- Find IP of person performing the INSERT into table
		SELECT IFNULL(L.USER_IP,'localhost') INTO vIPClient FROM TBL_SYSTEM_LOG L WHERE NEW.REGISTERED_BY = L.USER_ID AND L.TEXT_TRANSACTION = 'LOGIN' ORDER BY L.LOGDATE DESC LIMIT 1;
	
		-- Define the transaction
		SET vTranx = CONCAT('Add /CLIENTE/ ',NEW.CLIENT_NAME,' Id:',NEW.ID);
	
		-- Insert record into log table
		INSERT INTO TBL_SYSTEM_LOG (ID,USER_IP,USER_ID,LOGDATE,TEXT_TRANSACTION) VALUES (0,vIPClient,NEW.REGISTERED_BY,SYSDATE(),vTranx);
	END IF;

END; //


-- DELIVERY TYPE TABLE
DROP TRIGGER IF EXISTS TBL_DELIVERY_TYPE_INSERT//
CREATE TRIGGER TBL_DELIVERY_TYPE_INSERT
AFTER INSERT
	ON TBL_DELIVERY_TYPE FOR EACH ROW

BEGIN

	DECLARE vIPClient VARCHAR(20);
	DECLARE vTranx VARCHAR(2000) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vUser VARCHAR(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci;

	-- Find username of person performing the INSERT into table
	SELECT SUBSTRING_INDEX(USER(), '@', 1) INTO vUser;
   
	IF vUser <> 'root' THEN	-- Find IP of person performing the INSERT into table
		SELECT IFNULL(L.USER_IP,'localhost') INTO vIPClient FROM TBL_SYSTEM_LOG L WHERE NEW.REGISTERED_BY = L.USER_ID AND L.TEXT_TRANSACTION = 'LOGIN' ORDER BY L.LOGDATE DESC LIMIT 1;
	
		-- Define the transaction
		SET vTranx = CONCAT('Add /DELIVERY TYPE/ ',NEW.RESOURCE_NAME,' Id:',NEW.ID);
	
		-- Insert record into log table
		INSERT INTO TBL_SYSTEM_LOG (ID,USER_IP,USER_ID,LOGDATE,TEXT_TRANSACTION) VALUES (0,vIPClient,NEW.REGISTERED_BY,SYSDATE(),vTranx);
	END IF;

END; //


-- DIRECT CHAT TABLE
DROP TRIGGER IF EXISTS TBL_DIRECT_CHAT_INSERT//
CREATE TRIGGER TBL_DIRECT_CHAT_INSERT
AFTER INSERT
	ON TBL_DIRECT_CHAT FOR EACH ROW

BEGIN

	DECLARE vIPClient VARCHAR(20);
	DECLARE vTranx VARCHAR(2000) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vUser VARCHAR(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci;

	-- Find username of person performing the INSERT into table
	SELECT SUBSTRING_INDEX(USER(), '@', 1) INTO vUser;
   
	IF vUser <> 'root' THEN	-- Find IP of person performing the INSERT into table
		SELECT IFNULL(L.USER_IP,'localhost') INTO vIPClient FROM TBL_SYSTEM_LOG L WHERE NEW.REGISTERED_BY = L.USER_ID AND L.TEXT_TRANSACTION = 'LOGIN' ORDER BY L.LOGDATE DESC LIMIT 1;
	
		-- Define the transaction
		SET vTranx = CONCAT('Add /DIRECT CHAT/ From: ',NEW.SENDER,' To: ',NEW.DESTINY,' Id:',NEW.ID);
	
		-- Insert record into log table
		INSERT INTO TBL_SYSTEM_LOG (ID,USER_IP,USER_ID,LOGDATE,TEXT_TRANSACTION) VALUES (0,vIPClient,NEW.REGISTERED_BY,SYSDATE(),vTranx);
	END IF;

END; //


-- EMPLOYEE TABLE
DROP TRIGGER IF EXISTS TBL_EMPLOYEE_INSERT//
CREATE TRIGGER TBL_EMPLOYEE_INSERT
AFTER INSERT
	ON TBL_EMPLOYEE FOR EACH ROW

BEGIN

	DECLARE vIPClient VARCHAR(20);
	DECLARE vTranx VARCHAR(2000) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vUser VARCHAR(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci;

	-- Find username of person performing the INSERT into table
	SELECT SUBSTRING_INDEX(USER(), '@', 1) INTO vUser;
   
	IF vUser <> 'root' THEN	-- Find IP of person performing the INSERT into table
		SELECT IFNULL(L.USER_IP,'localhost') INTO vIPClient FROM TBL_SYSTEM_LOG L WHERE NEW.REGISTERED_BY = L.USER_ID AND L.TEXT_TRANSACTION = 'LOGIN' ORDER BY L.LOGDATE DESC LIMIT 1;
	
		-- Define the transaction
		SET vTranx = CONCAT('Add /EMPLOYEE/ ',NEW.FIRST_NAME,' ',NEW.LAST_NAME,' ',NEW.IDENTIFICATION,' Id:',NEW.ID);
	
		-- Insert record into log table
		INSERT INTO TBL_SYSTEM_LOG (ID,USER_IP,USER_ID,LOGDATE,TEXT_TRANSACTION) VALUES (0,vIPClient,NEW.REGISTERED_BY,SYSDATE(),vTranx);
	END IF;

END; //


-- EXTERNAL SESSION TABLE
DROP TRIGGER IF EXISTS TBL_EXTERNAL_SESSION_INSERT//
CREATE TRIGGER TBL_EXTERNAL_SESSION_INSERT
AFTER INSERT
	ON TBL_EXTERNAL_SESSION FOR EACH ROW

BEGIN

	DECLARE vIPClient VARCHAR(20);
	DECLARE vTranx VARCHAR(2000) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vUser VARCHAR(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci;

	-- Find username of person performing the INSERT into table
	SELECT SUBSTRING_INDEX(USER(), '@', 1) INTO vUser;
   
	IF vUser <> 'root' THEN	-- Find IP of person performing the INSERT into table
		SELECT IFNULL(L.USER_IP,'localhost') INTO vIPClient FROM TBL_SYSTEM_LOG L WHERE NEW.REGISTERED_BY = L.USER_ID AND L.TEXT_TRANSACTION = 'LOGIN' ORDER BY L.LOGDATE DESC LIMIT 1;
	
		-- Define the transaction
		SET vTranx = CONCAT('Add /EXTERNAL SESSION/ ',NEW.USER_ID,' ',NEW.REQUESTED_BY,' Id:',NEW.ID);
	
		-- Insert record into log table
		INSERT INTO TBL_SYSTEM_LOG (ID,USER_IP,USER_ID,LOGDATE,TEXT_TRANSACTION) VALUES (0,vIPClient,NEW.REGISTERED_BY,SYSDATE(),vTranx);
	END IF;

END; //


-- PARTNER TABLE
DROP TRIGGER IF EXISTS TBL_PARTNER_INSERT//
CREATE TRIGGER TBL_PARTNER_INSERT
AFTER INSERT
	ON TBL_PARTNER FOR EACH ROW

BEGIN

	DECLARE vIPClient VARCHAR(20);
	DECLARE vTranx VARCHAR(2000) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vUser VARCHAR(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci;

	-- Find username of person performing the INSERT into table
	SELECT SUBSTRING_INDEX(USER(), '@', 1) INTO vUser;
   
	IF vUser <> 'root' THEN	-- Find IP of person performing the INSERT into table
		SELECT IFNULL(L.USER_IP,'localhost') INTO vIPClient FROM TBL_SYSTEM_LOG L WHERE NEW.REGISTERED_BY = L.USER_ID AND L.TEXT_TRANSACTION = 'LOGIN' ORDER BY L.LOGDATE DESC LIMIT 1;
	
		-- Define the transaction
		SET vTranx = CONCAT('Add /PARTNER/ ',NEW.PARTNER_NAME,' ',NEW.IDENTIFICATION,' Id:',NEW.ID);
	
		-- Insert record into log table
		INSERT INTO TBL_SYSTEM_LOG (ID,USER_IP,USER_ID,LOGDATE,TEXT_TRANSACTION) VALUES (0,vIPClient,NEW.REGISTERED_BY,SYSDATE(),vTranx);
	END IF;

END; //


-- PARTNER CLIENT TABLE
DROP TRIGGER IF EXISTS TBL_PARTNER_CLIENT_INSERT//
CREATE TRIGGER TBL_PARTNER_CLIENT_INSERT
AFTER INSERT
	ON TBL_PARTNER_CLIENT FOR EACH ROW

BEGIN

	DECLARE vIPClient VARCHAR(20);
	DECLARE vTranx VARCHAR(2000) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vUser VARCHAR(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci;

	-- Find username of person performing the INSERT into table
	SELECT SUBSTRING_INDEX(USER(), '@', 1) INTO vUser;
   
	IF vUser <> 'root' THEN	-- Find IP of person performing the INSERT into table
		SELECT IFNULL(L.USER_IP,'localhost') INTO vIPClient FROM TBL_SYSTEM_LOG L WHERE NEW.REGISTERED_BY = L.USER_ID AND L.TEXT_TRANSACTION = 'LOGIN' ORDER BY L.LOGDATE DESC LIMIT 1;
	
		-- Define the transaction
		SET vTranx = CONCAT('Add /PARTNER CLIENT/ ',NEW.PARTNER_ID,' ',NEW.CLIENT_ID,' ',NEW.EMPLOYEE_ID,' Id:',NEW.ID);
	
		-- Insert record into log table
		INSERT INTO TBL_SYSTEM_LOG (ID,USER_IP,USER_ID,LOGDATE,TEXT_TRANSACTION) VALUES (0,vIPClient,NEW.REGISTERED_BY,SYSDATE(),vTranx);
	END IF;

END; //


-- PAYMENT TABLE
DROP TRIGGER IF EXISTS TBL_PAYMENT_INSERT//
CREATE TRIGGER TBL_PAYMENT_INSERT
AFTER INSERT
	ON TBL_PAYMENT FOR EACH ROW

BEGIN

	DECLARE vIPClient VARCHAR(20);
	DECLARE vTranx VARCHAR(2000) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vUser VARCHAR(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci;

	-- Find username of person performing the INSERT into table
	SELECT SUBSTRING_INDEX(USER(), '@', 1) INTO vUser;
   
	IF vUser <> 'root' THEN	-- Find IP of person performing the INSERT into table
		SELECT IFNULL(L.USER_IP,'localhost') INTO vIPClient FROM TBL_SYSTEM_LOG L WHERE NEW.REGISTERED_BY = L.USER_ID AND L.TEXT_TRANSACTION = 'LOGIN' ORDER BY L.LOGDATE DESC LIMIT 1;
	
		-- Define the transaction
		SET vTranx = CONCAT('Add /PAYMENT/ ',NEW.CLIENT_ID,' ',NEW.REFERENCE_ID,' ',NEW.TRANSACTION_ID,' Id:',NEW.ID);
	
		-- Insert record into log table
		INSERT INTO TBL_SYSTEM_LOG (ID,USER_IP,USER_ID,LOGDATE,TEXT_TRANSACTION) VALUES (0,vIPClient,NEW.REGISTERED_BY,SYSDATE(),vTranx);
	END IF;

END; //


-- PAYMENT STATE TABLE
DROP TRIGGER IF EXISTS TBL_PAYMENT_STATE_INSERT//
CREATE TRIGGER TBL_PAYMENT_STATE_INSERT
AFTER INSERT
	ON TBL_PAYMENT_STATE FOR EACH ROW

BEGIN

	DECLARE vIPClient VARCHAR(20);
	DECLARE vTranx VARCHAR(2000) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vUser VARCHAR(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci;

	-- Find username of person performing the INSERT into table
	SELECT SUBSTRING_INDEX(USER(), '@', 1) INTO vUser;
   
	IF vUser <> 'root' THEN	-- Find IP of person performing the INSERT into table
		SELECT IFNULL(L.USER_IP,'localhost') INTO vIPClient FROM TBL_SYSTEM_LOG L WHERE NEW.REGISTERED_BY = L.USER_ID AND L.TEXT_TRANSACTION = 'LOGIN' ORDER BY L.LOGDATE DESC LIMIT 1;
	
		-- Define the transaction
		SET vTranx = CONCAT('Add /PAYMENT STATE/ ',NEW.RESOURCE_NAME,' Id:',NEW.ID);
	
		-- Insert record into log table
		INSERT INTO TBL_SYSTEM_LOG (ID,USER_IP,USER_ID,LOGDATE,TEXT_TRANSACTION) VALUES (0,vIPClient,NEW.REGISTERED_BY,SYSDATE(),vTranx);
	END IF;

END; //


-- PAYMENT TYPE TABLE
DROP TRIGGER IF EXISTS TBL_PAYMENT_TYPE_INSERT//
CREATE TRIGGER TBL_PAYMENT_TYPE_INSERT
AFTER INSERT
	ON TBL_PAYMENT_TYPE FOR EACH ROW

BEGIN

	DECLARE vIPClient VARCHAR(20);
	DECLARE vTranx VARCHAR(2000) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vUser VARCHAR(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci;

	-- Find username of person performing the INSERT into table
	SELECT SUBSTRING_INDEX(USER(), '@', 1) INTO vUser;
   
	IF vUser <> 'root' THEN	-- Find IP of person performing the INSERT into table
		SELECT IFNULL(L.USER_IP,'localhost') INTO vIPClient FROM TBL_SYSTEM_LOG L WHERE NEW.REGISTERED_BY = L.USER_ID AND L.TEXT_TRANSACTION = 'LOGIN' ORDER BY L.LOGDATE DESC LIMIT 1;
	
		-- Define the transaction
		SET vTranx = CONCAT('Add /PAYMENT TYPE/ ',NEW.PAYMENT_TYPE,' Id:',NEW.ID);
	
		-- Insert record into log table
		INSERT INTO TBL_SYSTEM_LOG (ID,USER_IP,USER_ID,LOGDATE,TEXT_TRANSACTION) VALUES (0,vIPClient,NEW.REGISTERED_BY,SYSDATE(),vTranx);
	END IF;

END; //


-- POSITION TABLE
DROP TRIGGER IF EXISTS TBL_POSITION_INSERT//
CREATE TRIGGER TBL_POSITION_INSERT
AFTER INSERT
	ON TBL_POSITION FOR EACH ROW

BEGIN

	DECLARE vIPClient VARCHAR(20);
	DECLARE vTranx VARCHAR(2000) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vUser VARCHAR(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci;

	-- Find username of person performing the INSERT into table
	SELECT SUBSTRING_INDEX(USER(), '@', 1) INTO vUser;
   
	IF vUser <> 'root' THEN	-- Find IP of person performing the INSERT into table
		SELECT IFNULL(L.USER_IP,'localhost') INTO vIPClient FROM TBL_SYSTEM_LOG L WHERE NEW.REGISTERED_BY = L.USER_ID AND L.TEXT_TRANSACTION = 'LOGIN' ORDER BY L.LOGDATE DESC LIMIT 1;
	
		-- Define the transaction
		SET vTranx = CONCAT('Add /POSITION/ ',NEW.POSITION_NAME,' ',NEW.TITLE,' Id:',NEW.ID);
	
		-- Insert record into log table
		INSERT INTO TBL_SYSTEM_LOG (ID,USER_IP,USER_ID,LOGDATE,TEXT_TRANSACTION) VALUES (0,vIPClient,NEW.REGISTERED_BY,SYSDATE(),vTranx);
	END IF;

END; //


-- QUOTA TABLE
DROP TRIGGER IF EXISTS TBL_QUOTA_INSERT//
CREATE TRIGGER TBL_QUOTA_INSERT
AFTER INSERT
	ON TBL_QUOTA FOR EACH ROW

BEGIN

	DECLARE vIPClient VARCHAR(20);
	DECLARE vTranx VARCHAR(2000) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vUser VARCHAR(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci;

	-- Find username of person performing the INSERT into table
	SELECT SUBSTRING_INDEX(USER(), '@', 1) INTO vUser;
   
	IF vUser <> 'root' THEN	-- Find IP of person performing the INSERT into table
		SELECT IFNULL(L.USER_IP,'localhost') INTO vIPClient FROM TBL_SYSTEM_LOG L WHERE NEW.REGISTERED_BY = L.USER_ID AND L.TEXT_TRANSACTION = 'LOGIN' ORDER BY L.LOGDATE DESC LIMIT 1;
	
		-- Define the transaction
		SET vTranx = CONCAT('Add /QUOTA/ ',NEW.QUOTA_TYPE_ID,' ',NEW.CLIENT_ID,' Id:',NEW.ID);
	
		-- Insert record into log table
		INSERT INTO TBL_SYSTEM_LOG (ID,USER_IP,USER_ID,LOGDATE,TEXT_TRANSACTION) VALUES (0,vIPClient,NEW.REGISTERED_BY,SYSDATE(),vTranx);
	END IF;

END; //


-- QUOTA EMPLOYEE TABLE
DROP TRIGGER IF EXISTS TBL_QUOTA_EMPLOYEE_INSERT//
CREATE TRIGGER TBL_QUOTA_EMPLOYEE_INSERT
AFTER INSERT
	ON TBL_QUOTA_EMPLOYEE FOR EACH ROW

BEGIN

	DECLARE vIPClient VARCHAR(20);
	DECLARE vTranx VARCHAR(2000) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vUser VARCHAR(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci;

	-- Find username of person performing the INSERT into table
	SELECT SUBSTRING_INDEX(USER(), '@', 1) INTO vUser;
   
	IF vUser <> 'root' THEN	-- Find IP of person performing the INSERT into table
		SELECT IFNULL(L.USER_IP,'localhost') INTO vIPClient FROM TBL_SYSTEM_LOG L WHERE NEW.REGISTERED_BY = L.USER_ID AND L.TEXT_TRANSACTION = 'LOGIN' ORDER BY L.LOGDATE DESC LIMIT 1;
	
		-- Define the transaction
		SET vTranx = CONCAT('Add /QUOTA EMPLOYEE/ ',NEW.QUOTA_ID,' ',NEW.CLIENT_ID,' ',NEW.USER_ID,' Id:',NEW.ID);
	
		-- Insert record into log table
		INSERT INTO TBL_SYSTEM_LOG (ID,USER_IP,USER_ID,LOGDATE,TEXT_TRANSACTION) VALUES (0,vIPClient,NEW.REGISTERED_BY,SYSDATE(),vTranx);
	END IF;

END; //


-- QUOTA TYPE TABLE
DROP TRIGGER IF EXISTS TBL_QUOTA_TYPE_INSERT//
CREATE TRIGGER TBL_QUOTA_TYPE_INSERT
AFTER INSERT
	ON TBL_QUOTA_TYPE FOR EACH ROW

BEGIN

	DECLARE vIPClient VARCHAR(20);
	DECLARE vTranx VARCHAR(2000) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vUser VARCHAR(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci;

	-- Find username of person performing the INSERT into table
	SELECT SUBSTRING_INDEX(USER(), '@', 1) INTO vUser;
   
	IF vUser <> 'root' THEN	-- Find IP of person performing the INSERT into table
		SELECT IFNULL(L.USER_IP,'localhost') INTO vIPClient FROM TBL_SYSTEM_LOG L WHERE NEW.REGISTERED_BY = L.USER_ID AND L.TEXT_TRANSACTION = 'LOGIN' ORDER BY L.LOGDATE DESC LIMIT 1;
	
		-- Define the transaction
		SET vTranx = CONCAT('Add /QUOTA TYPE/ ',NEW.RESOURCE_NAME,' ',NEW.AMOUNT,' Id:',NEW.ID);
	
		-- Insert record into log table
		INSERT INTO TBL_SYSTEM_LOG (ID,USER_IP,USER_ID,LOGDATE,TEXT_TRANSACTION) VALUES (0,vIPClient,NEW.REGISTERED_BY,SYSDATE(),vTranx);
	END IF;

END; //


-- SERVICE TABLE
DROP TRIGGER IF EXISTS TBL_SERVICE_INSERT//
CREATE TRIGGER TBL_SERVICE_INSERT
AFTER INSERT
	ON TBL_SERVICE FOR EACH ROW

BEGIN

	DECLARE vIPClient VARCHAR(20);
	DECLARE vTranx VARCHAR(2000) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vUser VARCHAR(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vState VARCHAR(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci;

	-- Find username of person performing the INSERT into table
	SELECT SUBSTRING_INDEX(USER(), '@', 1) INTO vUser;
   
	IF vUser <> 'root' THEN	-- Find IP of person performing the INSERT into table
		SELECT IFNULL(L.USER_IP,'localhost') INTO vIPClient FROM TBL_SYSTEM_LOG L WHERE NEW.REGISTERED_BY = L.USER_ID AND L.TEXT_TRANSACTION = 'LOGIN' ORDER BY L.LOGDATE DESC LIMIT 1;
	
		-- Define the transaction
		SET vTranx = CONCAT('Add /SERVICE/ ',NEW.USER_ID,' ',NEW.CLIENT_ID,' ',NEW.REQUESTED_BY,' ',NEW.REQUESTED_ADDRESS,' ',NEW.DELIVER_TO,' ',NEW.DELIVER_ADDRESS,' Id:',NEW.ID);
	
		-- Insert record into log table
		INSERT INTO TBL_SYSTEM_LOG (ID,USER_IP,USER_ID,LOGDATE,TEXT_TRANSACTION) VALUES (0,vIPClient,NEW.REGISTERED_BY,SYSDATE(),vTranx);

		-- Check for the initial state
		SELECT ID INTO vState FROM TBL_SERVICE_STATE WHERE RESOURCE_NAME = 'SERVICE_STATE_0' LIMIT 1;

		-- Insert record service log
		INSERT INTO TBL_SERVICE_LOG (ID,SERVICE_ID,STATE_INITIAL_ID,STATE_FINAL_ID,EMPLOYEE_INITIAL_ID,EMPLOYEE_FINAL_ID,VEHICLE_INITIAL_ID,VEHICLE_FINAL_ID,LAST_POSITION,OBSERVATION,IS_BLOCKED,REGISTERED_ON,REGISTERED_BY,MODIFIED_ON,MODIFIED_BY)
			VALUES (UUID(),NEW.ID,vState,NEW.STATE_ID,NULL,NULL,NULL,NULL,'','',vUser,NOW(),NOW(),vUser);
	END IF;
	
END; //


-- SERVICE LOG TABLE
DROP TRIGGER IF EXISTS TBL_SERVICE_LOG_INSERT//
CREATE TRIGGER TBL_SERVICE_LOG_INSERT
AFTER INSERT
	ON TBL_SERVICE_LOG FOR EACH ROW

BEGIN

	DECLARE vIPClient VARCHAR(20);
	DECLARE vTranx VARCHAR(2000) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vUser VARCHAR(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci;

	-- Find username of person performing the INSERT into table
	SELECT SUBSTRING_INDEX(USER(), '@', 1) INTO vUser;
   
	IF vUser <> 'root' THEN	-- Find IP of person performing the INSERT into table
		SELECT IFNULL(L.USER_IP,'localhost') INTO vIPClient FROM TBL_SYSTEM_LOG L WHERE NEW.REGISTERED_BY = L.USER_ID AND L.TEXT_TRANSACTION = 'LOGIN' ORDER BY L.LOGDATE DESC LIMIT 1;
	
		-- Define the transaction
		SET vTranx = CONCAT('Add /SERVICE LOG/ ',NEW.SERVICE_ID,' ',NEW.STATE_INITIAL_ID,' ',NEW.STATE_FINAL_ID,' ',NEW.LAST_POSITION,' Id:',NEW.ID);
	
		-- Insert record into log table
		INSERT INTO TBL_SYSTEM_LOG (ID,USER_IP,USER_ID,LOGDATE,TEXT_TRANSACTION) VALUES (0,vIPClient,NEW.REGISTERED_BY,SYSDATE(),vTranx);
	END IF;

END; //


-- SERVICE STATE TABLE
DROP TRIGGER IF EXISTS TBL_SERVICE_STATE_INSERT//
CREATE TRIGGER TBL_SERVICE_STATE_INSERT
AFTER INSERT
	ON TBL_SERVICE_STATE FOR EACH ROW

BEGIN

	DECLARE vIPClient VARCHAR(20);
	DECLARE vTranx VARCHAR(2000) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vUser VARCHAR(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci;

	-- Find username of person performing the INSERT into table
	SELECT SUBSTRING_INDEX(USER(), '@', 1) INTO vUser;
   
	IF vUser <> 'root' THEN	-- Find IP of person performing the INSERT into table
		SELECT IFNULL(L.USER_IP,'localhost') INTO vIPClient FROM TBL_SYSTEM_LOG L WHERE NEW.REGISTERED_BY = L.USER_ID AND L.TEXT_TRANSACTION = 'LOGIN' ORDER BY L.LOGDATE DESC LIMIT 1;
	
		-- Define the transaction
		SET vTranx = CONCAT('Add /SERVICE STATE/ ',NEW.RESOURCE_NAME,' Id:',NEW.ID);
	
		-- Insert record into log table
		INSERT INTO TBL_SYSTEM_LOG (ID,USER_IP,USER_ID,LOGDATE,TEXT_TRANSACTION) VALUES (0,vIPClient,NEW.REGISTERED_BY,SYSDATE(),vTranx);
	END IF;

END; //


-- SYSTEM ACCESS TABLE
DROP TRIGGER IF EXISTS TBL_SYSTEM_ACCESS_INSERT//
CREATE TRIGGER TBL_SYSTEM_ACCESS_INSERT
AFTER INSERT
	ON TBL_SYSTEM_ACCESS FOR EACH ROW

BEGIN

	DECLARE vIPClient VARCHAR(20);
	DECLARE vTranx VARCHAR(2000) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vUser VARCHAR(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci;

	-- Find username of person performing the INSERT into table
	SELECT SUBSTRING_INDEX(USER(), '@', 1) INTO vUser;
   
	IF vUser <> 'root' THEN	-- Find IP of person performing the INSERT into table
		SELECT IFNULL(L.USER_IP,'localhost') INTO vIPClient FROM TBL_SYSTEM_LOG L WHERE NEW.REGISTERED_BY = L.USER_ID AND L.TEXT_TRANSACTION = 'LOGIN' ORDER BY L.LOGDATE DESC LIMIT 1;
	
		-- Define the transaction
		SET vTranx = CONCAT('Add /SYSTEM ACCESS/ ',NEW.RESOURCE_NAME,' ',NEW.PREFIX,' ',NEW.LINK_TO,' Id:',NEW.ID);
	
		-- Insert record into log table
		INSERT INTO TBL_SYSTEM_LOG (ID,USER_IP,USER_ID,LOGDATE,TEXT_TRANSACTION) VALUES (0,vIPClient,NEW.REGISTERED_BY,SYSDATE(),vTranx);
	END IF;

END; //


-- SYSTEM CITY TABLE
DROP TRIGGER IF EXISTS TBL_SYSTEM_CITY_INSERT//
CREATE TRIGGER TBL_SYSTEM_CITY_INSERT
AFTER INSERT
	ON TBL_SYSTEM_CITY FOR EACH ROW

BEGIN

	DECLARE vIPClient VARCHAR(20);
	DECLARE vTranx VARCHAR(2000) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vUser VARCHAR(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci;

	-- Find username of person performing the INSERT into table
	SELECT SUBSTRING_INDEX(USER(), '@', 1) INTO vUser;
   
	IF vUser <> 'root' THEN	-- Find IP of person performing the INSERT into table
		SELECT IFNULL(L.USER_IP,'localhost') INTO vIPClient FROM TBL_SYSTEM_LOG L WHERE NEW.REGISTERED_BY = L.USER_ID AND L.TEXT_TRANSACTION = 'LOGIN' ORDER BY L.LOGDATE DESC LIMIT 1;
	
		-- Define the transaction
		SET vTranx = CONCAT('Add /SYSTEM CITY/ ',NEW.CITY_NAME,' ',NEW.COUNTRY_ID,' Id:',NEW.ID);
	
		-- Insert record into log table
		INSERT INTO TBL_SYSTEM_LOG (ID,USER_IP,USER_ID,LOGDATE,TEXT_TRANSACTION) VALUES (0,vIPClient,NEW.REGISTERED_BY,SYSDATE(),vTranx);
	END IF;

END; //


-- SYSTEM CLIENT PAYMENT TYPE TABLE
DROP TRIGGER IF EXISTS TBL_SYSTEM_CLIENT_PAYMENT_TYPE_INSERT//
CREATE TRIGGER TBL_SYSTEM_CLIENT_PAYMENT_TYPE_INSERT
AFTER INSERT
	ON TBL_SYSTEM_CLIENT_PAYMENT_TYPE FOR EACH ROW

BEGIN

	DECLARE vIPClient VARCHAR(20);
	DECLARE vTranx VARCHAR(2000) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vUser VARCHAR(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci;

	-- Find username of person performing the INSERT into table
	SELECT SUBSTRING_INDEX(USER(), '@', 1) INTO vUser;
   
	IF vUser <> 'root' THEN	-- Find IP of person performing the INSERT into table
		SELECT IFNULL(L.USER_IP,'localhost') INTO vIPClient FROM TBL_SYSTEM_LOG L WHERE NEW.REGISTERED_BY = L.USER_ID AND L.TEXT_TRANSACTION = 'LOGIN' ORDER BY L.LOGDATE DESC LIMIT 1;
	
		-- Define the transaction
		SET vTranx = CONCAT('Add /SYSTEM CLIENT PAYMENT TYPE/ ',NEW.RESOURCE_NAME,' Id:',NEW.ID);
	
		-- Insert record into log table
		INSERT INTO TBL_SYSTEM_LOG (ID,USER_IP,USER_ID,LOGDATE,TEXT_TRANSACTION) VALUES (0,vIPClient,NEW.REGISTERED_BY,SYSDATE(),vTranx);
	END IF;

END; //


-- SYSTEM CLIENT TYPE TABLE
DROP TRIGGER IF EXISTS TBL_SYSTEM_CLIENT_TYPE_INSERT//
CREATE TRIGGER TBL_SYSTEM_CLIENT_TYPE_INSERT
AFTER INSERT
	ON TBL_SYSTEM_CLIENT_TYPE FOR EACH ROW

BEGIN

	DECLARE vIPClient VARCHAR(20);
	DECLARE vTranx VARCHAR(2000) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vUser VARCHAR(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci;

	-- Find username of person performing the INSERT into table
	SELECT SUBSTRING_INDEX(USER(), '@', 1) INTO vUser;
   
	IF vUser <> 'root' THEN	-- Find IP of person performing the INSERT into table
		SELECT IFNULL(L.USER_IP,'localhost') INTO vIPClient FROM TBL_SYSTEM_LOG L WHERE NEW.REGISTERED_BY = L.USER_ID AND L.TEXT_TRANSACTION = 'LOGIN' ORDER BY L.LOGDATE DESC LIMIT 1;
	
		-- Define the transaction
		SET vTranx = CONCAT('Add /SYSTEM CLIENT TYPE/ ',NEW.RESOURCE_NAME,' Id:',NEW.ID);
	
		-- Insert record into log table
		INSERT INTO TBL_SYSTEM_LOG (ID,USER_IP,USER_ID,LOGDATE,TEXT_TRANSACTION) VALUES (0,vIPClient,NEW.REGISTERED_BY,SYSDATE(),vTranx);
	END IF;

END; //


-- SYSTEM CONFIGURATION TABLE
DROP TRIGGER IF EXISTS TBL_SYSTEM_CONFIGURATION_INSERT//
CREATE TRIGGER TBL_SYSTEM_CONFIGURATION_INSERT
AFTER INSERT
	ON TBL_SYSTEM_CONFIGURATION FOR EACH ROW

BEGIN

	DECLARE vIPClient VARCHAR(20);
	DECLARE vTranx VARCHAR(2000) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vUser VARCHAR(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci;

	-- Find username of person performing the INSERT into table
	SELECT SUBSTRING_INDEX(USER(), '@', 1) INTO vUser;
   
	IF vUser <> 'root' THEN	-- Find IP of person performing the INSERT into table
		SELECT IFNULL(L.USER_IP,'localhost') INTO vIPClient FROM TBL_SYSTEM_LOG L WHERE NEW.REGISTERED_BY = L.USER_ID AND L.TEXT_TRANSACTION = 'LOGIN' ORDER BY L.LOGDATE DESC LIMIT 1;
	
		-- Define the transaction
		SET vTranx = CONCAT('Add /SYSTEM CONFIGURATION/ ',NEW.KEY_NAME,' ',NEW.KEY_VALUE,' Id:',NEW.ID);
	
		-- Insert record into log table
		INSERT INTO TBL_SYSTEM_LOG (ID,USER_IP,USER_ID,LOGDATE,TEXT_TRANSACTION) VALUES (0,vIPClient,NEW.REGISTERED_BY,SYSDATE(),vTranx);
	END IF;

END; //


-- SYSTEM COUNTRY TABLE
DROP TRIGGER IF EXISTS TBL_SYSTEM_COUNTRY_INSERT//
CREATE TRIGGER TBL_SYSTEM_COUNTRY_INSERT
AFTER INSERT
	ON TBL_SYSTEM_COUNTRY FOR EACH ROW

BEGIN

	DECLARE vIPClient VARCHAR(20);
	DECLARE vTranx VARCHAR(2000) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vUser VARCHAR(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci;

	-- Find username of person performing the INSERT into table
	SELECT SUBSTRING_INDEX(USER(), '@', 1) INTO vUser;
   
	IF vUser <> 'root' THEN	-- Find IP of person performing the INSERT into table
		SELECT IFNULL(L.USER_IP,'localhost') INTO vIPClient FROM TBL_SYSTEM_LOG L WHERE NEW.REGISTERED_BY = L.USER_ID AND L.TEXT_TRANSACTION = 'LOGIN' ORDER BY L.LOGDATE DESC LIMIT 1;
	
		-- Define the transaction
		SET vTranx = CONCAT('Add /SYSTEM COUNTRY/ ',NEW.COUNTRY,' ',NEW.CAPITAL,' Id:',NEW.ID);
	
		-- Insert record into log table
		INSERT INTO TBL_SYSTEM_LOG (ID,USER_IP,USER_ID,LOGDATE,TEXT_TRANSACTION) VALUES (0,vIPClient,NEW.REGISTERED_BY,SYSDATE(),vTranx);
	END IF;

END; //


-- SYSTEM DOCUMENT TYPE TABLE
DROP TRIGGER IF EXISTS TBL_SYSTEM_DOCUMENT_TYPE_INSERT//
CREATE TRIGGER TBL_SYSTEM_DOCUMENT_TYPE_INSERT
AFTER INSERT
	ON TBL_SYSTEM_DOCUMENT_TYPE FOR EACH ROW

BEGIN

	DECLARE vIPClient VARCHAR(20);
	DECLARE vTranx VARCHAR(2000) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vUser VARCHAR(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci;

	-- Find username of person performing the INSERT into table
	SELECT SUBSTRING_INDEX(USER(), '@', 1) INTO vUser;
   
	IF vUser <> 'root' THEN	-- Find IP of person performing the INSERT into table
		SELECT IFNULL(L.USER_IP,'localhost') INTO vIPClient FROM TBL_SYSTEM_LOG L WHERE NEW.REGISTERED_BY = L.USER_ID AND L.TEXT_TRANSACTION = 'LOGIN' ORDER BY L.LOGDATE DESC LIMIT 1;
	
		-- Define the transaction
		SET vTranx = CONCAT('Add /SYSTEM DOCUMENT TYPE/ ',NEW.RESOURCE_NAME,' ',NEW.ABBREVIATION,' Id:',NEW.ID);
	
		-- Insert record into log table
		INSERT INTO TBL_SYSTEM_LOG (ID,USER_IP,USER_ID,LOGDATE,TEXT_TRANSACTION) VALUES (0,vIPClient,NEW.REGISTERED_BY,SYSDATE(),vTranx);
	END IF;

END; //


-- SYSTEM LANGUAGE TABLE
DROP TRIGGER IF EXISTS TBL_SYSTEM_LANGUAGE_INSERT//
CREATE TRIGGER TBL_SYSTEM_LANGUAGE_INSERT
AFTER INSERT
	ON TBL_SYSTEM_LANGUAGE FOR EACH ROW

BEGIN

	DECLARE vIPClient VARCHAR(20);
	DECLARE vTranx VARCHAR(2000) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vUser VARCHAR(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci;

	-- Find username of person performing the INSERT into table
	SELECT SUBSTRING_INDEX(USER(), '@', 1) INTO vUser;
   
	IF vUser <> 'root' THEN	-- Find IP of person performing the INSERT into table
		SELECT IFNULL(L.USER_IP,'localhost') INTO vIPClient FROM TBL_SYSTEM_LOG L WHERE NEW.REGISTERED_BY = L.USER_ID AND L.TEXT_TRANSACTION = 'LOGIN' ORDER BY L.LOGDATE DESC LIMIT 1;
	
		-- Define the transaction
		SET vTranx = CONCAT('Add /SYSTEM LANGUAGE/ ',NEW.LANGUAGE_NAME,' ',NEW.ABBREVATION,' Id:',NEW.ID);
	
		-- Insert record into log table
		INSERT INTO TBL_SYSTEM_LOG (ID,USER_IP,USER_ID,LOGDATE,TEXT_TRANSACTION) VALUES (0,vIPClient,NEW.REGISTERED_BY,SYSDATE(),vTranx);
	END IF;

END; //


-- SYSTEM MENU TABLE
DROP TRIGGER IF EXISTS TBL_SYSTEM_MENU_INSERT//
CREATE TRIGGER TBL_SYSTEM_MENU_INSERT
AFTER INSERT
	ON TBL_SYSTEM_MENU FOR EACH ROW

BEGIN

	DECLARE vIPClient VARCHAR(20);
	DECLARE vTranx VARCHAR(2000) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vUser VARCHAR(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci;

	-- Find username of person performing the INSERT into table
	SELECT SUBSTRING_INDEX(USER(), '@', 1) INTO vUser;
   
	IF vUser <> 'root' THEN	-- Find IP of person performing the INSERT into table
		SELECT IFNULL(L.USER_IP,'localhost') INTO vIPClient FROM TBL_SYSTEM_LOG L WHERE NEW.REGISTERED_BY = L.USER_ID AND L.TEXT_TRANSACTION = 'LOGIN' ORDER BY L.LOGDATE DESC LIMIT 1;
	
		-- Define the transaction
		SET vTranx = CONCAT('Add /SYSTEM MENU/ ',NEW.RESOURCE_NAME,' ',NEW.LINK,' Id:',NEW.ID);
	
		-- Insert record into log table
		INSERT INTO TBL_SYSTEM_LOG (ID,USER_IP,USER_ID,LOGDATE,TEXT_TRANSACTION) VALUES (0,vIPClient,NEW.REGISTERED_BY,SYSDATE(),vTranx);
	END IF;

END; //


-- SYSTEM PAYMENT TYPE TABLE
DROP TRIGGER IF EXISTS TBL_SYSTEM_PAYMENT_TYPE_INSERT//
CREATE TRIGGER TBL_SYSTEM_PAYMENT_TYPE_INSERT
AFTER INSERT
	ON TBL_SYSTEM_PAYMENT_TYPE FOR EACH ROW

BEGIN

	DECLARE vIPClient VARCHAR(20);
	DECLARE vTranx VARCHAR(2000) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vUser VARCHAR(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci;

	-- Find username of person performing the INSERT into table
	SELECT SUBSTRING_INDEX(USER(), '@', 1) INTO vUser;
   
	IF vUser <> 'root' THEN	-- Find IP of person performing the INSERT into table
		SELECT IFNULL(L.USER_IP,'localhost') INTO vIPClient FROM TBL_SYSTEM_LOG L WHERE NEW.REGISTERED_BY = L.USER_ID AND L.TEXT_TRANSACTION = 'LOGIN' ORDER BY L.LOGDATE DESC LIMIT 1;
	
		-- Define the transaction
		SET vTranx = CONCAT('Add /SYSTEM PAYMENT TYPE/ ',NEW.RESOURCE_NAME,' ',NEW.CLIENT_TYPE_ID,' Id:',NEW.ID);
	
		-- Insert record into log table
		INSERT INTO TBL_SYSTEM_LOG (ID,USER_IP,USER_ID,LOGDATE,TEXT_TRANSACTION) VALUES (0,vIPClient,NEW.REGISTERED_BY,SYSDATE(),vTranx);
	END IF;

END; //


-- SYSTEM RATE TABLE
DROP TRIGGER IF EXISTS TBL_SYSTEM_RATE_INSERT//
CREATE TRIGGER TBL_SYSTEM_RATE_INSERT
AFTER INSERT
	ON TBL_SYSTEM_RATE FOR EACH ROW

BEGIN

	DECLARE vIPClient VARCHAR(20);
	DECLARE vTranx VARCHAR(2000) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vUser VARCHAR(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci;

	-- Find username of person performing the INSERT into table
	SELECT SUBSTRING_INDEX(USER(), '@', 1) INTO vUser;
   
	IF vUser <> 'root' THEN	-- Find IP of person performing the INSERT into table
		SELECT IFNULL(L.USER_IP,'localhost') INTO vIPClient FROM TBL_SYSTEM_LOG L WHERE NEW.REGISTERED_BY = L.USER_ID AND L.TEXT_TRANSACTION = 'LOGIN' ORDER BY L.LOGDATE DESC LIMIT 1;
	
		-- Define the transaction
		SET vTranx = CONCAT('Add /SYSTEM RATE/ ',NEW.DISTANCE_INITIAL,' ',NEW.DISTANCE_FINAL,' ',NEW.RATE,' Id:',NEW.ID);
	
		-- Insert record into log table
		INSERT INTO TBL_SYSTEM_LOG (ID,USER_IP,USER_ID,LOGDATE,TEXT_TRANSACTION) VALUES (0,vIPClient,NEW.REGISTERED_BY,SYSDATE(),vTranx);
	END IF;

END; //


-- SYSTEM RESOURCE TABLE
DROP TRIGGER IF EXISTS TBL_SYSTEM_RESOURCE_INSERT//
CREATE TRIGGER TBL_SYSTEM_RESOURCE_INSERT
AFTER INSERT
	ON TBL_SYSTEM_RESOURCE FOR EACH ROW

BEGIN

	DECLARE vIPClient VARCHAR(20);
	DECLARE vTranx VARCHAR(2000) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vUser VARCHAR(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci;

	-- Find username of person performing the INSERT into table
	SELECT SUBSTRING_INDEX(USER(), '@', 1) INTO vUser;
   
	IF vUser <> 'root' THEN	-- Find IP of person performing the INSERT into table
		SELECT IFNULL(L.USER_IP,'localhost') INTO vIPClient FROM TBL_SYSTEM_LOG L WHERE NEW.REGISTERED_BY = L.USER_ID AND L.TEXT_TRANSACTION = 'LOGIN' ORDER BY L.LOGDATE DESC LIMIT 1;
	
		-- Define the transaction
		SET vTranx = CONCAT('Add /SYSTEM RESOURCE/ ',NEW.RESOURCE_NAME,' ',NEW.RESOURCE_TEXT,' ',NEW.LANGUAGE_ID,' Id:',NEW.ID);
	
		-- Insert record into log table
		INSERT INTO TBL_SYSTEM_LOG (ID,USER_IP,USER_ID,LOGDATE,TEXT_TRANSACTION) VALUES (0,vIPClient,NEW.REGISTERED_BY,SYSDATE(),vTranx);
	END IF;

END; //


-- SYSTEM USER TABLE
DROP TRIGGER IF EXISTS TBL_SYSTEM_USER_INSERT//
CREATE TRIGGER TBL_SYSTEM_USER_INSERT
AFTER INSERT
	ON TBL_SYSTEM_USER FOR EACH ROW

BEGIN

	DECLARE vIPClient VARCHAR(20);
	DECLARE vTranx VARCHAR(2000) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vUser VARCHAR(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci;

	-- Find username of person performing the INSERT into table
	SELECT SUBSTRING_INDEX(USER(), '@', 1) INTO vUser;
   
	IF vUser <> 'root' THEN
		-- Find IP of person performing the INSERT into table
		SELECT IFNULL(L.USER_IP,'localhost') INTO vIPClient FROM TBL_SYSTEM_LOG L WHERE vUser = L.USER_ID AND L.TEXT_TRANSACTION = 'LOGIN' ORDER BY L.LOGDATE DESC LIMIT 1;

		-- Define the transaction
		SET vTranx = CONCAT('Add /SYSTEM_USER/ ',NEW.FIRST_NAME,' ',NEW.LAST_NAME,' ',NEW.EMAIL,' ',NEW.ACCESS_ID,' Id:',NEW.ID);

		-- Insert record into log table
		INSERT INTO TBL_SYSTEM_LOG (ID,USER_IP,USER_ID,LOGDATE,TEXT_TRANSACTION) VALUES (0,vIPClient,vUser,SYSDATE(),vTranx);
	END IF;

END; //


-- SYSTEM VEHICLE TYPE TABLE
DROP TRIGGER IF EXISTS TBL_SYSTEM_VEHICLE_TYPE_INSERT//
CREATE TRIGGER TBL_SYSTEM_VEHICLE_TYPE_INSERT
AFTER INSERT
	ON TBL_SYSTEM_VEHICLE_TYPE FOR EACH ROW

BEGIN

	DECLARE vIPClient VARCHAR(20);
	DECLARE vTranx VARCHAR(2000) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vUser VARCHAR(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci;

	-- Find username of person performing the INSERT into table
	SELECT SUBSTRING_INDEX(USER(), '@', 1) INTO vUser;
   
	IF vUser <> 'root' THEN	-- Find IP of person performing the INSERT into table
		SELECT IFNULL(L.USER_IP,'localhost') INTO vIPClient FROM TBL_SYSTEM_LOG L WHERE NEW.REGISTERED_BY = L.USER_ID AND L.TEXT_TRANSACTION = 'LOGIN' ORDER BY L.LOGDATE DESC LIMIT 1;
	
		-- Define the transaction
		SET vTranx = CONCAT('Add /SYSTEM VEHICLE TYPE/ ',NEW.RESOURCE_NAME,' Id:',NEW.ID);
	
		-- Insert record into log table
		INSERT INTO TBL_SYSTEM_LOG (ID,USER_IP,USER_ID,LOGDATE,TEXT_TRANSACTION) VALUES (0,vIPClient,NEW.REGISTERED_BY,SYSDATE(),vTranx);
	END IF;

END; //


-- SYSTEM ZONE TABLE
DROP TRIGGER IF EXISTS TBL_SYSTEM_ZONE_INSERT//
CREATE TRIGGER TBL_SYSTEM_ZONE_INSERT
AFTER INSERT
	ON TBL_SYSTEM_ZONE FOR EACH ROW

BEGIN

	DECLARE vIPClient VARCHAR(20);
	DECLARE vTranx VARCHAR(2000) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vUser VARCHAR(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci;

	-- Find username of person performing the INSERT into table
	SELECT SUBSTRING_INDEX(USER(), '@', 1) INTO vUser;
   
	IF vUser <> 'root' THEN	-- Find IP of person performing the INSERT into table
		SELECT IFNULL(L.USER_IP,'localhost') INTO vIPClient FROM TBL_SYSTEM_LOG L WHERE NEW.REGISTERED_BY = L.USER_ID AND L.TEXT_TRANSACTION = 'LOGIN' ORDER BY L.LOGDATE DESC LIMIT 1;
	
		-- Define the transaction
		SET vTranx = CONCAT('Add /SYSTEM ZONE/ ',NEW.ZONE_NAME,' ',NEW.CITY_ID,' Id:',NEW.ID);
	
		-- Insert record into log table
		INSERT INTO TBL_SYSTEM_LOG (ID,USER_IP,USER_ID,LOGDATE,TEXT_TRANSACTION) VALUES (0,vIPClient,NEW.REGISTERED_BY,SYSDATE(),vTranx);
	END IF;

END; //


-- VEHICLE TABLE
DROP TRIGGER IF EXISTS TBL_VEHICLE_INSERT//
CREATE TRIGGER TBL_VEHICLE_INSERT
AFTER INSERT
	ON TBL_VEHICLE FOR EACH ROW

BEGIN

	DECLARE vIPClient VARCHAR(20);
	DECLARE vTranx VARCHAR(2000) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vUser VARCHAR(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci;

	-- Find username of person performing the INSERT into table
	SELECT SUBSTRING_INDEX(USER(), '@', 1) INTO vUser;
   
	IF vUser <> 'root' THEN	-- Find IP of person performing the INSERT into table
		SELECT IFNULL(L.USER_IP,'localhost') INTO vIPClient FROM TBL_SYSTEM_LOG L WHERE NEW.REGISTERED_BY = L.USER_ID AND L.TEXT_TRANSACTION = 'LOGIN' ORDER BY L.LOGDATE DESC LIMIT 1;
	
		-- Define the transaction
		SET vTranx = CONCAT('Add /VEHICLE/ ',NEW.PLATE,' ',NEW.BRAND,' ',NEW.EMPLOYEE_ID,' ',NEW.VEHICLE_TYPE_ID,' Id:',NEW.ID);
	
		-- Insert record into log table
		INSERT INTO TBL_SYSTEM_LOG (ID,USER_IP,USER_ID,LOGDATE,TEXT_TRANSACTION) VALUES (0,vIPClient,NEW.REGISTERED_BY,SYSDATE(),vTranx);
	END IF;

END; //




-- ***************
-- UPDATE TRIGGERS
-- *************** 


-- COLOR TABLE
DROP TRIGGER IF EXISTS TBL_SYSTEM_COLOR_UPDATE//
CREATE TRIGGER TBL_SYSTEM_COLOR_UPDATE
AFTER UPDATE
   ON TBL_SYSTEM_COLOR FOR EACH ROW

BEGIN

	DECLARE vIPClient VARCHAR(20);
	DECLARE vTranx VARCHAR(2000) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vUser VARCHAR(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vOld VARCHAR(4000);
	DECLARE vNew VARCHAR(4000);
	DECLARE vLogId INTEGER;
	DECLARE vVersion DECIMAL(4,2);
	
	-- Find username of person performing the INSERT into table
	SELECT SUBSTRING_INDEX(USER(), '@', 1) INTO vUser;
	SELECT CAST((CASE WHEN INSTR(@@GLOBAL.version,'-') > 0 THEN LEFT(@@GLOBAL.version, INSTR(@@GLOBAL.version,'-')-1) ELSE @@GLOBAL.version END) AS DECIMAL(4,1)) INTO vVersion;
   
	IF vUser <> 'root' THEN
		-- Verify the version
		IF vVersion >= 5.7 THEN
			-- Generates JSON object for trace
			SELECT JSON_OBJECT('RESOURCE_NAME', OLD.RESOURCE_NAME,
								'HEXA', OLD.HEXA,
								'CLASS_NAME', OLD.CLASS_NAME,
								'IS_BLOCKED', OLD.IS_BLOCKED)
				INTO vOld;

			-- Generates JSON object for trace
			SELECT JSON_OBJECT('RESOURCE_NAME', NEW.RESOURCE_NAME,
								'HEXA', NEW.HEXA,
								'CLASS_NAME', NEW.CLASS_NAME,
								'IS_BLOCKED', NEW.IS_BLOCKED)
				INTO vNew;
		ELSE
			-- Generates STRING object for trace
			SELECT CONCAT(' RESOURCE_NAME:', OLD.RESOURCE_NAME,
							' HEXA:', OLD.HEXA,
							' CLASS_NAME:', OLD.CLASS_NAME,
							' IS_BLOCKED:', OLD.IS_BLOCKED)
				INTO vOld;

			-- Generates STRING object for trace
			SELECT CONCAT(' RESOURCE_NAME:', NEW.RESOURCE_NAME,
							' HEXA:', NEW.HEXA,
							' CLASS_NAME:', NEW.CLASS_NAME,
							' IS_BLOCKED:', NEW.IS_BLOCKED)
				INTO vNew;
		END IF;
			
		-- Find IP of person performing the INSERT into table
		SELECT IFNULL(L.USER_IP,'localhost') INTO vIPClient FROM TBL_SYSTEM_LOG L WHERE NEW.MODIFIED_BY = L.USER_ID AND L.TEXT_TRANSACTION = 'LOGIN' ORDER BY L.LOGDATE DESC LIMIT 1;
	   
		-- Define the transaction
		SET vTranx = CONCAT('Update COLOR Id:',NEW.ID);

		-- Insert record into log table
		INSERT INTO TBL_SYSTEM_LOG (ID,USER_IP,USER_ID,LOGDATE,TEXT_TRANSACTION) VALUES (0,vIPClient,NEW.MODIFIED_BY,SYSDATE(),vTranx);

		-- Insert the trace 
		INSERT INTO TBL_SYSTEM_TRACE (ID,LOG_ID,TABLE_ORIGIN,RECORD_ID,OLD_RECORD,NEW_RECORD) VALUES (0,LAST_INSERT_ID(),'TBL_SYSTEM_COLOR',NEW.ID,LEFT(CONVERT(vOld USING utf8),4000),LEFT(CONVERT(vNew USING utf8),4000));
		
	END IF;

END; //


-- AREA TABLE
DROP TRIGGER IF EXISTS TBL_AREA_UPDATE//
CREATE TRIGGER TBL_AREA_UPDATE
AFTER UPDATE
   ON TBL_AREA FOR EACH ROW

BEGIN

	DECLARE vIPClient VARCHAR(20);
	DECLARE vTranx VARCHAR(2000) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vUser VARCHAR(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vOld VARCHAR(4000);
	DECLARE vNew VARCHAR(4000);
	DECLARE vLogId INTEGER;
	DECLARE vVersion DECIMAL(4,2);
	
	-- Find username of person performing the INSERT into table
	SELECT SUBSTRING_INDEX(USER(), '@', 1) INTO vUser;
	SELECT CAST((CASE WHEN INSTR(@@GLOBAL.version,'-') > 0 THEN LEFT(@@GLOBAL.version, INSTR(@@GLOBAL.version,'-')-1) ELSE @@GLOBAL.version END) AS DECIMAL(4,1)) INTO vVersion;
   
	IF vUser <> 'root' THEN
		-- Verify the version
		IF vVersion >= 5.7 THEN
			-- Generates JSON object for trace
			SELECT JSON_OBJECT('AREA_NAME', OLD.AREA_NAME, 
								'TITLE', OLD.TITLE,
								'COSTCENTER', OLD.COSTCENTER,
								'CLIENT_ID', OLD.CLIENT_ID,
								'IS_BLOCKED', OLD.IS_BLOCKED)
				INTO vOld;

			-- Generates JSON object for trace
			SELECT JSON_OBJECT('AREA_NAME', NEW.AREA_NAME, 
								'TITLE', NEW.TITLE,
								'COSTCENTER', NEW.COSTCENTER,
								'CLIENT_ID', NEW.CLIENT_ID,
								'IS_BLOCKED', NEW.IS_BLOCKED)
				INTO vNew;
		ELSE
			-- Generates STRING object for trace
			SELECT CONCAT('AREA_NAME:', OLD.AREA_NAME, 
								' TITLE:', OLD.TITLE,
								' COSTCENTER:', OLD.COSTCENTER,
								' CLIENT_ID:', OLD.CLIENT_ID,
								' IS_BLOCKED:', OLD.IS_BLOCKED)
				INTO vOld;

			-- Generates STRING object for trace
			SELECT CONCAT('AREA_NAME:', NEW.AREA_NAME, 
								' TITLE:', NEW.TITLE,
								' COSTCENTER:', NEW.COSTCENTER,
								' CLIENT_ID:', NEW.CLIENT_ID,
								' IS_BLOCKED:', NEW.IS_BLOCKED)
				INTO vNew;
		END IF;
			
		-- Find IP of person performing the INSERT into table
		SELECT IFNULL(L.USER_IP,'localhost') INTO vIPClient FROM TBL_SYSTEM_LOG L WHERE NEW.MODIFIED_BY = L.USER_ID AND L.TEXT_TRANSACTION = 'LOGIN' ORDER BY L.LOGDATE DESC LIMIT 1;
	   
		-- Define the transaction
		SET vTranx = CONCAT('Update AREA Id:',NEW.ID);

		-- Insert record into log table
		INSERT INTO TBL_SYSTEM_LOG (ID,USER_IP,USER_ID,LOGDATE,TEXT_TRANSACTION) VALUES (0,vIPClient,NEW.MODIFIED_BY,SYSDATE(),vTranx);

		-- Insert the trace 
		INSERT INTO TBL_SYSTEM_TRACE (ID,LOG_ID,TABLE_ORIGIN,RECORD_ID,OLD_RECORD,NEW_RECORD) VALUES (0,LAST_INSERT_ID(),'TBL_AREA',NEW.ID,LEFT(CONVERT(vOld USING utf8),4000),LEFT(CONVERT(vNew USING utf8),4000));
		
	END IF;

END; //


-- AREA TYPE TABLE
DROP TRIGGER IF EXISTS TBL_AREA_TYPE_UPDATE//
CREATE TRIGGER TBL_AREA_TYPE_UPDATE
AFTER UPDATE
   ON TBL_AREA_TYPE FOR EACH ROW

BEGIN

	DECLARE vIPClient VARCHAR(20);
	DECLARE vTranx VARCHAR(2000) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vUser VARCHAR(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vOld VARCHAR(4000);
	DECLARE vNew VARCHAR(4000);
	DECLARE vLogId INTEGER;
	DECLARE vVersion DECIMAL(4,2);
	
	-- Find username of person performing the INSERT into table
	SELECT SUBSTRING_INDEX(USER(), '@', 1) INTO vUser;
	SELECT CAST((CASE WHEN INSTR(@@GLOBAL.version,'-') > 0 THEN LEFT(@@GLOBAL.version, INSTR(@@GLOBAL.version,'-')-1) ELSE @@GLOBAL.version END) AS DECIMAL(4,1)) INTO vVersion;
   
	IF vUser <> 'root' THEN
		-- Verify the version
		IF vVersion >= 5.7 THEN
			-- Generates JSON object for trace
			SELECT JSON_OBJECT('PARENT_ID', OLD.PARENT_ID,
								'AREA_TYPE_NAME', OLD.AREA_TYPE_NAME,
								'IS_BLOCKED', OLD.IS_BLOCKED)
				INTO vOld;

			-- Generates JSON object for trace
			SELECT JSON_OBJECT('PARENT_ID', NEW.PARENT_ID,
								'AREA_TYPE_NAME', NEW.AREA_TYPE_NAME,
								'IS_BLOCKED', NEW.IS_BLOCKED)
				INTO vNew;
		ELSE
			-- Generates STRING object for trace
			SELECT CONCAT(' PARENT_ID:', OLD.PARENT_ID,
							' AREA_TYPE_NAME:', OLD.AREA_TYPE_NAME,
							' IS_BLOCKED:', OLD.IS_BLOCKED)
				INTO vOld;

			-- Generates STRING object for trace
			SELECT CONCAT(' PARENT_ID:', NEW.PARENT_ID,
							' AREA_TYPE_NAME:', NEW.AREA_TYPE_NAME,
							' IS_BLOCKED:', NEW.IS_BLOCKED)
				INTO vNew;
		END IF;
			
		-- Find IP of person performing the INSERT into table
		SELECT IFNULL(L.USER_IP,'localhost') INTO vIPClient FROM TBL_SYSTEM_LOG L WHERE NEW.MODIFIED_BY = L.USER_ID AND L.TEXT_TRANSACTION = 'LOGIN' ORDER BY L.LOGDATE DESC LIMIT 1;
	   
		-- Define the transaction
		SET vTranx = CONCAT('Update AREA TYPE Id:',NEW.ID);

		-- Insert record into log table
		INSERT INTO TBL_SYSTEM_LOG (ID,USER_IP,USER_ID,LOGDATE,TEXT_TRANSACTION) VALUES (0,vIPClient,NEW.MODIFIED_BY,SYSDATE(),vTranx);

		-- Insert the trace 
		INSERT INTO TBL_SYSTEM_TRACE (ID,LOG_ID,TABLE_ORIGIN,RECORD_ID,OLD_RECORD,NEW_RECORD) VALUES (0,LAST_INSERT_ID(),'TBL_AREA_TYPE',NEW.ID,LEFT(CONVERT(vOld USING utf8),4000),LEFT(CONVERT(vNew USING utf8),4000));
		
	END IF;

END; //


-- JOURNEY TABLE
DROP TRIGGER IF EXISTS TBL_JOURNEY_UPDATE//
CREATE TRIGGER TBL_JOURNEY_UPDATE
AFTER UPDATE
   ON TBL_JOURNEY FOR EACH ROW

BEGIN

	DECLARE vIPClient VARCHAR(20);
	DECLARE vTranx VARCHAR(2000) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vUser VARCHAR(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vOld VARCHAR(4000);
	DECLARE vNew VARCHAR(4000);
	DECLARE vLogId INTEGER;
	DECLARE vVersion DECIMAL(4,2);
	
	-- Find username of person performing the INSERT into table
	SELECT SUBSTRING_INDEX(USER(), '@', 1) INTO vUser;
	SELECT CAST((CASE WHEN INSTR(@@GLOBAL.version,'-') > 0 THEN LEFT(@@GLOBAL.version, INSTR(@@GLOBAL.version,'-')-1) ELSE @@GLOBAL.version END) AS DECIMAL(4,1)) INTO vVersion;
   
	IF vUser <> 'root' THEN
		-- Verify the version
		IF vVersion >= 5.7 THEN
			-- Generates JSON object for trace
			SELECT JSON_OBJECT('RESOURCE_NAME', OLD.RESOURCE_NAME,
								'IS_BLOCKED', OLD.IS_BLOCKED)
				INTO vOld;

			-- Generates JSON object for trace
			SELECT JSON_OBJECT('RESOURCE_NAME', NEW.RESOURCE_NAME,
								'IS_BLOCKED', NEW.IS_BLOCKED)
				INTO vNew;
		ELSE
			-- Generates STRING object for trace
			SELECT CONCAT(' RESOURCE_NAME:', OLD.RESOURCE_NAME,
							' IS_BLOCKED:', OLD.IS_BLOCKED)
				INTO vOld;

			-- Generates STRING object for trace
			SELECT CONCAT(' RESOURCE_NAME:', NEW.RESOURCE_NAME,
							' IS_BLOCKED:', NEW.IS_BLOCKED)
				INTO vNew;
		END IF;
			
		-- Find IP of person performing the INSERT into table
		SELECT IFNULL(L.USER_IP,'localhost') INTO vIPClient FROM TBL_SYSTEM_LOG L WHERE NEW.MODIFIED_BY = L.USER_ID AND L.TEXT_TRANSACTION = 'LOGIN' ORDER BY L.LOGDATE DESC LIMIT 1;
	   
		-- Define the transaction
		SET vTranx = CONCAT('Update JOURNEY Id:',NEW.ID);

		-- Insert record into log table
		INSERT INTO TBL_SYSTEM_LOG (ID,USER_IP,USER_ID,LOGDATE,TEXT_TRANSACTION) VALUES (0,vIPClient,NEW.MODIFIED_BY,SYSDATE(),vTranx);

		-- Insert the trace 
		INSERT INTO TBL_SYSTEM_TRACE (ID,LOG_ID,TABLE_ORIGIN,RECORD_ID,OLD_RECORD,NEW_RECORD) VALUES (0,LAST_INSERT_ID(),'TBL_JOURNEY',NEW.ID,LEFT(CONVERT(vOld USING utf8),4000),LEFT(CONVERT(vNew USING utf8),4000));
		
	END IF;

END; //



-- SYSTEM VEHICLE PROTECTION TABLE
DROP TRIGGER IF EXISTS TBL_SYSTEM_VEHICLE_PROTECTION_UPDATE//
CREATE TRIGGER TBL_SYSTEM_VEHICLE_PROTECTION_UPDATE
AFTER UPDATE
   ON TBL_SYSTEM_VEHICLE_PROTECTION FOR EACH ROW

BEGIN

	DECLARE vIPClient VARCHAR(20);
	DECLARE vTranx VARCHAR(2000) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vUser VARCHAR(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vOld VARCHAR(4000);
	DECLARE vNew VARCHAR(4000);
	DECLARE vLogId INTEGER;
	DECLARE vVersion DECIMAL(4,2);
	
	-- Find username of person performing the INSERT into table
	SELECT SUBSTRING_INDEX(USER(), '@', 1) INTO vUser;
	SELECT CAST((CASE WHEN INSTR(@@GLOBAL.version,'-') > 0 THEN LEFT(@@GLOBAL.version, INSTR(@@GLOBAL.version,'-')-1) ELSE @@GLOBAL.version END) AS DECIMAL(4,1)) INTO vVersion;
   
	IF vUser <> 'root' THEN
		-- Verify the version
		IF vVersion >= 5.7 THEN
			-- Generates JSON object for trace
			SELECT JSON_OBJECT('VEHICLE_TYPE_ID', OLD.VEHICLE_TYPE_ID,
								'RESOURCE_NAME', OLD.RESOURCE_NAME,
								'IS_BLOCKED', OLD.IS_BLOCKED)
				INTO vOld;

			-- Generates JSON object for trace
			SELECT JSON_OBJECT('VEHICLE_TYPE_ID', NEW.VEHICLE_TYPE_ID,
								'RESOURCE_NAME', NEW.RESOURCE_NAME,
								'IS_BLOCKED', NEW.IS_BLOCKED)
				INTO vNew;
		ELSE
			-- Generates STRING object for trace
			SELECT CONCAT(' VEHICLE_TYPE_ID:', OLD.VEHICLE_TYPE_ID,
							' RESOURCE_NAME:', OLD.RESOURCE_NAME,
							' IS_BLOCKED:', OLD.IS_BLOCKED)
				INTO vOld;

			-- Generates STRING object for trace
			SELECT CONCAT(' VEHICLE_TYPE_ID:', NEW.VEHICLE_TYPE_ID,
							' RESOURCE_NAME:', NEW.RESOURCE_NAME,
							' IS_BLOCKED:', NEW.IS_BLOCKED)
				INTO vNew;
		END IF;
			
		-- Find IP of person performing the INSERT into table
		SELECT IFNULL(L.USER_IP,'localhost') INTO vIPClient FROM TBL_SYSTEM_LOG L WHERE NEW.MODIFIED_BY = L.USER_ID AND L.TEXT_TRANSACTION = 'LOGIN' ORDER BY L.LOGDATE DESC LIMIT 1;
	   
		-- Define the transaction
		SET vTranx = CONCAT('Update SYSTEM VEHICLE PROTECTION Id:',NEW.ID);

		-- Insert record into log table
		INSERT INTO TBL_SYSTEM_LOG (ID,USER_IP,USER_ID,LOGDATE,TEXT_TRANSACTION) VALUES (0,vIPClient,NEW.MODIFIED_BY,SYSDATE(),vTranx);

		-- Insert the trace 
		INSERT INTO TBL_SYSTEM_TRACE (ID,LOG_ID,TABLE_ORIGIN,RECORD_ID,OLD_RECORD,NEW_RECORD) VALUES (0,LAST_INSERT_ID(),'TBL_SYSTEM_VEHICLE_PROTECTION',NEW.ID,LEFT(CONVERT(vOld USING utf8),4000),LEFT(CONVERT(vNew USING utf8),4000));
		
	END IF;

END; //




-- CLIENT TABLE
DROP TRIGGER IF EXISTS TBL_CLIENT_UPDATE//
CREATE TRIGGER TBL_CLIENT_UPDATE
AFTER UPDATE
   ON TBL_CLIENT FOR EACH ROW

BEGIN

	DECLARE vIPClient VARCHAR(20);
	DECLARE vTranx VARCHAR(2000) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vUser VARCHAR(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vOld VARCHAR(4000);
	DECLARE vNew VARCHAR(4000);
	DECLARE vLogId INTEGER;
	DECLARE vVersion DECIMAL(4,2);
	
	-- Find username of person performing the INSERT into table
	SELECT SUBSTRING_INDEX(USER(), '@', 1) INTO vUser;
	SELECT CAST((CASE WHEN INSTR(@@GLOBAL.version,'-') > 0 THEN LEFT(@@GLOBAL.version, INSTR(@@GLOBAL.version,'-')-1) ELSE @@GLOBAL.version END) AS DECIMAL(4,1)) INTO vVersion;
   
	IF vUser <> 'root' THEN
		-- Verify the version
		IF vVersion >= 5.7 THEN
			-- Generates JSON object for trace
			SELECT JSON_OBJECT('CLIENT_NAME', OLD.CLIENT_NAME,
								'PAYMENT_TYPE_ID', OLD.PAYMENT_TYPE_ID,
								'CLIENT_PAYMENT_TYPE_ID', OLD.CLIENT_PAYMENT_TYPE_ID,
								'IDENTIFICATION', OLD.IDENTIFICATION,
								'ADDRESS', OLD.ADDRESS,
								'PHONE', OLD.PHONE,
								'PHONE_ALT', OLD.PHONE_ALT,
								'CELLPHONE', OLD.CELLPHONE,
								'CELLPHONE_ALT', OLD.CELLPHONE_ALT,
								'CITY_ID', OLD.CITY_ID,
								'LATITUDE', OLD.LATITUDE,
								'LONGITUDE', OLD.LONGITUDE,
								'EMAIL', OLD.EMAIL,
								'EMAIL_ALT', OLD.EMAIL_ALT,
								'CONTACT_NAME', OLD.CONTACT_NAME,
								'EMAIL_CONTACT', OLD.EMAIL_CONTACT,
								'PHONE_CONTACT', OLD.PHONE_CONTACT,
								'CELLPHONE_CONTACT', OLD.CELLPHONE_CONTACT,
								'IS_BLOCKED', OLD.IS_BLOCKED)
				INTO vOld;

			-- Generates JSON object for trace
			SELECT JSON_OBJECT('CLIENT_NAME', NEW.CLIENT_NAME,
								'PAYMENT_TYPE_ID', NEW.PAYMENT_TYPE_ID,
								'CLIENT_PAYMENT_TYPE_ID', NEW.CLIENT_PAYMENT_TYPE_ID,
								'IDENTIFICATION', NEW.IDENTIFICATION,
								'ADDRESS', NEW.ADDRESS,
								'PHONE', NEW.PHONE,
								'PHONE_ALT', NEW.PHONE_ALT,
								'CELLPHONE', NEW.CELLPHONE,
								'CELLPHONE_ALT', NEW.CELLPHONE_ALT,
								'CITY_ID', NEW.CITY_ID,
								'LATITUDE', NEW.LATITUDE,
								'LONGITUDE', NEW.LONGITUDE,
								'EMAIL', NEW.EMAIL,
								'EMAIL_ALT', NEW.EMAIL_ALT,
								'CONTACT_NAME', NEW.CONTACT_NAME,
								'EMAIL_CONTACT', NEW.EMAIL_CONTACT,
								'PHONE_CONTACT', NEW.PHONE_CONTACT,
								'CELLPHONE_CONTACT', NEW.CELLPHONE_CONTACT,
								'IS_BLOCKED', NEW.IS_BLOCKED)
				INTO vNew;
		ELSE
			-- Generates STRING object for trace
			SELECT CONCAT('CLIENT_NAME:', OLD.CLIENT_NAME,
							' PAYMENT_TYPE_ID:', OLD.PAYMENT_TYPE_ID,
							' CLIENT_PAYMENT_TYPE_ID:', OLD.CLIENT_PAYMENT_TYPE_ID,
							' IDENTIFICATION:', OLD.IDENTIFICATION,
							' ADDRESS:', OLD.ADDRESS,
							' PHONE:', OLD.PHONE,
							' PHONE_ALT:', OLD.PHONE_ALT,
							' CELLPHONE:', OLD.CELLPHONE,
							' CELLPHONE_ALT:', OLD.CELLPHONE_ALT,
							' CITY_ID:', OLD.CITY_ID,
							' LATITUDE:', OLD.LATITUDE,
							' LONGITUDE:', OLD.LONGITUDE,
							' EMAIL:', OLD.EMAIL,
							' EMAIL_ALT:', OLD.EMAIL_ALT,
							' CONTACT_NAME:', OLD.CONTACT_NAME,
							' EMAIL_CONTACT:', OLD.EMAIL_CONTACT,
							' PHONE_CONTACT:', OLD.PHONE_CONTACT,
							' CELLPHONE_CONTACT:', OLD.CELLPHONE_CONTACT,

							' IS_BLOCKED:', OLD.IS_BLOCKED)
				INTO vOld;

			-- Generates STRING object for trace
			SELECT CONCAT('CLIENT_NAME:', NEW.CLIENT_NAME,
							' PAYMENT_TYPE_ID:', NEW.PAYMENT_TYPE_ID,
							' CLIENT_PAYMENT_TYPE_ID:', NEW.CLIENT_PAYMENT_TYPE_ID,
							' IDENTIFICATION:', NEW.IDENTIFICATION,
							' ADDRESS:', NEW.ADDRESS,
							' PHONE:', NEW.PHONE,
							' PHONE_ALT:', NEW.PHONE_ALT,
							' CELLPHONE:', NEW.CELLPHONE,
							' CELLPHONE_ALT:', NEW.CELLPHONE_ALT,
							' CITY_ID:', NEW.CITY_ID,
							' LATITUDE:', NEW.LATITUDE,
							' LONGITUDE:', NEW.LONGITUDE,
							' EMAIL:', NEW.EMAIL,
							' EMAIL_ALT:', NEW.EMAIL_ALT,
							' CONTACT_NAME:', NEW.CONTACT_NAME,
							' EMAIL_CONTACT:', NEW.EMAIL_CONTACT,
							' PHONE_CONTACT:', NEW.PHONE_CONTACT,
							' CELLPHONE_CONTACT:', NEW.CELLPHONE_CONTACT,
							' IS_BLOCKED:', NEW.IS_BLOCKED)
				INTO vNew;
		END IF;
			
		-- Find IP of person performing the INSERT into table
		SELECT IFNULL(L.USER_IP,'localhost') INTO vIPClient FROM TBL_SYSTEM_LOG L WHERE NEW.MODIFIED_BY = L.USER_ID AND L.TEXT_TRANSACTION = 'LOGIN' ORDER BY L.LOGDATE DESC LIMIT 1;
	   
		-- Define the transaction
		SET vTranx = CONCAT('Update CLIENT Id:',NEW.ID);

		-- Insert record into log table
		INSERT INTO TBL_SYSTEM_LOG (ID,USER_IP,USER_ID,LOGDATE,TEXT_TRANSACTION) VALUES (0,vIPClient,NEW.MODIFIED_BY,SYSDATE(),vTranx);

		-- Insert the trace 
		INSERT INTO TBL_SYSTEM_TRACE (ID,LOG_ID,TABLE_ORIGIN,RECORD_ID,OLD_RECORD,NEW_RECORD) VALUES (0,LAST_INSERT_ID(),'TBL_CLIENT',NEW.ID,LEFT(CONVERT(vOld USING utf8),4000),LEFT(CONVERT(vNew USING utf8),4000));
		
	END IF;

END; //


-- DELIVERY TYPE TABLE
DROP TRIGGER IF EXISTS TBL_DELIVERY_TYPE_UPDATE//
CREATE TRIGGER TBL_DELIVERY_TYPE_UPDATE
AFTER UPDATE
   ON TBL_DELIVERY_TYPE FOR EACH ROW

BEGIN

	DECLARE vIPClient VARCHAR(20);
	DECLARE vTranx VARCHAR(2000) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vUser VARCHAR(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vOld VARCHAR(4000);
	DECLARE vNew VARCHAR(4000);
	DECLARE vLogId INTEGER;
	DECLARE vVersion DECIMAL(4,2);
	
	-- Find username of person performing the INSERT into table
	SELECT SUBSTRING_INDEX(USER(), '@', 1) INTO vUser;
	SELECT CAST((CASE WHEN INSTR(@@GLOBAL.version,'-') > 0 THEN LEFT(@@GLOBAL.version, INSTR(@@GLOBAL.version,'-')-1) ELSE @@GLOBAL.version END) AS DECIMAL(4,1)) INTO vVersion;
   
	IF vUser <> 'root' THEN
		-- Verify the version
		IF vVersion >= 5.7 THEN
			-- Generates JSON object for trace
			SELECT JSON_OBJECT('RESOURCE_NAME', OLD.RESOURCE_NAME,
								'IS_BLOCKED', OLD.IS_BLOCKED)
				INTO vOld;

			-- Generates JSON object for trace
			SELECT JSON_OBJECT('RESOURCE_NAME', NEW.RESOURCE_NAME,
								'IS_BLOCKED', NEW.IS_BLOCKED)
				INTO vNew;
		ELSE
			-- Generates STRING object for trace
			SELECT CONCAT('RESOURCE_NAME:', OLD.RESOURCE_NAME,
							' IS_BLOCKED:', OLD.IS_BLOCKED)
				INTO vOld;

			-- Generates STRING object for trace
			SELECT CONCAT('RESOURCE_NAME:', NEW.RESOURCE_NAME,
							' IS_BLOCKED:', NEW.IS_BLOCKED)
				INTO vNew;
		END IF;
			
		-- Find IP of person performing the INSERT into table
		SELECT IFNULL(L.USER_IP,'localhost') INTO vIPClient FROM TBL_SYSTEM_LOG L WHERE NEW.MODIFIED_BY = L.USER_ID AND L.TEXT_TRANSACTION = 'LOGIN' ORDER BY L.LOGDATE DESC LIMIT 1;
	   
		-- Define the transaction
		SET vTranx = CONCAT('Update DELIVERY TYPE Id:',NEW.ID);

		-- Insert record into log table
		INSERT INTO TBL_SYSTEM_LOG (ID,USER_IP,USER_ID,LOGDATE,TEXT_TRANSACTION) VALUES (0,vIPClient,NEW.MODIFIED_BY,SYSDATE(),vTranx);

		-- Insert the trace 
		INSERT INTO TBL_SYSTEM_TRACE (ID,LOG_ID,TABLE_ORIGIN,RECORD_ID,OLD_RECORD,NEW_RECORD) VALUES (0,LAST_INSERT_ID(),'TBL_DELIVERY_TYPE',NEW.ID,LEFT(CONVERT(vOld USING utf8),4000),LEFT(CONVERT(vNew USING utf8),4000));
		
	END IF;

END; //


-- DIRECT CHAT TABLE
DROP TRIGGER IF EXISTS TBL_DIRECT_CHAT_UPDATE//
CREATE TRIGGER TBL_DIRECT_CHAT_UPDATE
AFTER UPDATE
   ON TBL_DIRECT_CHAT FOR EACH ROW

BEGIN

	DECLARE vIPClient VARCHAR(20);
	DECLARE vTranx VARCHAR(2000) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vUser VARCHAR(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vOld VARCHAR(4000);
	DECLARE vNew VARCHAR(4000);
	DECLARE vLogId INTEGER;
	DECLARE vVersion DECIMAL(4,2);
	
	-- Find username of person performing the INSERT into table
	SELECT SUBSTRING_INDEX(USER(), '@', 1) INTO vUser;
	SELECT CAST((CASE WHEN INSTR(@@GLOBAL.version,'-') > 0 THEN LEFT(@@GLOBAL.version, INSTR(@@GLOBAL.version,'-')-1) ELSE @@GLOBAL.version END) AS DECIMAL(4,1)) INTO vVersion;
   
	IF vUser <> 'root' THEN
		-- Verify the version
		IF vVersion >= 5.7 THEN
			-- Generates JSON object for trace
			SELECT JSON_OBJECT('SENDER', OLD.SENDER,
								'IP_SENDER', OLD.IP_SENDER,
								'DESTINY', OLD.DESTINY,
								'IP_READER', OLD.IP_READER,
								'MESSAGE', OLD.MESSAGE,
								'PRIORITY', OLD.PRIORITY,
								'DELIVERED', OLD.DELIVERED,
								'DELIVERED_ON', OLD.DELIVERED_ON,
								'READED', OLD.READED,
								'READED_ON', OLD.READED_ON,
								'IS_BLOCKED', OLD.IS_BLOCKED)
				INTO vOld;

			-- Generates JSON object for trace
			SELECT JSON_OBJECT('SENDER', NEW.SENDER,
								'IP_SENDER', NEW.IP_SENDER,
								'DESTINY', NEW.DESTINY,
								'IP_READER', NEW.IP_READER,
								'MESSAGE', NEW.MESSAGE,
								'PRIORITY', NEW.PRIORITY,
								'DELIVERED', NEW.DELIVERED,
								'DELIVERED_ON', NEW.DELIVERED_ON,
								'READED', NEW.READED,
								'READED_ON', NEW.READED_ON,
								'IS_BLOCKED', NEW.IS_BLOCKED)
				INTO vNew;
		ELSE
			-- Generates STRING object for trace
			SELECT CONCAT('SENDER:', OLD.SENDER,
							' IP_SENDER:', OLD.IP_SENDER,
							' DESTINY:', OLD.DESTINY,
							' IP_READER:', OLD.IP_READER,
							' MESSAGE:', OLD.MESSAGE,
							' PRIORITY:', OLD.PRIORITY,
							' DELIVERED:', OLD.DELIVERED,
							' DELIVERED_ON:', OLD.DELIVERED_ON,
							' READED:', OLD.READED,
							' READED_ON:', OLD.READED_ON,
							' IS_BLOCKED:', OLD.IS_BLOCKED)
				INTO vOld;

			-- Generates STRING object for trace
			SELECT CONCAT('SENDER:', NEW.SENDER,
							' IP_SENDER:', NEW.IP_SENDER,
							' DESTINY:', NEW.DESTINY,
							' IP_READER:', NEW.IP_READER,
							' MESSAGE:', NEW.MESSAGE,
							' PRIORITY:', NEW.PRIORITY,
							' DELIVERED:', NEW.DELIVERED,
							' DELIVERED_ON:', NEW.DELIVERED_ON,
							' READED:', NEW.READED,
							' READED_ON:', NEW.READED_ON,
							' IS_BLOCKED:', NEW.IS_BLOCKED)
				INTO vNew;
		END IF;
			
		-- Find IP of person performing the INSERT into table
		SELECT IFNULL(L.USER_IP,'localhost') INTO vIPClient FROM TBL_SYSTEM_LOG L WHERE NEW.MODIFIED_BY = L.USER_ID AND L.TEXT_TRANSACTION = 'LOGIN' ORDER BY L.LOGDATE DESC LIMIT 1;
	   
		-- Define the transaction
		SET vTranx = CONCAT('Update DIRECT CHAT Id:',NEW.ID);

		-- Insert record into log table
		INSERT INTO TBL_SYSTEM_LOG (ID,USER_IP,USER_ID,LOGDATE,TEXT_TRANSACTION) VALUES (0,vIPClient,NEW.MODIFIED_BY,SYSDATE(),vTranx);

		-- Insert the trace 
		INSERT INTO TBL_SYSTEM_TRACE (ID,LOG_ID,TABLE_ORIGIN,RECORD_ID,OLD_RECORD,NEW_RECORD) VALUES (0,LAST_INSERT_ID(),'TBL_DIRECT_CHAT',NEW.ID,LEFT(CONVERT(vOld USING utf8),4000),LEFT(CONVERT(vNew USING utf8),4000));
		
	END IF;

END; //


-- EMPLOYEE TABLE
DROP TRIGGER IF EXISTS TBL_EMPLOYEE_UPDATE//
CREATE TRIGGER TBL_EMPLOYEE_UPDATE
AFTER UPDATE
   ON TBL_EMPLOYEE FOR EACH ROW

BEGIN

	DECLARE vIPClient VARCHAR(20);
	DECLARE vTranx VARCHAR(2000) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vUser VARCHAR(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vOld VARCHAR(4000);
	DECLARE vNew VARCHAR(4000);
	DECLARE vLogId INTEGER;
	DECLARE vVersion DECIMAL(4,2);
	
	-- Find username of person performing the INSERT into table
	SELECT SUBSTRING_INDEX(USER(), '@', 1) INTO vUser;
	SELECT CAST((CASE WHEN INSTR(@@GLOBAL.version,'-') > 0 THEN LEFT(@@GLOBAL.version, INSTR(@@GLOBAL.version,'-')-1) ELSE @@GLOBAL.version END) AS DECIMAL(4,1)) INTO vVersion;
   
	IF vUser <> 'root' THEN
		-- Verify the version
		IF vVersion >= 5.7 THEN
			-- Generates JSON object for trace
			SELECT JSON_OBJECT('PARTNER_ID', OLD.PARTNER_ID,
								'AREA_ID', OLD.AREA_ID,
								'USER_ID', OLD.USER_ID,
								'ACCESS_ID', OLD.ACCESS_ID,
								'FIRST_NAME', OLD.FIRST_NAME,
								'MIDDLE_NAME', OLD.MIDDLE_NAME,
								'LAST_NAME', OLD.LAST_NAME,
								'IDENTIFICATION', OLD.IDENTIFICATION,
								'ADDRESS', OLD.ADDRESS,
								'PHONE', OLD.PHONE,
								'CELLPHONE', OLD.CELLPHONE,
								'CITY_ID', OLD.CITY_ID,
								'LATITUDE', OLD.LATITUDE,
								'LONGITUDE', OLD.LONGITUDE,
								'EMAIL', OLD.EMAIL,
								'LAST_CONNECTION', OLD.LAST_CONNECTION,
								'IS_BLOCKED', OLD.IS_BLOCKED)
				INTO vOld;

			-- Generates JSON object for trace
			SELECT JSON_OBJECT('PARTNER_ID', NEW.PARTNER_ID,
								'AREA_ID', NEW.AREA_ID,
								'USER_ID', NEW.USER_ID,
								'ACCESS_ID', NEW.ACCESS_ID,
								'FIRST_NAME', NEW.FIRST_NAME,
								'MIDDLE_NAME', NEW.MIDDLE_NAME,
								'LAST_NAME', NEW.LAST_NAME,
								'IDENTIFICATION', NEW.IDENTIFICATION,
								'ADDRESS', NEW.ADDRESS,
								'PHONE', NEW.PHONE,
								'CELLPHONE', NEW.CELLPHONE,
								'CITY_ID', NEW.CITY_ID,
								'LATITUDE', NEW.LATITUDE,
								'LONGITUDE', NEW.LONGITUDE,
								'EMAIL', NEW.EMAIL,
								'LAST_CONNECTION', NEW.LAST_CONNECTION,
								'IS_BLOCKED', NEW.IS_BLOCKED)
				INTO vNew;
		ELSE
			-- Generates STRING object for trace
			SELECT CONCAT('PARTNER_ID:', OLD.PARTNER_ID,
							' AREA_ID:', OLD.AREA_ID,
							' USER_ID:', OLD.USER_ID,
							' ACCESS_ID:', OLD.ACCESS_ID,
							' FIRST_NAME:', OLD.FIRST_NAME,
							' MIDDLE_NAME:', OLD.MIDDLE_NAME,
							' LAST_NAME:', OLD.LAST_NAME,
							' IDENTIFICATION:', OLD.IDENTIFICATION,
							' ADDRESS:', OLD.ADDRESS,
							' PHONE:', OLD.PHONE,
							' CELLPHONE:', OLD.CELLPHONE,
							' CITY_ID:', OLD.CITY_ID,
							' LATITUDE:', OLD.LATITUDE,
							' LONGITUDE:', OLD.LONGITUDE,
							' EMAIL:', OLD.EMAIL,
							' LAST_CONNECTION:', OLD.LAST_CONNECTION,
							' IS_BLOCKED:', OLD.IS_BLOCKED)
				INTO vOld;

			-- Generates STRING object for trace
			SELECT CONCAT('PARTNER_ID:', NEW.PARTNER_ID,
							' AREA_ID:', NEW.AREA_ID,
							' USER_ID:', NEW.USER_ID,
							' ACCESS_ID:', NEW.ACCESS_ID,
							' FIRST_NAME:', NEW.FIRST_NAME,
							' MIDDLE_NAME:', NEW.MIDDLE_NAME,
							' LAST_NAME:', NEW.LAST_NAME,
							' IDENTIFICATION:', NEW.IDENTIFICATION,
							' ADDRESS:', NEW.ADDRESS,
							' PHONE:', NEW.PHONE,
							' CELLPHONE:', NEW.CELLPHONE,
							' CITY_ID:', NEW.CITY_ID,
							' LATITUDE:', NEW.LATITUDE,
							' LONGITUDE:', NEW.LONGITUDE,
							' EMAIL:', NEW.EMAIL,
							' LAST_CONNECTION:', NEW.LAST_CONNECTION,
							' IS_BLOCKED:', NEW.IS_BLOCKED)
				INTO vNew;
		END IF;
			
		-- Find IP of person performing the INSERT into table
		SELECT IFNULL(L.USER_IP,'localhost') INTO vIPClient FROM TBL_SYSTEM_LOG L WHERE NEW.MODIFIED_BY = L.USER_ID AND L.TEXT_TRANSACTION = 'LOGIN' ORDER BY L.LOGDATE DESC LIMIT 1;
	   
		-- Define the transaction
		SET vTranx = CONCAT('Update EMPLOYEE Id:',NEW.ID);

		-- Insert record into log table
		INSERT INTO TBL_SYSTEM_LOG (ID,USER_IP,USER_ID,LOGDATE,TEXT_TRANSACTION) VALUES (0,vIPClient,NEW.MODIFIED_BY,SYSDATE(),vTranx);

		-- Insert the trace 
		INSERT INTO TBL_SYSTEM_TRACE (ID,LOG_ID,TABLE_ORIGIN,RECORD_ID,OLD_RECORD,NEW_RECORD) VALUES (0,LAST_INSERT_ID(),'TBL_EMPLOYEE',NEW.ID,LEFT(CONVERT(vOld USING utf8),4000),LEFT(CONVERT(vNew USING utf8),4000));
		
	END IF;

END; //


-- EXTERNAL SESSION TABLE
DROP TRIGGER IF EXISTS TBL_EXTERNAL_SESSION_UPDATE//
CREATE TRIGGER TBL_EXTERNAL_SESSION_UPDATE
AFTER UPDATE
   ON TBL_EXTERNAL_SESSION FOR EACH ROW

BEGIN

	DECLARE vIPClient VARCHAR(20);
	DECLARE vTranx VARCHAR(2000) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vUser VARCHAR(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vOld VARCHAR(4000);
	DECLARE vNew VARCHAR(4000);
	DECLARE vLogId INTEGER;
	DECLARE vVersion DECIMAL(4,2);
	
	-- Find username of person performing the INSERT into table
	SELECT SUBSTRING_INDEX(USER(), '@', 1) INTO vUser;
	SELECT CAST((CASE WHEN INSTR(@@GLOBAL.version,'-') > 0 THEN LEFT(@@GLOBAL.version, INSTR(@@GLOBAL.version,'-')-1) ELSE @@GLOBAL.version END) AS DECIMAL(4,1)) INTO vVersion;
   
	IF vUser <> 'root' THEN
		-- Verify the version
		IF vVersion >= 5.7 THEN
			-- Generates JSON object for trace
			SELECT JSON_OBJECT('USER_ID', OLD.USER_ID,
								'ACCESS_ID', OLD.ACCESS_ID,
								'CLIENT_ID', OLD.CLIENT_ID,
								'PARTNER_ID', OLD.PARTNER_ID,
								'REQUESTED_BY', OLD.REQUESTED_BY,
								'IS_BLOCKED', OLD.IS_BLOCKED)
				INTO vOld;

			-- Generates JSON object for trace
			SELECT JSON_OBJECT('USER_ID', NEW.USER_ID,
								'ACCESS_ID', NEW.ACCESS_ID,
								'CLIENT_ID', NEW.CLIENT_ID,
								'PARTNER_ID', NEW.PARTNER_ID,
								'REQUESTED_BY', NEW.REQUESTED_BY,
								'IS_BLOCKED', NEW.IS_BLOCKED)
				INTO vNew;
		ELSE
			-- Generates STRING object for trace
			SELECT CONCAT('USER_ID:', OLD.USER_ID,
							' ACCESS_ID:', OLD.ACCESS_ID,
							' CLIENT_ID:', OLD.CLIENT_ID,
							' PARTNER_ID:', OLD.PARTNER_ID,
							' REQUESTED_BY:', OLD.REQUESTED_BY,
							' IS_BLOCKED:', OLD.IS_BLOCKED)
				INTO vOld;

			-- Generates STRING object for trace
			SELECT CONCAT('USER_ID:', NEW.USER_ID,
							' ACCESS_ID:', NEW.ACCESS_ID,
							' CLIENT_ID:', NEW.CLIENT_ID,
							' PARTNER_ID:', NEW.PARTNER_ID,
							' REQUESTED_BY:', NEW.REQUESTED_BY,
							' IS_BLOCKED:', NEW.IS_BLOCKED)
				INTO vNew;
		END IF;
			
		-- Find IP of person performing the INSERT into table
		SELECT IFNULL(L.USER_IP,'localhost') INTO vIPClient FROM TBL_SYSTEM_LOG L WHERE NEW.MODIFIED_BY = L.USER_ID AND L.TEXT_TRANSACTION = 'LOGIN' ORDER BY L.LOGDATE DESC LIMIT 1;
	   
		-- Define the transaction
		SET vTranx = CONCAT('Update EXTERNAL_SESSION Id:',NEW.ID);

		-- Insert record into log table
		INSERT INTO TBL_SYSTEM_LOG (ID,USER_IP,USER_ID,LOGDATE,TEXT_TRANSACTION) VALUES (0,vIPClient,NEW.MODIFIED_BY,SYSDATE(),vTranx);

		-- Insert the trace 
		INSERT INTO TBL_SYSTEM_TRACE (ID,LOG_ID,TABLE_ORIGIN,RECORD_ID,OLD_RECORD,NEW_RECORD) VALUES (0,LAST_INSERT_ID(),'TBL_EXTERNAL_SESSION',NEW.ID,LEFT(CONVERT(vOld USING utf8),4000),LEFT(CONVERT(vNew USING utf8),4000));
		
	END IF;

END; //


-- PARTNER TABLE
DROP TRIGGER IF EXISTS TBL_PARTNER_UPDATE//
CREATE TRIGGER TBL_PARTNER_UPDATE
AFTER UPDATE
   ON TBL_PARTNER FOR EACH ROW

BEGIN

	DECLARE vIPClient VARCHAR(20);
	DECLARE vTranx VARCHAR(2000) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vUser VARCHAR(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vOld VARCHAR(4000);
	DECLARE vNew VARCHAR(4000);
	DECLARE vLogId INTEGER;
	DECLARE vVersion DECIMAL(4,2);
	
	-- Find username of person performing the INSERT into table
	SELECT SUBSTRING_INDEX(USER(), '@', 1) INTO vUser;
	SELECT CAST((CASE WHEN INSTR(@@GLOBAL.version,'-') > 0 THEN LEFT(@@GLOBAL.version, INSTR(@@GLOBAL.version,'-')-1) ELSE @@GLOBAL.version END) AS DECIMAL(4,1)) INTO vVersion;
   
	IF vUser <> 'root' THEN
		-- Verify the version
		IF vVersion >= 5.7 THEN
			-- Generates JSON object for trace
			SELECT JSON_OBJECT('PARTNER_NAME', OLD.PARTNER_NAME,
								'IDENTIFICATION', OLD.IDENTIFICATION,
								'ADDRESS', OLD.ADDRESS,
								'PHONE', OLD.PHONE,
								'PHONE_ALT', OLD.PHONE_ALT,
								'CELLPHONE', OLD.CELLPHONE,
								'CELLPHONE_ALT', OLD.CELLPHONE_ALT,
								'CITY_ID', OLD.CITY_ID,
								'LATITUDE', OLD.LATITUDE,
								'LONGITUDE', OLD.LONGITUDE,
								'EMAIL', OLD.EMAIL,
								'EMAIL_ALT', OLD.EMAIL_ALT,
								'CONTACT_NAME', OLD.CONTACT_NAME,
								'EMAIL_CONTACT', OLD.EMAIL_CONTACT,
								'PHONE_CONTACT', OLD.PHONE_CONTACT,
								'CELLPHONE_CONTACT', OLD.CELLPHONE_CONTACT,
								'IS_BLOCKED', OLD.IS_BLOCKED)
				INTO vOld;

			-- Generates JSON object for trace
			SELECT JSON_OBJECT('PARTNER_NAME', NEW.PARTNER_NAME,
								'IDENTIFICATION', NEW.IDENTIFICATION,
								'ADDRESS', NEW.ADDRESS,
								'PHONE', NEW.PHONE,
								'PHONE_ALT', NEW.PHONE_ALT,
								'CELLPHONE', NEW.CELLPHONE,
								'CELLPHONE_ALT', NEW.CELLPHONE_ALT,
								'CITY_ID', NEW.CITY_ID,
								'LATITUDE', NEW.LATITUDE,
								'LONGITUDE', NEW.LONGITUDE,
								'EMAIL', NEW.EMAIL,
								'EMAIL_ALT', NEW.EMAIL_ALT,
								'CONTACT_NAME', NEW.CONTACT_NAME,
								'EMAIL_CONTACT', NEW.EMAIL_CONTACT,
								'PHONE_CONTACT', NEW.PHONE_CONTACT,
								'CELLPHONE_CONTACT', NEW.CELLPHONE_CONTACT,
								'IS_BLOCKED', NEW.IS_BLOCKED)
				INTO vNew;
		ELSE
			-- Generates STRING object for trace
			SELECT CONCAT('PARTNER_NAME:', OLD.PARTNER_NAME,
							' IDENTIFICATION:', OLD.IDENTIFICATION,
							' ADDRESS:', OLD.ADDRESS,
							' PHONE:', OLD.PHONE,
							' PHONE_ALT:', OLD.PHONE_ALT,
							' CELLPHONE:', OLD.CELLPHONE,
							' CELLPHONE_ALT:', OLD.CELLPHONE_ALT,
							' CITY_ID:', OLD.CITY_ID,
							' LATITUDE:', OLD.LATITUDE,
							' LONGITUDE:', OLD.LONGITUDE,
							' EMAIL:', OLD.EMAIL,
							' EMAIL_ALT:', OLD.EMAIL_ALT,
							' CONTACT_NAME:', OLD.CONTACT_NAME,
							' EMAIL_CONTACT:', OLD.EMAIL_CONTACT,
							' PHONE_CONTACT:', OLD.PHONE_CONTACT,
							' CELLPHONE_CONTACT:', OLD.CELLPHONE_CONTACT,
							' IS_BLOCKED:', OLD.IS_BLOCKED)
				INTO vOld;

			-- Generates STRING object for trace
			SELECT CONCAT('PARTNER_NAME:', NEW.PARTNER_NAME,
							' IDENTIFICATION:', NEW.IDENTIFICATION,
							' ADDRESS:', NEW.ADDRESS,
							' PHONE:', NEW.PHONE,
							' PHONE_ALT:', NEW.PHONE_ALT,
							' CELLPHONE:', NEW.CELLPHONE,
							' CELLPHONE_ALT:', NEW.CELLPHONE_ALT,
							' CITY_ID:', NEW.CITY_ID,
							' LATITUDE:', NEW.LATITUDE,
							' LONGITUDE:', NEW.LONGITUDE,
							' EMAIL:', NEW.EMAIL,
							' EMAIL_ALT:', NEW.EMAIL_ALT,
							' CONTACT_NAME:', NEW.CONTACT_NAME,
							' EMAIL_CONTACT:', NEW.EMAIL_CONTACT,
							' PHONE_CONTACT:', NEW.PHONE_CONTACT,
							' CELLPHONE_CONTACT:', NEW.CELLPHONE_CONTACT,
							' IS_BLOCKED:', NEW.IS_BLOCKED)
				INTO vNew;
		END IF;
			
		-- Find IP of person performing the INSERT into table
		SELECT IFNULL(L.USER_IP,'localhost') INTO vIPClient FROM TBL_SYSTEM_LOG L WHERE NEW.MODIFIED_BY = L.USER_ID AND L.TEXT_TRANSACTION = 'LOGIN' ORDER BY L.LOGDATE DESC LIMIT 1;
	   
		-- Define the transaction
		SET vTranx = CONCAT('Update PARTNER Id:',NEW.ID);

		-- Insert record into log table
		INSERT INTO TBL_SYSTEM_LOG (ID,USER_IP,USER_ID,LOGDATE,TEXT_TRANSACTION) VALUES (0,vIPClient,NEW.MODIFIED_BY,SYSDATE(),vTranx);

		-- Insert the trace 
		INSERT INTO TBL_SYSTEM_TRACE (ID,LOG_ID,TABLE_ORIGIN,RECORD_ID,OLD_RECORD,NEW_RECORD) VALUES (0,LAST_INSERT_ID(),'TBL_PARTNER',NEW.ID,LEFT(CONVERT(vOld USING utf8),4000),LEFT(CONVERT(vNew USING utf8),4000));
		
	END IF;

END; //


-- PARTNER CLIENT TABLE
DROP TRIGGER IF EXISTS TBL_PARTNER_CLIENT_UPDATE//
CREATE TRIGGER TBL_PARTNER_CLIENT_UPDATE
AFTER UPDATE
   ON TBL_PARTNER_CLIENT FOR EACH ROW

BEGIN

	DECLARE vIPClient VARCHAR(20);
	DECLARE vTranx VARCHAR(2000) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vUser VARCHAR(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vOld VARCHAR(4000);
	DECLARE vNew VARCHAR(4000);
	DECLARE vLogId INTEGER;
	DECLARE vVersion DECIMAL(4,2);
	
	-- Find username of person performing the INSERT into table
	SELECT SUBSTRING_INDEX(USER(), '@', 1) INTO vUser;
	SELECT CAST((CASE WHEN INSTR(@@GLOBAL.version,'-') > 0 THEN LEFT(@@GLOBAL.version, INSTR(@@GLOBAL.version,'-')-1) ELSE @@GLOBAL.version END) AS DECIMAL(4,1)) INTO vVersion;
   
	IF vUser <> 'root' THEN
		-- Verify the version
		IF vVersion >= 5.7 THEN
			-- Generates JSON object for trace
			SELECT JSON_OBJECT('PARTNER_ID', OLD.PARTNER_ID,
								'CLIENT_ID', OLD.CLIENT_ID,
								'EMPLOYEE_ID', OLD.EMPLOYEE_ID,
								'IS_BLOCKED', OLD.IS_BLOCKED)
				INTO vOld;

			-- Generates JSON object for trace
			SELECT JSON_OBJECT('PARTNER_ID', NEW.PARTNER_ID,
								'CLIENT_ID', NEW.CLIENT_ID,
								'EMPLOYEE_ID', NEW.EMPLOYEE_ID,
								'IS_BLOCKED', NEW.IS_BLOCKED)
				INTO vNew;
		ELSE
			-- Generates STRING object for trace
			SELECT CONCAT('PARTNER_ID:', OLD.PARTNER_ID,
							' CLIENT_ID:', OLD.CLIENT_ID,
							' EMPLOYEE_ID:', OLD.EMPLOYEE_ID,
							' IS_BLOCKED:', OLD.IS_BLOCKED)
				INTO vOld;

			-- Generates STRING object for trace
			SELECT CONCAT('PARTNER_ID:', NEW.PARTNER_ID,
							' CLIENT_ID:', NEW.CLIENT_ID,
							' EMPLOYEE_ID:', NEW.EMPLOYEE_ID,
							' IS_BLOCKED:', NEW.IS_BLOCKED)
				INTO vNew;
		END IF;
			
		-- Find IP of person performing the INSERT into table
		SELECT IFNULL(L.USER_IP,'localhost') INTO vIPClient FROM TBL_SYSTEM_LOG L WHERE NEW.MODIFIED_BY = L.USER_ID AND L.TEXT_TRANSACTION = 'LOGIN' ORDER BY L.LOGDATE DESC LIMIT 1;
	   
		-- Define the transaction
		SET vTranx = CONCAT('Update PARTNER CLIENT Id:',NEW.ID);

		-- Insert record into log table
		INSERT INTO TBL_SYSTEM_LOG (ID,USER_IP,USER_ID,LOGDATE,TEXT_TRANSACTION) VALUES (0,vIPClient,NEW.MODIFIED_BY,SYSDATE(),vTranx);

		-- Insert the trace 
		INSERT INTO TBL_SYSTEM_TRACE (ID,LOG_ID,TABLE_ORIGIN,RECORD_ID,OLD_RECORD,NEW_RECORD) VALUES (0,LAST_INSERT_ID(),'TBL_PARTNER_CLIENT',NEW.ID,LEFT(CONVERT(vOld USING utf8),4000),LEFT(CONVERT(vNew USING utf8),4000));
		
	END IF;

END; //


-- PAYMENT TABLE
DROP TRIGGER IF EXISTS TBL_PAYMENT_UPDATE//
CREATE TRIGGER TBL_PAYMENT_UPDATE
AFTER UPDATE
   ON TBL_PAYMENT FOR EACH ROW

BEGIN

	DECLARE vIPClient VARCHAR(20);
	DECLARE vTranx VARCHAR(2000) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vUser VARCHAR(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vOld VARCHAR(4000);
	DECLARE vNew VARCHAR(4000);
	DECLARE vLogId INTEGER;
	DECLARE vVersion DECIMAL(4,2);
	
	-- Find username of person performing the INSERT into table
	SELECT SUBSTRING_INDEX(USER(), '@', 1) INTO vUser;
	SELECT CAST((CASE WHEN INSTR(@@GLOBAL.version,'-') > 0 THEN LEFT(@@GLOBAL.version, INSTR(@@GLOBAL.version,'-')-1) ELSE @@GLOBAL.version END) AS DECIMAL(4,1)) INTO vVersion;
   
	IF vUser <> 'root' THEN
		-- Verify the version
		IF vVersion >= 5.7 THEN
			-- Generates JSON object for trace
			SELECT JSON_OBJECT('REFERENCE_ID', OLD.REFERENCE_ID,
								'CLIENT_ID', OLD.CLIENT_ID,
								'PAYMENT_TYPE_ID', OLD.PAYMENT_TYPE_ID,
								'PAYMENT_STATE_ID', OLD.PAYMENT_STATE_ID,
								'TRANSACTION_ID', OLD.TRANSACTION_ID,
								'GATEWAY', OLD.GATEWAY,
								'URL_GATEWAY', OLD.URL_GATEWAY,
								'IP_CLIENT', OLD.IP_CLIENT,
								'RISK', OLD.RISK,
								'RESPONSE', OLD.RESPONSE,
								'RESPONSE_TRACE', OLD.RESPONSE_TRACE,
								'PAYMENT_METHOD', OLD.PAYMENT_METHOD,
								'PAYMENT_METHOD_TYPE', OLD.PAYMENT_METHOD_TYPE,
								'PAYMENT_REQUESTED', OLD.PAYMENT_REQUESTED,
								'PAYMENT_VALUE', OLD.PAYMENT_VALUE,
								'PAYMENT_TAX_PERCENT', OLD.PAYMENT_TAX_PERCENT,
								'PAYMENT_TAX', OLD.PAYMENT_TAX,
								'PAYMENT_VALUE_ADD', OLD.PAYMENT_VALUE_ADD,
								'AUTHORIZATION_CODE', OLD.AUTHORIZATION_CODE,
								'AUTHORIZATION_ADDITIONAL_CODE', OLD.AUTHORIZATION_ADDITIONAL_CODE,
								'PAYMENT_ENTITY', OLD.PAYMENT_ENTITY,
								'PAYER_EMAIL', OLD.PAYER_EMAIL,
								'PAYER_NAME', OLD.PAYER_NAME,
								'PAYER_IDENTIFICATION', OLD.PAYER_IDENTIFICATION,
								'PAYER_PHONE', OLD.PAYER_PHONE,
								'OBSERVATION', OLD.OBSERVATION,
								'IS_BLOCKED', OLD.IS_BLOCKED)
				INTO vOld;

			-- Generates JSON object for trace
			SELECT JSON_OBJECT('REFERENCE_ID', NEW.REFERENCE_ID,
								'CLIENT_ID', NEW.CLIENT_ID,
								'PAYMENT_TYPE_ID', NEW.PAYMENT_TYPE_ID,
								'PAYMENT_STATE_ID', NEW.PAYMENT_STATE_ID,
								'TRANSACTION_ID', NEW.TRANSACTION_ID,
								'GATEWAY', NEW.GATEWAY,
								'URL_GATEWAY', NEW.URL_GATEWAY,
								'IP_CLIENT', NEW.IP_CLIENT,
								'RISK', NEW.RISK,
								'RESPONSE', NEW.RESPONSE,
								'RESPONSE_TRACE', NEW.RESPONSE_TRACE,
								'PAYMENT_METHOD', NEW.PAYMENT_METHOD,
								'PAYMENT_METHOD_TYPE', NEW.PAYMENT_METHOD_TYPE,
								'PAYMENT_REQUESTED', NEW.PAYMENT_REQUESTED,
								'PAYMENT_VALUE', NEW.PAYMENT_VALUE,
								'PAYMENT_TAX_PERCENT', NEW.PAYMENT_TAX_PERCENT,
								'PAYMENT_TAX', NEW.PAYMENT_TAX,
								'PAYMENT_VALUE_ADD', NEW.PAYMENT_VALUE_ADD,
								'AUTHORIZATION_CODE', NEW.AUTHORIZATION_CODE,
								'AUTHORIZATION_ADDITIONAL_CODE', NEW.AUTHORIZATION_ADDITIONAL_CODE,
								'PAYMENT_ENTITY', NEW.PAYMENT_ENTITY,
								'PAYER_EMAIL', NEW.PAYER_EMAIL,
								'PAYER_NAME', NEW.PAYER_NAME,
								'PAYER_IDENTIFICATION', NEW.PAYER_IDENTIFICATION,
								'PAYER_PHONE', NEW.PAYER_PHONE,
								'OBSERVATION', NEW.OBSERVATION,
								'IS_BLOCKED', NEW.IS_BLOCKED)
				INTO vNew;
		ELSE
			-- Generates STRING object for trace
			SELECT CONCAT('REFERENCE_ID:', OLD.REFERENCE_ID,
							' CLIENT_ID:', OLD.CLIENT_ID,
							' PAYMENT_TYPE_ID:', OLD.PAYMENT_TYPE_ID,
							' PAYMENT_STATE_ID:', OLD.PAYMENT_STATE_ID,
							' TRANSACTION_ID:', OLD.TRANSACTION_ID,
							' GATEWAY:', OLD.GATEWAY,
							' URL_GATEWAY:', OLD.URL_GATEWAY,
							' IP_CLIENT:', OLD.IP_CLIENT,
							' RISK:', OLD.RISK,
							' RESPONSE:', OLD.RESPONSE,
							' RESPONSE_TRACE:', OLD.RESPONSE_TRACE,
							' PAYMENT_METHOD:', OLD.PAYMENT_METHOD,
							' PAYMENT_METHOD_TYPE:', OLD.PAYMENT_METHOD_TYPE,
							' PAYMENT_REQUESTED:', OLD.PAYMENT_REQUESTED,
							' PAYMENT_VALUE:', OLD.PAYMENT_VALUE,
							' PAYMENT_TAX_PERCENT:', OLD.PAYMENT_TAX_PERCENT,
							' PAYMENT_TAX:', OLD.PAYMENT_TAX,
							' PAYMENT_VALUE_ADD:', OLD.PAYMENT_VALUE_ADD,
							' AUTHORIZATION_CODE:', OLD.AUTHORIZATION_CODE,
							' AUTHORIZATION_ADDITIONAL_CODE:', OLD.AUTHORIZATION_ADDITIONAL_CODE,
							' PAYMENT_ENTITY:', OLD.PAYMENT_ENTITY,
							' PAYER_EMAIL:', OLD.PAYER_EMAIL,
							' PAYER_NAME:', OLD.PAYER_NAME,
							' PAYER_IDENTIFICATION:', OLD.PAYER_IDENTIFICATION,
							' PAYER_PHONE:', OLD.PAYER_PHONE,
							' OBSERVATION:', OLD.OBSERVATION,
							' IS_BLOCKED:', OLD.IS_BLOCKED)
				INTO vOld;

			-- Generates STRING object for trace
			SELECT CONCAT('REFERENCE_ID:', NEW.REFERENCE_ID,
							' CLIENT_ID:', NEW.CLIENT_ID,
							' PAYMENT_TYPE_ID:', NEW.PAYMENT_TYPE_ID,
							' PAYMENT_STATE_ID:', NEW.PAYMENT_STATE_ID,
							' TRANSACTION_ID:', NEW.TRANSACTION_ID,
							' GATEWAY:', NEW.GATEWAY,
							' URL_GATEWAY:', NEW.URL_GATEWAY,
							' IP_CLIENT:', NEW.IP_CLIENT,
							' RISK:', NEW.RISK,
							' RESPONSE:', NEW.RESPONSE,
							' RESPONSE_TRACE:', NEW.RESPONSE_TRACE,
							' PAYMENT_METHOD:', NEW.PAYMENT_METHOD,
							' PAYMENT_METHOD_TYPE:', NEW.PAYMENT_METHOD_TYPE,
							' PAYMENT_REQUESTED:', NEW.PAYMENT_REQUESTED,
							' PAYMENT_VALUE:', NEW.PAYMENT_VALUE,
							' PAYMENT_TAX_PERCENT:', NEW.PAYMENT_TAX_PERCENT,
							' PAYMENT_TAX:', NEW.PAYMENT_TAX,
							' PAYMENT_VALUE_ADD:', NEW.PAYMENT_VALUE_ADD,
							' AUTHORIZATION_CODE:', NEW.AUTHORIZATION_CODE,
							' AUTHORIZATION_ADDITIONAL_CODE:', NEW.AUTHORIZATION_ADDITIONAL_CODE,
							' PAYMENT_ENTITY:', NEW.PAYMENT_ENTITY,
							' PAYER_EMAIL:', NEW.PAYER_EMAIL,
							' PAYER_NAME:', NEW.PAYER_NAME,
							' PAYER_IDENTIFICATION:', NEW.PAYER_IDENTIFICATION,
							' PAYER_PHONE:', NEW.PAYER_PHONE,
							' OBSERVATION:', NEW.OBSERVATION,
							' IS_BLOCKED:', NEW.IS_BLOCKED)
				INTO vNew;
		END IF;
			
		-- Find IP of person performing the INSERT into table
		SELECT IFNULL(L.USER_IP,'localhost') INTO vIPClient FROM TBL_SYSTEM_LOG L WHERE NEW.MODIFIED_BY = L.USER_ID AND L.TEXT_TRANSACTION = 'LOGIN' ORDER BY L.LOGDATE DESC LIMIT 1;
	   
		-- Define the transaction
		SET vTranx = CONCAT('Update PAYMENT Id:',NEW.ID);

		-- Insert record into log table
		INSERT INTO TBL_SYSTEM_LOG (ID,USER_IP,USER_ID,LOGDATE,TEXT_TRANSACTION) VALUES (0,vIPClient,NEW.MODIFIED_BY,SYSDATE(),vTranx);

		-- Insert the trace 
		INSERT INTO TBL_SYSTEM_TRACE (ID,LOG_ID,TABLE_ORIGIN,RECORD_ID,OLD_RECORD,NEW_RECORD) VALUES (0,LAST_INSERT_ID(),'TBL_PAYMENT',NEW.ID,LEFT(CONVERT(vOld USING utf8),4000),LEFT(CONVERT(vNew USING utf8),4000));
		
	END IF;

END; //


-- PAYMENT STATE TABLE
DROP TRIGGER IF EXISTS TBL_PAYMENT_STATE_UPDATE//
CREATE TRIGGER TBL_PAYMENT_STATE_UPDATE
AFTER UPDATE
   ON TBL_PAYMENT_STATE FOR EACH ROW

BEGIN

	DECLARE vIPClient VARCHAR(20);
	DECLARE vTranx VARCHAR(2000) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vUser VARCHAR(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vOld VARCHAR(4000);
	DECLARE vNew VARCHAR(4000);
	DECLARE vLogId INTEGER;
	DECLARE vVersion DECIMAL(4,2);
	
	-- Find username of person performing the INSERT into table
	SELECT SUBSTRING_INDEX(USER(), '@', 1) INTO vUser;
	SELECT CAST((CASE WHEN INSTR(@@GLOBAL.version,'-') > 0 THEN LEFT(@@GLOBAL.version, INSTR(@@GLOBAL.version,'-')-1) ELSE @@GLOBAL.version END) AS DECIMAL(4,1)) INTO vVersion;
   
	IF vUser <> 'root' THEN
		-- Verify the version
		IF vVersion >= 5.7 THEN
			-- Generates JSON object for trace
			SELECT JSON_OBJECT('RESOURCE_NAME', OLD.RESOURCE_NAME,
								'IS_BLOCKED', OLD.IS_BLOCKED)
				INTO vOld;

			-- Generates JSON object for trace
			SELECT JSON_OBJECT('RESOURCE_NAME', NEW.RESOURCE_NAME,
								'IS_BLOCKED', NEW.IS_BLOCKED)
				INTO vNew;
		ELSE
			-- Generates STRING object for trace
			SELECT CONCAT('RESOURCE_NAME:', OLD.RESOURCE_NAME,
							' IS_BLOCKED:', OLD.IS_BLOCKED)
				INTO vOld;

			-- Generates STRING object for trace
			SELECT CONCAT('RESOURCE_NAME:', NEW.RESOURCE_NAME,
							' IS_BLOCKED:', NEW.IS_BLOCKED)
				INTO vNew;
		END IF;
			
		-- Find IP of person performing the INSERT into table
		SELECT IFNULL(L.USER_IP,'localhost') INTO vIPClient FROM TBL_SYSTEM_LOG L WHERE NEW.MODIFIED_BY = L.USER_ID AND L.TEXT_TRANSACTION = 'LOGIN' ORDER BY L.LOGDATE DESC LIMIT 1;
	   
		-- Define the transaction
		SET vTranx = CONCAT('Update PAYMENT STATE Id:',NEW.ID);

		-- Insert record into log table
		INSERT INTO TBL_SYSTEM_LOG (ID,USER_IP,USER_ID,LOGDATE,TEXT_TRANSACTION) VALUES (0,vIPClient,NEW.MODIFIED_BY,SYSDATE(),vTranx);

		-- Insert the trace 
		INSERT INTO TBL_SYSTEM_TRACE (ID,LOG_ID,TABLE_ORIGIN,RECORD_ID,OLD_RECORD,NEW_RECORD) VALUES (0,LAST_INSERT_ID(),'TBL_PAYMENT_STATE',NEW.ID,LEFT(CONVERT(vOld USING utf8),4000),LEFT(CONVERT(vNew USING utf8),4000));
		
	END IF;

END; //


-- PAYMENT TYPE TABLE
DROP TRIGGER IF EXISTS TBL_PAYMENT_TYPE_UPDATE//
CREATE TRIGGER TBL_PAYMENT_TYPE_UPDATE
AFTER UPDATE
   ON TBL_PAYMENT_TYPE FOR EACH ROW

BEGIN

	DECLARE vIPClient VARCHAR(20);
	DECLARE vTranx VARCHAR(2000) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vUser VARCHAR(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vOld VARCHAR(4000);
	DECLARE vNew VARCHAR(4000);
	DECLARE vLogId INTEGER;
	DECLARE vVersion DECIMAL(4,2);
	
	-- Find username of person performing the INSERT into table
	SELECT SUBSTRING_INDEX(USER(), '@', 1) INTO vUser;
	SELECT CAST((CASE WHEN INSTR(@@GLOBAL.version,'-') > 0 THEN LEFT(@@GLOBAL.version, INSTR(@@GLOBAL.version,'-')-1) ELSE @@GLOBAL.version END) AS DECIMAL(4,1)) INTO vVersion;
   
	IF vUser <> 'root' THEN
		-- Verify the version
		IF vVersion >= 5.7 THEN
			-- Generates JSON object for trace
			SELECT JSON_OBJECT('PAYMENT_TYPE', OLD.PAYMENT_TYPE,
								'IS_BLOCKED', OLD.IS_BLOCKED)
				INTO vOld;

			-- Generates JSON object for trace
			SELECT JSON_OBJECT('PAYMENT_TYPE', NEW.PAYMENT_TYPE,
								'IS_BLOCKED', NEW.IS_BLOCKED)
				INTO vNew;
		ELSE
			-- Generates STRING object for trace
			SELECT CONCAT('PAYMENT_TYPE:', OLD.PAYMENT_TYPE,
							' IS_BLOCKED:', OLD.IS_BLOCKED)
				INTO vOld;

			-- Generates STRING object for trace
			SELECT CONCAT('PAYMENT_TYPE:', NEW.PAYMENT_TYPE,
							' IS_BLOCKED:', NEW.IS_BLOCKED)
				INTO vNew;
		END IF;
			
		-- Find IP of person performing the INSERT into table
		SELECT IFNULL(L.USER_IP,'localhost') INTO vIPClient FROM TBL_SYSTEM_LOG L WHERE NEW.MODIFIED_BY = L.USER_ID AND L.TEXT_TRANSACTION = 'LOGIN' ORDER BY L.LOGDATE DESC LIMIT 1;
	   
		-- Define the transaction
		SET vTranx = CONCAT('Update PAYMENT TYPE Id:',NEW.ID);

		-- Insert record into log table
		INSERT INTO TBL_SYSTEM_LOG (ID,USER_IP,USER_ID,LOGDATE,TEXT_TRANSACTION) VALUES (0,vIPClient,NEW.MODIFIED_BY,SYSDATE(),vTranx);

		-- Insert the trace 
		INSERT INTO TBL_SYSTEM_TRACE (ID,LOG_ID,TABLE_ORIGIN,RECORD_ID,OLD_RECORD,NEW_RECORD) VALUES (0,LAST_INSERT_ID(),'TBL_PAYMENT_TYPE',NEW.ID,LEFT(CONVERT(vOld USING utf8),4000),LEFT(CONVERT(vNew USING utf8),4000));
		
	END IF;

END; //


-- POSITION TABLE
DROP TRIGGER IF EXISTS TBL_POSITION_UPDATE//
CREATE TRIGGER TBL_POSITION_UPDATE
AFTER UPDATE
   ON TBL_POSITION FOR EACH ROW

BEGIN

	DECLARE vIPClient VARCHAR(20);
	DECLARE vTranx VARCHAR(2000) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vUser VARCHAR(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vOld VARCHAR(4000);
	DECLARE vNew VARCHAR(4000);
	DECLARE vLogId INTEGER;
	DECLARE vVersion DECIMAL(4,2);
	
	-- Find username of person performing the INSERT into table
	SELECT SUBSTRING_INDEX(USER(), '@', 1) INTO vUser;
	SELECT CAST((CASE WHEN INSTR(@@GLOBAL.version,'-') > 0 THEN LEFT(@@GLOBAL.version, INSTR(@@GLOBAL.version,'-')-1) ELSE @@GLOBAL.version END) AS DECIMAL(4,1)) INTO vVersion;
   
	IF vUser <> 'root' THEN
		-- Verify the version
		IF vVersion >= 5.7 THEN
			-- Generates JSON object for trace
			SELECT JSON_OBJECT('POSITION_NAME', OLD.POSITION_NAME,
								'TITLE', OLD.TITLE,
								'AREA_ID', OLD.AREA_ID,
								'IS_BLOCKED', OLD.IS_BLOCKED)
				INTO vOld;

			-- Generates JSON object for trace
			SELECT JSON_OBJECT('POSITION_NAME', NEW.POSITION_NAME,
								'TITLE', NEW.TITLE,
								'AREA_ID', NEW.AREA_ID,
								'IS_BLOCKED', NEW.IS_BLOCKED)
				INTO vNew;
		ELSE
			-- Generates STRING object for trace
			SELECT CONCAT('POSITION_NAME:', OLD.POSITION_NAME,
							' TITLE:', OLD.TITLE,
							' AREA_ID:', OLD.AREA_ID,
							' IS_BLOCKED:', OLD.IS_BLOCKED)
				INTO vOld;

			-- Generates STRING object for trace
			SELECT CONCAT('POSITION_NAME:', NEW.POSITION_NAME,
							' TITLE:', NEW.TITLE,
							' AREA_ID:', NEW.AREA_ID,
							' IS_BLOCKED:', NEW.IS_BLOCKED)
				INTO vNew;
		END IF;
			
		-- Find IP of person performing the INSERT into table
		SELECT IFNULL(L.USER_IP,'localhost') INTO vIPClient FROM TBL_SYSTEM_LOG L WHERE NEW.MODIFIED_BY = L.USER_ID AND L.TEXT_TRANSACTION = 'LOGIN' ORDER BY L.LOGDATE DESC LIMIT 1;
	   
		-- Define the transaction
		SET vTranx = CONCAT('Update POSITION Id:',NEW.ID);

		-- Insert record into log table
		INSERT INTO TBL_SYSTEM_LOG (ID,USER_IP,USER_ID,LOGDATE,TEXT_TRANSACTION) VALUES (0,vIPClient,NEW.MODIFIED_BY,SYSDATE(),vTranx);

		-- Insert the trace 
		INSERT INTO TBL_SYSTEM_TRACE (ID,LOG_ID,TABLE_ORIGIN,RECORD_ID,OLD_RECORD,NEW_RECORD) VALUES (0,LAST_INSERT_ID(),'TBL_POSITION',NEW.ID,LEFT(CONVERT(vOld USING utf8),4000),LEFT(CONVERT(vNew USING utf8),4000));
		
	END IF;

END; //


-- QUOTA TABLE
DROP TRIGGER IF EXISTS TBL_QUOTA_UPDATE//
CREATE TRIGGER TBL_QUOTA_UPDATE
AFTER UPDATE
   ON TBL_QUOTA FOR EACH ROW

BEGIN

	DECLARE vIPClient VARCHAR(20);
	DECLARE vTranx VARCHAR(2000) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vUser VARCHAR(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vOld VARCHAR(4000);
	DECLARE vNew VARCHAR(4000);
	DECLARE vLogId INTEGER;
	DECLARE vVersion DECIMAL(4,2);
	
	-- Find username of person performing the INSERT into table
	SELECT SUBSTRING_INDEX(USER(), '@', 1) INTO vUser;
	SELECT CAST((CASE WHEN INSTR(@@GLOBAL.version,'-') > 0 THEN LEFT(@@GLOBAL.version, INSTR(@@GLOBAL.version,'-')-1) ELSE @@GLOBAL.version END) AS DECIMAL(4,1)) INTO vVersion;
   
	IF vUser <> 'root' THEN
		-- Verify the version
		IF vVersion >= 5.7 THEN
			-- Generates JSON object for trace
			SELECT JSON_OBJECT('QUOTA_TYPE_ID', OLD.QUOTA_TYPE_ID,
								'CLIENT_ID', OLD.CLIENT_ID,
								'AMOUNT', OLD.AMOUNT,
								'USED', OLD.USED,
								'CREDIT_CARD_NUMBER', OLD.CREDIT_CARD_NUMBER,
								'CREDIT_CARD_NAME', OLD.CREDIT_CARD_NAME,
								'DATE_EXPIRATION', OLD.DATE_EXPIRATION,
								'VERIFICATION_CODE', OLD.VERIFICATION_CODE,
								'DIFERRED_TO', OLD.DIFERRED_TO,
								'PAYMENT_ID', OLD.PAYMENT_ID,
								'IS_PAYED', OLD.IS_PAYED,
								'IS_VERIFIED', OLD.IS_VERIFIED,
								'IS_BLOCKED', OLD.IS_BLOCKED)
				INTO vOld;

			-- Generates JSON object for trace
			SELECT JSON_OBJECT('QUOTA_TYPE_ID', NEW.QUOTA_TYPE_ID,
								'CLIENT_ID', NEW.CLIENT_ID,
								'AMOUNT', NEW.AMOUNT,
								'USED', NEW.USED,
								'CREDIT_CARD_NUMBER', NEW.CREDIT_CARD_NUMBER,
								'CREDIT_CARD_NAME', NEW.CREDIT_CARD_NAME,
								'DATE_EXPIRATION', NEW.DATE_EXPIRATION,
								'VERIFICATION_CODE', NEW.VERIFICATION_CODE,
								'DIFERRED_TO', NEW.DIFERRED_TO,
								'PAYMENT_ID', NEW.PAYMENT_ID,
								'IS_PAYED', NEW.IS_PAYED,
								'IS_VERIFIED', NEW.IS_VERIFIED,
								'IS_BLOCKED', NEW.IS_BLOCKED)
				INTO vNew;
		ELSE
			-- Generates STRING object for trace
			SELECT CONCAT('QUOTA_TYPE_ID:', OLD.QUOTA_TYPE_ID,
							' CLIENT_ID:', OLD.CLIENT_ID,
							' AMOUNT:', OLD.AMOUNT,
							' USED:', OLD.USED,
							' CREDIT_CARD_NUMBER:', OLD.CREDIT_CARD_NUMBER,
							' CREDIT_CARD_NAME:', OLD.CREDIT_CARD_NAME,
							' DATE_EXPIRATION:', OLD.DATE_EXPIRATION,
							' VERIFICATION_CODE:', OLD.VERIFICATION_CODE,
							' DIFERRED_TO:', OLD.DIFERRED_TO,
							' PAYMENT_ID:', OLD.PAYMENT_ID,
							' IS_PAYED:', OLD.IS_PAYED,
							' IS_VERIFIED:', OLD.IS_VERIFIED,
							' IS_BLOCKED:', OLD.IS_BLOCKED)
				INTO vOld;

			-- Generates STRING object for trace
			SELECT CONCAT('QUOTA_TYPE_ID:', NEW.QUOTA_TYPE_ID,
							' CLIENT_ID:', NEW.CLIENT_ID,
							' AMOUNT:', NEW.AMOUNT,
							' USED:', NEW.USED,
							' CREDIT_CARD_NUMBER:', NEW.CREDIT_CARD_NUMBER,
							' CREDIT_CARD_NAME:', NEW.CREDIT_CARD_NAME,
							' DATE_EXPIRATION:', NEW.DATE_EXPIRATION,
							' VERIFICATION_CODE:', NEW.VERIFICATION_CODE,
							' DIFERRED_TO:', NEW.DIFERRED_TO,
							' PAYMENT_ID:', NEW.PAYMENT_ID,
							' IS_PAYED:', NEW.IS_PAYED,
							' IS_VERIFIED:', NEW.IS_VERIFIED,
							' IS_BLOCKED:', NEW.IS_BLOCKED)
				INTO vNew;
		END IF;
			
		-- Find IP of person performing the INSERT into table
		SELECT IFNULL(L.USER_IP,'localhost') INTO vIPClient FROM TBL_SYSTEM_LOG L WHERE NEW.MODIFIED_BY = L.USER_ID AND L.TEXT_TRANSACTION = 'LOGIN' ORDER BY L.LOGDATE DESC LIMIT 1;
	   
		-- Define the transaction
		SET vTranx = CONCAT('Update QUOTA Id:',NEW.ID);

		-- Insert record into log table
		INSERT INTO TBL_SYSTEM_LOG (ID,USER_IP,USER_ID,LOGDATE,TEXT_TRANSACTION) VALUES (0,vIPClient,NEW.MODIFIED_BY,SYSDATE(),vTranx);

		-- Insert the trace 
		INSERT INTO TBL_SYSTEM_TRACE (ID,LOG_ID,TABLE_ORIGIN,RECORD_ID,OLD_RECORD,NEW_RECORD) VALUES (0,LAST_INSERT_ID(),'TBL_QUOTA',NEW.ID,LEFT(CONVERT(vOld USING utf8),4000),LEFT(CONVERT(vNew USING utf8),4000));
		
	END IF;

END; //


-- QUOTA EMPLOYEE TABLE
DROP TRIGGER IF EXISTS TBL_QUOTA_EMPLOYEE_UPDATE//
CREATE TRIGGER TBL_QUOTA_EMPLOYEE_UPDATE
AFTER UPDATE
   ON TBL_QUOTA_EMPLOYEE FOR EACH ROW

BEGIN

	DECLARE vIPClient VARCHAR(20);
	DECLARE vTranx VARCHAR(2000) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vUser VARCHAR(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vOld VARCHAR(4000);
	DECLARE vNew VARCHAR(4000);
	DECLARE vLogId INTEGER;
	DECLARE vVersion DECIMAL(4,2);
	
	-- Find username of person performing the INSERT into table
	SELECT SUBSTRING_INDEX(USER(), '@', 1) INTO vUser;
	SELECT CAST((CASE WHEN INSTR(@@GLOBAL.version,'-') > 0 THEN LEFT(@@GLOBAL.version, INSTR(@@GLOBAL.version,'-')-1) ELSE @@GLOBAL.version END) AS DECIMAL(4,1)) INTO vVersion;
   
	IF vUser <> 'root' THEN
		-- Verify the version
		IF vVersion >= 5.7 THEN
			-- Generates JSON object for trace
			SELECT JSON_OBJECT('CLIENT_ID', OLD.CLIENT_ID,
								'USER_ID', OLD.USER_ID,
								'QUOTA_ID', OLD.QUOTA_ID,
								'AMOUNT', OLD.AMOUNT,
								'USED', OLD.USED,
								'IS_BLOCKED', OLD.IS_BLOCKED)
				INTO vOld;

			-- Generates JSON object for trace
			SELECT JSON_OBJECT('CLIENT_ID', NEW.CLIENT_ID,
								'USER_ID', NEW.USER_ID,
								'QUOTA_ID', NEW.QUOTA_ID,
								'AMOUNT', NEW.AMOUNT,
								'USED', NEW.USED,
								'IS_BLOCKED', NEW.IS_BLOCKED)
				INTO vNew;
		ELSE
			-- Generates STRING object for trace
			SELECT CONCAT('CLIENT_ID:', OLD.CLIENT_ID,
							' USER_ID:', OLD.USER_ID,
							' QUOTA_ID:', OLD.QUOTA_ID,
							' AMOUNT:', OLD.AMOUNT,
							' USED:', OLD.USED,
							' IS_BLOCKED:', OLD.IS_BLOCKED)
				INTO vOld;

			-- Generates STRING object for trace
			SELECT CONCAT('CLIENT_ID:', NEW.CLIENT_ID,
							' USER_ID:', NEW.USER_ID,
							' QUOTA_ID:', NEW.QUOTA_ID,
							' AMOUNT:', NEW.AMOUNT,
							' USED:', NEW.USED,
							' IS_BLOCKED:', NEW.IS_BLOCKED)
				INTO vNew;
		END IF;
			
		-- Find IP of person performing the INSERT into table
		SELECT IFNULL(L.USER_IP,'localhost') INTO vIPClient FROM TBL_SYSTEM_LOG L WHERE NEW.MODIFIED_BY = L.USER_ID AND L.TEXT_TRANSACTION = 'LOGIN' ORDER BY L.LOGDATE DESC LIMIT 1;
	   
		-- Define the transaction
		SET vTranx = CONCAT('Update QUOTA EMPLOYEE Id:',NEW.ID);

		-- Insert record into log table
		INSERT INTO TBL_SYSTEM_LOG (ID,USER_IP,USER_ID,LOGDATE,TEXT_TRANSACTION) VALUES (0,vIPClient,NEW.MODIFIED_BY,SYSDATE(),vTranx);

		-- Insert the trace 
		INSERT INTO TBL_SYSTEM_TRACE (ID,LOG_ID,TABLE_ORIGIN,RECORD_ID,OLD_RECORD,NEW_RECORD) VALUES (0,LAST_INSERT_ID(),'TBL_QUOTA_EMPLOYEE',NEW.ID,LEFT(CONVERT(vOld USING utf8),4000),LEFT(CONVERT(vNew USING utf8),4000));
		
	END IF;

END; //


-- QUOTA TYPE TABLE
DROP TRIGGER IF EXISTS TBL_QUOTA_TYPE_UPDATE//
CREATE TRIGGER TBL_QUOTA_TYPE_UPDATE
AFTER UPDATE
   ON TBL_QUOTA_TYPE FOR EACH ROW

BEGIN

	DECLARE vIPClient VARCHAR(20);
	DECLARE vTranx VARCHAR(2000) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vUser VARCHAR(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vOld VARCHAR(4000);
	DECLARE vNew VARCHAR(4000);
	DECLARE vLogId INTEGER;
	DECLARE vVersion DECIMAL(4,2);
	
	-- Find username of person performing the INSERT into table
	SELECT SUBSTRING_INDEX(USER(), '@', 1) INTO vUser;
	SELECT CAST((CASE WHEN INSTR(@@GLOBAL.version,'-') > 0 THEN LEFT(@@GLOBAL.version, INSTR(@@GLOBAL.version,'-')-1) ELSE @@GLOBAL.version END) AS DECIMAL(4,1)) INTO vVersion;
   
	IF vUser <> 'root' THEN
		-- Verify the version
		IF vVersion >= 5.7 THEN
			-- Generates JSON object for trace
			SELECT JSON_OBJECT('RESOURCE_NAME', OLD.RESOURCE_NAME,
								'AMOUNT', OLD.AMOUNT,
								'IS_BLOCKED', OLD.IS_BLOCKED)
				INTO vOld;

			-- Generates JSON object for trace
			SELECT JSON_OBJECT('RESOURCE_NAME', NEW.RESOURCE_NAME,
								'AMOUNT', NEW.AMOUNT,
								'IS_BLOCKED', NEW.IS_BLOCKED)
				INTO vNew;
		ELSE
			-- Generates STRING object for trace
			SELECT CONCAT('RESOURCE_NAME:', OLD.RESOURCE_NAME,
							' AMOUNT:', OLD.AMOUNT,
							' IS_BLOCKED:', OLD.IS_BLOCKED)
				INTO vOld;

			-- Generates STRING object for trace
			SELECT CONCAT('RESOURCE_NAME:', NEW.RESOURCE_NAME,
							' AMOUNT:', NEW.AMOUNT,
							' IS_BLOCKED:', NEW.IS_BLOCKED)
				INTO vNew;
		END IF;
			
		-- Find IP of person performing the INSERT into table
		SELECT IFNULL(L.USER_IP,'localhost') INTO vIPClient FROM TBL_SYSTEM_LOG L WHERE NEW.MODIFIED_BY = L.USER_ID AND L.TEXT_TRANSACTION = 'LOGIN' ORDER BY L.LOGDATE DESC LIMIT 1;
	   
		-- Define the transaction
		SET vTranx = CONCAT('Update QUOTA TYPE Id:',NEW.ID);

		-- Insert record into log table
		INSERT INTO TBL_SYSTEM_LOG (ID,USER_IP,USER_ID,LOGDATE,TEXT_TRANSACTION) VALUES (0,vIPClient,NEW.MODIFIED_BY,SYSDATE(),vTranx);

		-- Insert the trace 
		INSERT INTO TBL_SYSTEM_TRACE (ID,LOG_ID,TABLE_ORIGIN,RECORD_ID,OLD_RECORD,NEW_RECORD) VALUES (0,LAST_INSERT_ID(),'TBL_QUOTA_TYPE',NEW.ID,LEFT(CONVERT(vOld USING utf8),4000),LEFT(CONVERT(vNew USING utf8),4000));
		
	END IF;

END; //


-- SERVICE TABLE
DROP TRIGGER IF EXISTS TBL_SERVICE_UPDATE//
CREATE TRIGGER TBL_SERVICE_UPDATE
AFTER UPDATE
   ON TBL_SERVICE FOR EACH ROW

BEGIN

	DECLARE vIPClient VARCHAR(20);
	DECLARE vTranx VARCHAR(2000) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vUser VARCHAR(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vOld VARCHAR(4000);
	DECLARE vNew VARCHAR(4000);
	DECLARE vLogId INTEGER;
	DECLARE vVersion DECIMAL(4,2);
	
	-- Find username of person performing the INSERT into table
	SELECT SUBSTRING_INDEX(USER(), '@', 1) INTO vUser;
	SELECT CAST((CASE WHEN INSTR(@@GLOBAL.version,'-') > 0 THEN LEFT(@@GLOBAL.version, INSTR(@@GLOBAL.version,'-')-1) ELSE @@GLOBAL.version END) AS DECIMAL(4,1)) INTO vVersion;
   
	IF vUser <> 'root' THEN
		-- Verify the version
		IF vVersion >= 5.7 THEN
			-- Generates JSON object for trace
			SELECT JSON_OBJECT('USER_ID', OLD.USER_ID,
								'CLIENT_ID', OLD.CLIENT_ID,
								'REQUESTED_BY', OLD.REQUESTED_BY,
								'REQUESTED_EMAIL', OLD.REQUESTED_EMAIL,
								'REQUESTED_PHONE', OLD.REQUESTED_PHONE,
								'REQUESTED_CELLPHONE', OLD.REQUESTED_CELLPHONE,
								'REQUESTED_IP', OLD.REQUESTED_IP,
								'REQUESTED_ADDRESS', OLD.REQUESTED_ADDRESS,
								'REQUESTED_ZONE', OLD.REQUESTED_ZONE,
								'DELIVER_DESCRIPTION', OLD.DELIVER_DESCRIPTION,
								'OBSERVATION', OLD.OBSERVATION,
								'DELIVER_TO', OLD.DELIVER_TO,
								'DELIVER_EMAIL', OLD.DELIVER_EMAIL,
								'DELIVER_PHONE', OLD.DELIVER_PHONE,
								'DELIVER_CELLPHONE', OLD.DELIVER_CELLPHONE,
								'DELIVER_ADDRESS', OLD.DELIVER_ADDRESS,
								'DELIVER_ZONE', OLD.DELIVER_ZONE,
								'DELIVERY_TYPE', OLD.DELIVERY_TYPE,
								'QUANTITY', OLD.QUANTITY,
								'PRICE', OLD.PRICE,
								'STATE_ID', OLD.STATE_ID,
								'VEHICLE_TYPE_ID', OLD.VEHICLE_TYPE_ID,
								'ROUND_TRIP', OLD.ROUND_TRIP,
								'FRAGILE', OLD.FRAGILE,
								'TIME_START_TO_DELIVER', OLD.TIME_START_TO_DELIVER,
								'TIME_FINISH_TO_DELIVER', OLD.TIME_FINISH_TO_DELIVER,
								'IS_BLOCKED', OLD.IS_BLOCKED)
				INTO vOld;

			-- Generates JSON object for trace
			SELECT JSON_OBJECT('USER_ID', NEW.USER_ID,
								'CLIENT_ID', NEW.CLIENT_ID,
								'REQUESTED_BY', NEW.REQUESTED_BY,
								'REQUESTED_EMAIL', NEW.REQUESTED_EMAIL,
								'REQUESTED_PHONE', NEW.REQUESTED_PHONE,
								'REQUESTED_CELLPHONE', NEW.REQUESTED_CELLPHONE,
								'REQUESTED_IP', NEW.REQUESTED_IP,
								'REQUESTED_ADDRESS', NEW.REQUESTED_ADDRESS,
								'REQUESTED_ZONE', NEW.REQUESTED_ZONE,
								'DELIVER_DESCRIPTION', NEW.DELIVER_DESCRIPTION,
								'OBSERVATION', NEW.OBSERVATION,
								'DELIVER_TO', NEW.DELIVER_TO,
								'DELIVER_EMAIL', NEW.DELIVER_EMAIL,
								'DELIVER_PHONE', NEW.DELIVER_PHONE,
								'DELIVER_CELLPHONE', NEW.DELIVER_CELLPHONE,
								'DELIVER_ADDRESS', NEW.DELIVER_ADDRESS,
								'DELIVER_ZONE', NEW.DELIVER_ZONE,
								'DELIVERY_TYPE', NEW.DELIVERY_TYPE,
								'QUANTITY', NEW.QUANTITY,
								'PRICE', NEW.PRICE,
								'STATE_ID', NEW.STATE_ID,
								'VEHICLE_TYPE_ID', NEW.VEHICLE_TYPE_ID,
								'ROUND_TRIP', NEW.ROUND_TRIP,
								'FRAGILE', NEW.FRAGILE,
								'TIME_START_TO_DELIVER', NEW.TIME_START_TO_DELIVER,
								'TIME_FINISH_TO_DELIVER', NEW.TIME_FINISH_TO_DELIVER,
								'IS_BLOCKED', NEW.IS_BLOCKED)
				INTO vNew;
		ELSE
			-- Generates STRING object for trace
			SELECT CONCAT('USER_ID:', OLD.USER_ID,
							' CLIENT_ID:', OLD.CLIENT_ID,
							' REQUESTED_BY:', OLD.REQUESTED_BY,
							' REQUESTED_EMAIL:', OLD.REQUESTED_EMAIL,
							' REQUESTED_PHONE:', OLD.REQUESTED_PHONE,
							' REQUESTED_CELLPHONE:', OLD.REQUESTED_CELLPHONE,
							' REQUESTED_IP:', OLD.REQUESTED_IP,
							' REQUESTED_ADDRESS:', OLD.REQUESTED_ADDRESS,
							' REQUESTED_ZONE:', OLD.REQUESTED_ZONE,
							' DELIVER_DESCRIPTION:', OLD.DELIVER_DESCRIPTION,
							' OBSERVATION:', OLD.OBSERVATION,
							' DELIVER_TO:', OLD.DELIVER_TO,
							' DELIVER_EMAIL:', OLD.DELIVER_EMAIL,
							' DELIVER_PHONE:', OLD.DELIVER_PHONE,
							' DELIVER_CELLPHONE:', OLD.DELIVER_CELLPHONE,
							' DELIVER_ADDRESS:', OLD.DELIVER_ADDRESS,
							' DELIVER_ZONE:', OLD.DELIVER_ZONE,
							' DELIVERY_TYPE:', OLD.DELIVERY_TYPE,
							' QUANTITY:', OLD.QUANTITY,
							' PRICE:', OLD.PRICE,
							' STATE_ID:', OLD.STATE_ID,
							' VEHICLE_TYPE_ID:', OLD.VEHICLE_TYPE_ID,
							' ROUND_TRIP:', OLD.ROUND_TRIP,
							' FRAGILE:', OLD.FRAGILE,
							' TIME_START_TO_DELIVER:', OLD.TIME_START_TO_DELIVER,
							' TIME_FINISH_TO_DELIVER:', OLD.TIME_FINISH_TO_DELIVER,
							' IS_BLOCKED:', OLD.IS_BLOCKED)
				INTO vOld;

			-- Generates STRING object for trace
			SELECT CONCAT('USER_ID:', NEW.USER_ID,
							' CLIENT_ID:', NEW.CLIENT_ID,
							' REQUESTED_BY:', NEW.REQUESTED_BY,
							' REQUESTED_EMAIL:', NEW.REQUESTED_EMAIL,
							' REQUESTED_PHONE:', NEW.REQUESTED_PHONE,
							' REQUESTED_CELLPHONE:', NEW.REQUESTED_CELLPHONE,
							' REQUESTED_IP:', NEW.REQUESTED_IP,
							' REQUESTED_ADDRESS:', NEW.REQUESTED_ADDRESS,
							' REQUESTED_ZONE:', NEW.REQUESTED_ZONE,
							' DELIVER_DESCRIPTION:', NEW.DELIVER_DESCRIPTION,
							' OBSERVATION:', NEW.OBSERVATION,
							' DELIVER_TO:', NEW.DELIVER_TO,
							' DELIVER_EMAIL:', NEW.DELIVER_EMAIL,
							' DELIVER_PHONE:', NEW.DELIVER_PHONE,
							' DELIVER_CELLPHONE:', NEW.DELIVER_CELLPHONE,
							' DELIVER_ADDRESS:', NEW.DELIVER_ADDRESS,
							' DELIVER_ZONE:', NEW.DELIVER_ZONE,
							' DELIVERY_TYPE:', NEW.DELIVERY_TYPE,
							' QUANTITY:', NEW.QUANTITY,
							' PRICE:', NEW.PRICE,
							' STATE_ID:', NEW.STATE_ID,
							' VEHICLE_TYPE_ID:', NEW.VEHICLE_TYPE_ID,
							' ROUND_TRIP:', NEW.ROUND_TRIP,
							' FRAGILE:', NEW.FRAGILE,
							' TIME_START_TO_DELIVER:', NEW.TIME_START_TO_DELIVER,
							' TIME_FINISH_TO_DELIVER:', NEW.TIME_FINISH_TO_DELIVER,
							' IS_BLOCKED:', NEW.IS_BLOCKED)
				INTO vNew;
		END IF;
			
		-- Find IP of person performing the INSERT into table
		SELECT IFNULL(L.USER_IP,'localhost') INTO vIPClient FROM TBL_SYSTEM_LOG L WHERE NEW.MODIFIED_BY = L.USER_ID AND L.TEXT_TRANSACTION = 'LOGIN' ORDER BY L.LOGDATE DESC LIMIT 1;
	   
		-- Define the transaction
		SET vTranx = CONCAT('Update SERVICE Id:',NEW.ID);

		-- Insert record into log table
		INSERT INTO TBL_SYSTEM_LOG (ID,USER_IP,USER_ID,LOGDATE,TEXT_TRANSACTION) VALUES (0,vIPClient,NEW.MODIFIED_BY,SYSDATE(),vTranx);

		-- Insert the trace 
		INSERT INTO TBL_SYSTEM_TRACE (ID,LOG_ID,TABLE_ORIGIN,RECORD_ID,OLD_RECORD,NEW_RECORD) VALUES (0,LAST_INSERT_ID(),'TBL_SERVICE',NEW.ID,LEFT(CONVERT(vOld USING utf8),4000),LEFT(CONVERT(vNew USING utf8),4000));
		
	END IF;

END; //


-- SERVICE STATE TABLE
DROP TRIGGER IF EXISTS TBL_SERVICE_STATE_UPDATE//
CREATE TRIGGER TBL_SERVICE_STATE_UPDATE
AFTER UPDATE
   ON TBL_SERVICE_STATE FOR EACH ROW

BEGIN

	DECLARE vIPClient VARCHAR(20);
	DECLARE vTranx VARCHAR(2000) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vUser VARCHAR(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vOld VARCHAR(4000);
	DECLARE vNew VARCHAR(4000);
	DECLARE vLogId INTEGER;
	DECLARE vVersion DECIMAL(4,2);
	
	-- Find username of person performing the INSERT into table
	SELECT SUBSTRING_INDEX(USER(), '@', 1) INTO vUser;
	SELECT CAST((CASE WHEN INSTR(@@GLOBAL.version,'-') > 0 THEN LEFT(@@GLOBAL.version, INSTR(@@GLOBAL.version,'-')-1) ELSE @@GLOBAL.version END) AS DECIMAL(4,1)) INTO vVersion;
   
	IF vUser <> 'root' THEN
		-- Verify the version
		IF vVersion >= 5.7 THEN
			-- Generates JSON object for trace
			SELECT JSON_OBJECT('RESOURCE_NAME', OLD.RESOURCE_NAME,
								'IS_BLOCKED', OLD.IS_BLOCKED)
				INTO vOld;

			-- Generates JSON object for trace
			SELECT JSON_OBJECT('RESOURCE_NAME', NEW.RESOURCE_NAME,
								'IS_BLOCKED', NEW.IS_BLOCKED)
				INTO vNew;
		ELSE
			-- Generates STRING object for trace
			SELECT CONCAT('RESOURCE_NAME:', OLD.RESOURCE_NAME,
							' IS_BLOCKED:', OLD.IS_BLOCKED)
				INTO vOld;

			-- Generates STRING object for trace
			SELECT CONCAT('RESOURCE_NAME:', NEW.RESOURCE_NAME,
							' IS_BLOCKED:', NEW.IS_BLOCKED)
				INTO vNew;
		END IF;
			
		-- Find IP of person performing the INSERT into table
		SELECT IFNULL(L.USER_IP,'localhost') INTO vIPClient FROM TBL_SYSTEM_LOG L WHERE NEW.MODIFIED_BY = L.USER_ID AND L.TEXT_TRANSACTION = 'LOGIN' ORDER BY L.LOGDATE DESC LIMIT 1;
	   
		-- Define the transaction
		SET vTranx = CONCAT('Update SERVICE STATE Id:',NEW.ID);

		-- Insert record into log table
		INSERT INTO TBL_SYSTEM_LOG (ID,USER_IP,USER_ID,LOGDATE,TEXT_TRANSACTION) VALUES (0,vIPClient,NEW.MODIFIED_BY,SYSDATE(),vTranx);

		-- Insert the trace 
		INSERT INTO TBL_SYSTEM_TRACE (ID,LOG_ID,TABLE_ORIGIN,RECORD_ID,OLD_RECORD,NEW_RECORD) VALUES (0,LAST_INSERT_ID(),'TBL_SERVICE_STATE',NEW.ID,LEFT(CONVERT(vOld USING utf8),4000),LEFT(CONVERT(vNew USING utf8),4000));
		
	END IF;

END; //


-- SYSTEM ACCESS TABLE
DROP TRIGGER IF EXISTS TBL_SYSTEM_ACCESS_UPDATE//
CREATE TRIGGER TBL_SYSTEM_ACCESS_UPDATE
AFTER UPDATE
   ON TBL_SYSTEM_ACCESS FOR EACH ROW

BEGIN

	DECLARE vIPClient VARCHAR(20);
	DECLARE vTranx VARCHAR(2000) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vUser VARCHAR(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vOld VARCHAR(4000);
	DECLARE vNew VARCHAR(4000);
	DECLARE vLogId INTEGER;
	DECLARE vVersion DECIMAL(4,2);
	
	-- Find username of person performing the INSERT into table
	SELECT SUBSTRING_INDEX(USER(), '@', 1) INTO vUser;
	SELECT CAST((CASE WHEN INSTR(@@GLOBAL.version,'-') > 0 THEN LEFT(@@GLOBAL.version, INSTR(@@GLOBAL.version,'-')-1) ELSE @@GLOBAL.version END) AS DECIMAL(4,1)) INTO vVersion;
   
	IF vUser <> 'root' THEN
		-- Verify the version
		IF vVersion >= 5.7 THEN
			-- Generates JSON object for trace
			SELECT JSON_OBJECT('RESOURCE_NAME', OLD.RESOURCE_NAME,
								'PREFIX', OLD.PREFIX,
								'LINK_TO', OLD.LINK_TO,
								'IS_BLOCKED', OLD.IS_BLOCKED)
				INTO vOld;

			-- Generates JSON object for trace
			SELECT JSON_OBJECT('RESOURCE_NAME', NEW.RESOURCE_NAME,
								'PREFIX', NEW.PREFIX,
								'LINK_TO', NEW.LINK_TO,
								'IS_BLOCKED', NEW.IS_BLOCKED)
				INTO vNew;
		ELSE
			-- Generates STRING object for trace
			SELECT CONCAT('RESOURCE_NAME:', OLD.RESOURCE_NAME,
							' PREFIX:', OLD.PREFIX,
							' LINK_TO:', OLD.LINK_TO,
							' IS_BLOCKED:', OLD.IS_BLOCKED)
				INTO vOld;

			-- Generates STRING object for trace
			SELECT CONCAT('RESOURCE_NAME:', NEW.RESOURCE_NAME,
							' PREFIX:', NEW.PREFIX,
							' LINK_TO:', NEW.LINK_TO,
							' IS_BLOCKED:', NEW.IS_BLOCKED)
				INTO vNew;
		END IF;
			
		-- Find IP of person performing the INSERT into table
		SELECT IFNULL(L.USER_IP,'localhost') INTO vIPClient FROM TBL_SYSTEM_LOG L WHERE NEW.MODIFIED_BY = L.USER_ID AND L.TEXT_TRANSACTION = 'LOGIN' ORDER BY L.LOGDATE DESC LIMIT 1;
	   
		-- Define the transaction
		SET vTranx = CONCAT('Update SYSTEM ACCESS Id:',NEW.ID);

		-- Insert record into log table
		INSERT INTO TBL_SYSTEM_LOG (ID,USER_IP,USER_ID,LOGDATE,TEXT_TRANSACTION) VALUES (0,vIPClient,NEW.MODIFIED_BY,SYSDATE(),vTranx);

		-- Insert the trace 
		INSERT INTO TBL_SYSTEM_TRACE (ID,LOG_ID,TABLE_ORIGIN,RECORD_ID,OLD_RECORD,NEW_RECORD) VALUES (0,LAST_INSERT_ID(),'TBL_SYSTEM_ACCESS',NEW.ID,LEFT(CONVERT(vOld USING utf8),4000),LEFT(CONVERT(vNew USING utf8),4000));
		
	END IF;

END; //


-- SYSTEM CITY TABLE
DROP TRIGGER IF EXISTS TBL_SYSTEM_CITY_UPDATE//
CREATE TRIGGER TBL_SYSTEM_CITY_UPDATE
AFTER UPDATE
   ON TBL_SYSTEM_CITY FOR EACH ROW

BEGIN

	DECLARE vIPClient VARCHAR(20);
	DECLARE vTranx VARCHAR(2000) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vUser VARCHAR(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vOld VARCHAR(4000);
	DECLARE vNew VARCHAR(4000);
	DECLARE vLogId INTEGER;
	DECLARE vVersion DECIMAL(4,2);
	
	-- Find username of person performing the INSERT into table
	SELECT SUBSTRING_INDEX(USER(), '@', 1) INTO vUser;
	SELECT CAST((CASE WHEN INSTR(@@GLOBAL.version,'-') > 0 THEN LEFT(@@GLOBAL.version, INSTR(@@GLOBAL.version,'-')-1) ELSE @@GLOBAL.version END) AS DECIMAL(4,1)) INTO vVersion;
   
	IF vUser <> 'root' THEN
		-- Verify the version
		IF vVersion >= 5.7 THEN
			-- Generates JSON object for trace
			SELECT JSON_OBJECT('CITY_NAME', OLD.CITY_NAME,
								'COUNTRY_ID', OLD.COUNTRY_ID,
								'IS_BLOCKED', OLD.IS_BLOCKED)
				INTO vOld;

			-- Generates JSON object for trace
			SELECT JSON_OBJECT('CITY_NAME', NEW.CITY_NAME,
								'COUNTRY_ID', NEW.COUNTRY_ID,
								'IS_BLOCKED', NEW.IS_BLOCKED)
				INTO vNew;
		ELSE
			-- Generates STRING object for trace
			SELECT CONCAT('CITY_NAME:', OLD.CITY_NAME,
							' COUNTRY_ID:', OLD.COUNTRY_ID,
							' IS_BLOCKED:', OLD.IS_BLOCKED)
				INTO vOld;

			-- Generates STRING object for trace
			SELECT CONCAT('CITY_NAME:', NEW.CITY_NAME,
							' COUNTRY_ID:', NEW.COUNTRY_ID,
							' IS_BLOCKED:', NEW.IS_BLOCKED)
				INTO vNew;
		END IF;
			
		-- Find IP of person performing the INSERT into table
		SELECT IFNULL(L.USER_IP,'localhost') INTO vIPClient FROM TBL_SYSTEM_LOG L WHERE NEW.MODIFIED_BY = L.USER_ID AND L.TEXT_TRANSACTION = 'LOGIN' ORDER BY L.LOGDATE DESC LIMIT 1;
	   
		-- Define the transaction
		SET vTranx = CONCAT('Update SYSTEM CITY Id:',NEW.ID);

		-- Insert record into log table
		INSERT INTO TBL_SYSTEM_LOG (ID,USER_IP,USER_ID,LOGDATE,TEXT_TRANSACTION) VALUES (0,vIPClient,NEW.MODIFIED_BY,SYSDATE(),vTranx);

		-- Insert the trace 
		INSERT INTO TBL_SYSTEM_TRACE (ID,LOG_ID,TABLE_ORIGIN,RECORD_ID,OLD_RECORD,NEW_RECORD) VALUES (0,LAST_INSERT_ID(),'TBL_SYSTEM_CITY',NEW.ID,LEFT(CONVERT(vOld USING utf8),4000),LEFT(CONVERT(vNew USING utf8),4000));
		
	END IF;

END; //


-- SYSTEM CLIENT PAYMENT TYPE TABLE
DROP TRIGGER IF EXISTS TBL_SYSTEM_CLIENT_PAYMENT_TYPE_UPDATE//
CREATE TRIGGER TBL_SYSTEM_CLIENT_PAYMENT_TYPE_UPDATE
AFTER UPDATE
   ON TBL_SYSTEM_CLIENT_PAYMENT_TYPE FOR EACH ROW

BEGIN

	DECLARE vIPClient VARCHAR(20);
	DECLARE vTranx VARCHAR(2000) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vUser VARCHAR(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vOld VARCHAR(4000);
	DECLARE vNew VARCHAR(4000);
	DECLARE vLogId INTEGER;
	DECLARE vVersion DECIMAL(4,2);
	
	-- Find username of person performing the INSERT into table
	SELECT SUBSTRING_INDEX(USER(), '@', 1) INTO vUser;
	SELECT CAST((CASE WHEN INSTR(@@GLOBAL.version,'-') > 0 THEN LEFT(@@GLOBAL.version, INSTR(@@GLOBAL.version,'-')-1) ELSE @@GLOBAL.version END) AS DECIMAL(4,1)) INTO vVersion;
   
	IF vUser <> 'root' THEN
		-- Verify the version
		IF vVersion >= 5.7 THEN
			-- Generates JSON object for trace
			SELECT JSON_OBJECT('RESOURCE_NAME', OLD.RESOURCE_NAME,
								'IS_BLOCKED', OLD.IS_BLOCKED)
				INTO vOld;

			-- Generates JSON object for trace
			SELECT JSON_OBJECT('RESOURCE_NAME', NEW.RESOURCE_NAME,
								'IS_BLOCKED', NEW.IS_BLOCKED)
				INTO vNew;
		ELSE
			-- Generates STRING object for trace
			SELECT CONCAT('RESOURCE_NAME:', OLD.RESOURCE_NAME,
							' IS_BLOCKED:', OLD.IS_BLOCKED)
				INTO vOld;

			-- Generates STRING object for trace
			SELECT CONCAT('RESOURCE_NAME:', NEW.RESOURCE_NAME,
							' IS_BLOCKED:', NEW.IS_BLOCKED)
				INTO vNew;
		END IF;
			
		-- Find IP of person performing the INSERT into table
		SELECT IFNULL(L.USER_IP,'localhost') INTO vIPClient FROM TBL_SYSTEM_LOG L WHERE NEW.MODIFIED_BY = L.USER_ID AND L.TEXT_TRANSACTION = 'LOGIN' ORDER BY L.LOGDATE DESC LIMIT 1;
	   
		-- Define the transaction
		SET vTranx = CONCAT('Update SYSTEM CLIENT PAYMENT TYPE Id:',NEW.ID);

		-- Insert record into log table
		INSERT INTO TBL_SYSTEM_LOG (ID,USER_IP,USER_ID,LOGDATE,TEXT_TRANSACTION) VALUES (0,vIPClient,NEW.MODIFIED_BY,SYSDATE(),vTranx);

		-- Insert the trace 
		INSERT INTO TBL_SYSTEM_TRACE (ID,LOG_ID,TABLE_ORIGIN,RECORD_ID,OLD_RECORD,NEW_RECORD) VALUES (0,LAST_INSERT_ID(),'TBL_SYSTEM_CLIENT_PAYMENT_TYPE',NEW.ID,LEFT(CONVERT(vOld USING utf8),4000),LEFT(CONVERT(vNew USING utf8),4000));
		
	END IF;

END; //


-- SYSTEM CLIENT TYPE TABLE
DROP TRIGGER IF EXISTS TBL_SYSTEM_CLIENT_TYPE_UPDATE//
CREATE TRIGGER TBL_SYSTEM_CLIENT_TYPE_UPDATE
AFTER UPDATE
   ON TBL_SYSTEM_CLIENT_TYPE FOR EACH ROW

BEGIN

	DECLARE vIPClient VARCHAR(20);
	DECLARE vTranx VARCHAR(2000) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vUser VARCHAR(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vOld VARCHAR(4000);
	DECLARE vNew VARCHAR(4000);
	DECLARE vLogId INTEGER;
	DECLARE vVersion DECIMAL(4,2);
	
	-- Find username of person performing the INSERT into table
	SELECT SUBSTRING_INDEX(USER(), '@', 1) INTO vUser;
	SELECT CAST((CASE WHEN INSTR(@@GLOBAL.version,'-') > 0 THEN LEFT(@@GLOBAL.version, INSTR(@@GLOBAL.version,'-')-1) ELSE @@GLOBAL.version END) AS DECIMAL(4,1)) INTO vVersion;
   
	IF vUser <> 'root' THEN
		-- Verify the version
		IF vVersion >= 5.7 THEN
			-- Generates JSON object for trace
			SELECT JSON_OBJECT('RESOURCE_NAME', OLD.RESOURCE_NAME,
								'IS_BLOCKED', OLD.IS_BLOCKED)
				INTO vOld;

			-- Generates JSON object for trace
			SELECT JSON_OBJECT('RESOURCE_NAME', NEW.RESOURCE_NAME,
								'IS_BLOCKED', NEW.IS_BLOCKED)
				INTO vNew;
		ELSE
			-- Generates STRING object for trace
			SELECT CONCAT('RESOURCE_NAME:', OLD.RESOURCE_NAME,
							' IS_BLOCKED:', OLD.IS_BLOCKED)
				INTO vOld;

			-- Generates STRING object for trace
			SELECT CONCAT('RESOURCE_NAME:', NEW.RESOURCE_NAME,
							' IS_BLOCKED:', NEW.IS_BLOCKED)
				INTO vNew;
		END IF;
			
		-- Find IP of person performing the INSERT into table
		SELECT IFNULL(L.USER_IP,'localhost') INTO vIPClient FROM TBL_SYSTEM_LOG L WHERE NEW.MODIFIED_BY = L.USER_ID AND L.TEXT_TRANSACTION = 'LOGIN' ORDER BY L.LOGDATE DESC LIMIT 1;
	   
		-- Define the transaction
		SET vTranx = CONCAT('Update SYSTEM CLIENT TYPE Id:',NEW.ID);

		-- Insert record into log table
		INSERT INTO TBL_SYSTEM_LOG (ID,USER_IP,USER_ID,LOGDATE,TEXT_TRANSACTION) VALUES (0,vIPClient,NEW.MODIFIED_BY,SYSDATE(),vTranx);

		-- Insert the trace 
		INSERT INTO TBL_SYSTEM_TRACE (ID,LOG_ID,TABLE_ORIGIN,RECORD_ID,OLD_RECORD,NEW_RECORD) VALUES (0,LAST_INSERT_ID(),'TBL_SYSTEM_CLIENT_TYPE',NEW.ID,LEFT(CONVERT(vOld USING utf8),4000),LEFT(CONVERT(vNew USING utf8),4000));
		
	END IF;

END; //


-- SYSTEM CONFIGURATION TABLE
DROP TRIGGER IF EXISTS TBL_SYSTEM_CONFIGURATION_UPDATE//
CREATE TRIGGER TBL_SYSTEM_CONFIGURATION_UPDATE
AFTER UPDATE
   ON TBL_SYSTEM_CONFIGURATION FOR EACH ROW

BEGIN

	DECLARE vIPClient VARCHAR(20);
	DECLARE vTranx VARCHAR(2000) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vUser VARCHAR(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vOld VARCHAR(4000);
	DECLARE vNew VARCHAR(4000);
	DECLARE vLogId INTEGER;
	DECLARE vVersion DECIMAL(4,2);
	
	-- Find username of person performing the INSERT into table
	SELECT SUBSTRING_INDEX(USER(), '@', 1) INTO vUser;
	SELECT CAST((CASE WHEN INSTR(@@GLOBAL.version,'-') > 0 THEN LEFT(@@GLOBAL.version, INSTR(@@GLOBAL.version,'-')-1) ELSE @@GLOBAL.version END) AS DECIMAL(4,1)) INTO vVersion;
   
	IF vUser <> 'root' THEN
		-- Verify the version
		IF vVersion >= 5.7 THEN
			-- Generates JSON object for trace
			SELECT JSON_OBJECT('KEY_NAME', OLD.KEY_NAME,
								'KEY_VALUE', OLD.KEY_VALUE,
								'KEY_TYPE', OLD.KEY_TYPE,
								'ENCRYPTED', OLD.ENCRYPTED,
								'LOAD_INIT', OLD.LOAD_INIT,
								'ACCESS_TO', OLD.ACCESS_TO,
								'IS_BLOCKED', OLD.IS_BLOCKED)
				INTO vOld;

			-- Generates JSON object for trace
			SELECT JSON_OBJECT('KEY_NAME', NEW.KEY_NAME,
								'KEY_VALUE', NEW.KEY_VALUE,
								'KEY_TYPE', NEW.KEY_TYPE,
								'ENCRYPTED', NEW.ENCRYPTED,
								'LOAD_INIT', NEW.LOAD_INIT,
								'ACCESS_TO', NEW.ACCESS_TO,
								'IS_BLOCKED', NEW.IS_BLOCKED)
				INTO vNew;
		ELSE
			-- Generates STRING object for trace
			SELECT CONCAT('KEY_NAME:', OLD.KEY_NAME,
							' KEY_VALUE:', OLD.KEY_VALUE,
							' KEY_TYPE:', OLD.KEY_TYPE,
							' ENCRYPTED:', OLD.ENCRYPTED,
							' LOAD_INIT:', OLD.LOAD_INIT,
							' ACCESS_TO:', OLD.ACCESS_TO,
							' IS_BLOCKED:', OLD.IS_BLOCKED)
				INTO vOld;

			-- Generates STRING object for trace
			SELECT CONCAT('KEY_NAME:', NEW.KEY_NAME,
							' KEY_VALUE:', NEW.KEY_VALUE,
							' KEY_TYPE:', NEW.KEY_TYPE,
							' ENCRYPTED:', NEW.ENCRYPTED,
							' LOAD_INIT:', NEW.LOAD_INIT,
							' ACCESS_TO:', NEW.ACCESS_TO,
							' IS_BLOCKED:', NEW.IS_BLOCKED)
				INTO vNew;
		END IF;
			
		-- Find IP of person performing the INSERT into table
		SELECT IFNULL(L.USER_IP,'localhost') INTO vIPClient FROM TBL_SYSTEM_LOG L WHERE NEW.MODIFIED_BY = L.USER_ID AND L.TEXT_TRANSACTION = 'LOGIN' ORDER BY L.LOGDATE DESC LIMIT 1;
	   
		-- Define the transaction
		SET vTranx = CONCAT('Update SYSTEM CONFIGURATION Id:',NEW.ID);

		-- Insert record into log table
		INSERT INTO TBL_SYSTEM_LOG (ID,USER_IP,USER_ID,LOGDATE,TEXT_TRANSACTION) VALUES (0,vIPClient,NEW.MODIFIED_BY,SYSDATE(),vTranx);

		-- Insert the trace 
		INSERT INTO TBL_SYSTEM_TRACE (ID,LOG_ID,TABLE_ORIGIN,RECORD_ID,OLD_RECORD,NEW_RECORD) VALUES (0,LAST_INSERT_ID(),'TBL_SYSTEM_CONFIGURATION',NEW.ID,LEFT(CONVERT(vOld USING utf8),4000),LEFT(CONVERT(vNew USING utf8),4000));
		
	END IF;

END; //


-- SYSTEM COUNTRY TABLE
DROP TRIGGER IF EXISTS TBL_SYSTEM_COUNTRY_UPDATE//
CREATE TRIGGER TBL_SYSTEM_COUNTRY_UPDATE
AFTER UPDATE
   ON TBL_SYSTEM_COUNTRY FOR EACH ROW

BEGIN

	DECLARE vIPClient VARCHAR(20);
	DECLARE vTranx VARCHAR(2000) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vUser VARCHAR(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vOld VARCHAR(4000);
	DECLARE vNew VARCHAR(4000);
	DECLARE vLogId INTEGER;
	DECLARE vVersion DECIMAL(4,2);
	
	-- Find username of person performing the INSERT into table
	SELECT SUBSTRING_INDEX(USER(), '@', 1) INTO vUser;
	SELECT CAST((CASE WHEN INSTR(@@GLOBAL.version,'-') > 0 THEN LEFT(@@GLOBAL.version, INSTR(@@GLOBAL.version,'-')-1) ELSE @@GLOBAL.version END) AS DECIMAL(4,1)) INTO vVersion;
   
	IF vUser <> 'root' THEN
		-- Verify the version
		IF vVersion >= 5.7 THEN
			-- Generates JSON object for trace
			SELECT JSON_OBJECT('COUNTRY', OLD.COUNTRY,
								'FIPS104', OLD.FIPS104,
								'ISO2', OLD.ISO2,
								'ISO3', OLD.ISO3,
								'ISON', OLD.ISON,
								'INTERNET', OLD.INTERNET,
								'CAPITAL', OLD.CAPITAL,
								'MAPREFERENCE', OLD.MAPREFERENCE,
								'NACIONALITYSINGULAR', OLD.NACIONALITYSINGULAR,
								'NACIONALITYPLURAL', OLD.NACIONALITYPLURAL,
								'CURRENCY', OLD.CURRENCY,
								'CURRENCYCODE', OLD.CURRENCYCODE,
								'POPULATION', OLD.POPULATION,
								'TITLE', OLD.TITLE,
								'COMMENT', OLD.COMMENT,
								'IS_BLOCKED', OLD.IS_BLOCKED)
				INTO vOld;

			-- Generates JSON object for trace
			SELECT JSON_OBJECT('COUNTRY', NEW.COUNTRY,
								'FIPS104', NEW.FIPS104,
								'ISO2', NEW.ISO2,
								'ISO3', NEW.ISO3,
								'ISON', NEW.ISON,
								'INTERNET', NEW.INTERNET,
								'CAPITAL', NEW.CAPITAL,
								'MAPREFERENCE', NEW.MAPREFERENCE,
								'NACIONALITYSINGULAR', NEW.NACIONALITYSINGULAR,
								'NACIONALITYPLURAL', NEW.NACIONALITYPLURAL,
								'CURRENCY', NEW.CURRENCY,
								'CURRENCYCODE', NEW.CURRENCYCODE,
								'POPULATION', NEW.POPULATION,
								'TITLE', NEW.TITLE,
								'COMMENT', NEW.COMMENT,
								'IS_BLOCKED', NEW.IS_BLOCKED)
				INTO vNew;
		ELSE
			-- Generates STRING object for trace
			SELECT CONCAT('COUNTRY:', OLD.COUNTRY,
							' FIPS104:', OLD.FIPS104,
							' ISO2:', OLD.ISO2,
							' ISO3:', OLD.ISO3,
							' ISON:', OLD.ISON,
							' INTERNET:', OLD.INTERNET,
							' CAPITAL:', OLD.CAPITAL,
							' MAPREFERENCE:', OLD.MAPREFERENCE,
							' NACIONALITYSINGULAR:', OLD.NACIONALITYSINGULAR,
							' NACIONALITYPLURAL:', OLD.NACIONALITYPLURAL,
							' CURRENCY:', OLD.CURRENCY,
							' CURRENCYCODE:', OLD.CURRENCYCODE,
							' POPULATION:', OLD.POPULATION,
							' TITLE:', OLD.TITLE,
							' COMMENT:', OLD.COMMENT,
							' IS_BLOCKED:', OLD.IS_BLOCKED)
				INTO vOld;

			-- Generates STRING object for trace
			SELECT CONCAT('COUNTRY:', NEW.COUNTRY,
							' FIPS104:', NEW.FIPS104,
							' ISO2:', NEW.ISO2,
							' ISO3:', NEW.ISO3,
							' ISON:', NEW.ISON,
							' INTERNET:', NEW.INTERNET,
							' CAPITAL:', NEW.CAPITAL,
							' MAPREFERENCE:', NEW.MAPREFERENCE,
							' NACIONALITYSINGULAR:', NEW.NACIONALITYSINGULAR,
							' NACIONALITYPLURAL:', NEW.NACIONALITYPLURAL,
							' CURRENCY:', NEW.CURRENCY,
							' CURRENCYCODE:', NEW.CURRENCYCODE,
							' POPULATION:', NEW.POPULATION,
							' TITLE:', NEW.TITLE,
							' COMMENT:', NEW.COMMENT,
							' IS_BLOCKED:', NEW.IS_BLOCKED)
				INTO vNew;
		END IF;
			
		-- Find IP of person performing the INSERT into table
		SELECT IFNULL(L.USER_IP,'localhost') INTO vIPClient FROM TBL_SYSTEM_LOG L WHERE NEW.MODIFIED_BY = L.USER_ID AND L.TEXT_TRANSACTION = 'LOGIN' ORDER BY L.LOGDATE DESC LIMIT 1;
	   
		-- Define the transaction
		SET vTranx = CONCAT('Update SYSTEM COUNTRY Id:',NEW.ID);

		-- Insert record into log table
		INSERT INTO TBL_SYSTEM_LOG (ID,USER_IP,USER_ID,LOGDATE,TEXT_TRANSACTION) VALUES (0,vIPClient,NEW.MODIFIED_BY,SYSDATE(),vTranx);

		-- Insert the trace 
		INSERT INTO TBL_SYSTEM_TRACE (ID,LOG_ID,TABLE_ORIGIN,RECORD_ID,OLD_RECORD,NEW_RECORD) VALUES (0,LAST_INSERT_ID(),'TBL_SYSTEM_COUNTRY',NEW.ID,LEFT(CONVERT(vOld USING utf8),4000),LEFT(CONVERT(vNew USING utf8),4000));
		
	END IF;

END; //


-- SYSTEM DOCUMENT TYPE TABLE
DROP TRIGGER IF EXISTS TBL_SYSTEM_DOCUMENT_TYPE_UPDATE//
CREATE TRIGGER TBL_SYSTEM_DOCUMENT_TYPE_UPDATE
AFTER UPDATE
   ON TBL_SYSTEM_DOCUMENT_TYPE FOR EACH ROW

BEGIN

	DECLARE vIPClient VARCHAR(20);
	DECLARE vTranx VARCHAR(2000) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vUser VARCHAR(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vOld VARCHAR(4000);
	DECLARE vNew VARCHAR(4000);
	DECLARE vLogId INTEGER;
	DECLARE vVersion DECIMAL(4,2);
	
	-- Find username of person performing the INSERT into table
	SELECT SUBSTRING_INDEX(USER(), '@', 1) INTO vUser;
	SELECT CAST((CASE WHEN INSTR(@@GLOBAL.version,'-') > 0 THEN LEFT(@@GLOBAL.version, INSTR(@@GLOBAL.version,'-')-1) ELSE @@GLOBAL.version END) AS DECIMAL(4,1)) INTO vVersion;
   
	IF vUser <> 'root' THEN
		-- Verify the version
		IF vVersion >= 5.7 THEN
			-- Generates JSON object for trace
			SELECT JSON_OBJECT('RESOURCE_NAME', OLD.RESOURCE_NAME,
								'ABBREVIATION', OLD.ABBREVIATION,
								'IS_BLOCKED', OLD.IS_BLOCKED)
				INTO vOld;

			-- Generates JSON object for trace
			SELECT JSON_OBJECT('RESOURCE_NAME', NEW.RESOURCE_NAME,
								'ABBREVIATION', NEW.ABBREVIATION,
								'IS_BLOCKED', NEW.IS_BLOCKED)
				INTO vNew;
		ELSE
			-- Generates STRING object for trace
			SELECT CONCAT('RESOURCE_NAME:', OLD.RESOURCE_NAME,
							' ABBREVIATION:', OLD.ABBREVIATION,
							' IS_BLOCKED:', OLD.IS_BLOCKED)
				INTO vOld;

			-- Generates STRING object for trace
			SELECT CONCAT('RESOURCE_NAME:', NEW.RESOURCE_NAME,
							' ABBREVIATION:', NEW.ABBREVIATION,
							' IS_BLOCKED:', NEW.IS_BLOCKED)
				INTO vNew;
		END IF;
			
		-- Find IP of person performing the INSERT into table
		SELECT IFNULL(L.USER_IP,'localhost') INTO vIPClient FROM TBL_SYSTEM_LOG L WHERE NEW.MODIFIED_BY = L.USER_ID AND L.TEXT_TRANSACTION = 'LOGIN' ORDER BY L.LOGDATE DESC LIMIT 1;
	   
		-- Define the transaction
		SET vTranx = CONCAT('Update SYSTEM DOCUMENT TYPE Id:',NEW.ID);

		-- Insert record into log table
		INSERT INTO TBL_SYSTEM_LOG (ID,USER_IP,USER_ID,LOGDATE,TEXT_TRANSACTION) VALUES (0,vIPClient,NEW.MODIFIED_BY,SYSDATE(),vTranx);

		-- Insert the trace 
		INSERT INTO TBL_SYSTEM_TRACE (ID,LOG_ID,TABLE_ORIGIN,RECORD_ID,OLD_RECORD,NEW_RECORD) VALUES (0,LAST_INSERT_ID(),'TBL_SYSTEM_DOCUMENT_TYPE',NEW.ID,LEFT(CONVERT(vOld USING utf8),4000),LEFT(CONVERT(vNew USING utf8),4000));
		
	END IF;

END; //


-- SYSTEM LANGUAGE TABLE
DROP TRIGGER IF EXISTS TBL_SYSTEM_LANGUAGE_UPDATE//
CREATE TRIGGER TBL_SYSTEM_LANGUAGE_UPDATE
AFTER UPDATE
   ON TBL_SYSTEM_LANGUAGE FOR EACH ROW

BEGIN

	DECLARE vIPClient VARCHAR(20);
	DECLARE vTranx VARCHAR(2000) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vUser VARCHAR(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vOld VARCHAR(4000);
	DECLARE vNew VARCHAR(4000);
	DECLARE vLogId INTEGER;
	DECLARE vVersion DECIMAL(4,2);
	
	-- Find username of person performing the INSERT into table
	SELECT SUBSTRING_INDEX(USER(), '@', 1) INTO vUser;
	SELECT CAST((CASE WHEN INSTR(@@GLOBAL.version,'-') > 0 THEN LEFT(@@GLOBAL.version, INSTR(@@GLOBAL.version,'-')-1) ELSE @@GLOBAL.version END) AS DECIMAL(4,1)) INTO vVersion;
   
	IF vUser <> 'root' THEN
		-- Verify the version
		IF vVersion >= 5.7 THEN
			-- Generates JSON object for trace
			SELECT JSON_OBJECT('LANGUAGE_NAME', OLD.LANGUAGE_NAME,
								'ABBREVATION', OLD.ABBREVATION,
								'IS_BLOCKED', OLD.IS_BLOCKED)
				INTO vOld;

			-- Generates JSON object for trace
			SELECT JSON_OBJECT('LANGUAGE_NAME', NEW.LANGUAGE_NAME,
								'ABBREVATION', NEW.ABBREVATION,
								'IS_BLOCKED', NEW.IS_BLOCKED)
				INTO vNew;
		ELSE
			-- Generates STRING object for trace
			SELECT CONCAT('LANGUAGE_NAME:', OLD.LANGUAGE_NAME,
							' ABBREVATION:', OLD.ABBREVATION,
							' IS_BLOCKED:', OLD.IS_BLOCKED)
				INTO vOld;

			-- Generates STRING object for trace
			SELECT CONCAT('LANGUAGE_NAME:', NEW.LANGUAGE_NAME,
							' ABBREVATION:', NEW.ABBREVATION,
							' IS_BLOCKED:', NEW.IS_BLOCKED)
				INTO vNew;
		END IF;
			
		-- Find IP of person performing the INSERT into table
		SELECT IFNULL(L.USER_IP,'localhost') INTO vIPClient FROM TBL_SYSTEM_LOG L WHERE NEW.MODIFIED_BY = L.USER_ID AND L.TEXT_TRANSACTION = 'LOGIN' ORDER BY L.LOGDATE DESC LIMIT 1;
	   
		-- Define the transaction
		SET vTranx = CONCAT('Update SYSTEM LANGUAGE Id:',NEW.ID);

		-- Insert record into log table
		INSERT INTO TBL_SYSTEM_LOG (ID,USER_IP,USER_ID,LOGDATE,TEXT_TRANSACTION) VALUES (0,vIPClient,NEW.MODIFIED_BY,SYSDATE(),vTranx);

		-- Insert the trace 
		INSERT INTO TBL_SYSTEM_TRACE (ID,LOG_ID,TABLE_ORIGIN,RECORD_ID,OLD_RECORD,NEW_RECORD) VALUES (0,LAST_INSERT_ID(),'TBL_SYSTEM_LANGUAGE',NEW.ID,LEFT(CONVERT(vOld USING utf8),4000),LEFT(CONVERT(vNew USING utf8),4000));
		
	END IF;

END; //


-- SYSTEM MENU TABLE
DROP TRIGGER IF EXISTS TBL_SYSTEM_MENU_UPDATE//
CREATE TRIGGER TBL_SYSTEM_MENU_UPDATE
AFTER UPDATE
   ON TBL_SYSTEM_MENU FOR EACH ROW

BEGIN

	DECLARE vIPClient VARCHAR(20);
	DECLARE vTranx VARCHAR(2000) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vUser VARCHAR(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vOld VARCHAR(4000);
	DECLARE vNew VARCHAR(4000);
	DECLARE vLogId INTEGER;
	DECLARE vVersion DECIMAL(4,2);
	
	-- Find username of person performing the INSERT into table
	SELECT SUBSTRING_INDEX(USER(), '@', 1) INTO vUser;
	SELECT CAST((CASE WHEN INSTR(@@GLOBAL.version,'-') > 0 THEN LEFT(@@GLOBAL.version, INSTR(@@GLOBAL.version,'-')-1) ELSE @@GLOBAL.version END) AS DECIMAL(4,1)) INTO vVersion;
   
	IF vUser <> 'root' THEN
		-- Verify the version
		IF vVersion >= 5.7 THEN
			-- Generates JSON object for trace
			SELECT JSON_OBJECT('RESOURCE_NAME', OLD.RESOURCE_NAME,
								'LINK', OLD.LINK,
								'ICON', OLD.ICON,
								'ACCESS_ID', OLD.ACCESS_ID,
								'PARENT_ID', OLD.PARENT_ID,
								'ORDER_ID', OLD.ORDER_ID,
								'IS_BLOCKED', OLD.IS_BLOCKED)
				INTO vOld;

			-- Generates JSON object for trace
			SELECT JSON_OBJECT('RESOURCE_NAME', NEW.RESOURCE_NAME,
								'LINK', NEW.LINK,
								'ICON', NEW.ICON,
								'ACCESS_ID', NEW.ACCESS_ID,
								'PARENT_ID', NEW.PARENT_ID,
								'ORDER_ID', NEW.ORDER_ID,
								'IS_BLOCKED', NEW.IS_BLOCKED)
				INTO vNew;
		ELSE
			-- Generates STRING object for trace
			SELECT CONCAT('RESOURCE_NAME:', OLD.RESOURCE_NAME,
							' LINK:', OLD.LINK,
							' ICON:', OLD.ICON,
							' ACCESS_ID:', OLD.ACCESS_ID,
							' PARENT_ID:', OLD.PARENT_ID,
							' ORDER_ID:', OLD.ORDER_ID,
							' IS_BLOCKED:', OLD.IS_BLOCKED)
				INTO vOld;

			-- Generates STRING object for trace
			SELECT CONCAT('RESOURCE_NAME:', NEW.RESOURCE_NAME,
							' LINK:', NEW.LINK,
							' ICON:', NEW.ICON,
							' ACCESS_ID:', NEW.ACCESS_ID,
							' PARENT_ID:', NEW.PARENT_ID,
							' ORDER_ID:', NEW.ORDER_ID,
							' IS_BLOCKED:', NEW.IS_BLOCKED)
				INTO vNew;
		END IF;
			
		-- Find IP of person performing the INSERT into table
		SELECT IFNULL(L.USER_IP,'localhost') INTO vIPClient FROM TBL_SYSTEM_LOG L WHERE NEW.MODIFIED_BY = L.USER_ID AND L.TEXT_TRANSACTION = 'LOGIN' ORDER BY L.LOGDATE DESC LIMIT 1;
	   
		-- Define the transaction
		SET vTranx = CONCAT('Update SYSTEM MENU Id:',NEW.ID);

		-- Insert record into log table
		INSERT INTO TBL_SYSTEM_LOG (ID,USER_IP,USER_ID,LOGDATE,TEXT_TRANSACTION) VALUES (0,vIPClient,NEW.MODIFIED_BY,SYSDATE(),vTranx);

		-- Insert the trace 
		INSERT INTO TBL_SYSTEM_TRACE (ID,LOG_ID,TABLE_ORIGIN,RECORD_ID,OLD_RECORD,NEW_RECORD) VALUES (0,LAST_INSERT_ID(),'TBL_SYSTEM_MENU',NEW.ID,LEFT(CONVERT(vOld USING utf8),4000),LEFT(CONVERT(vNew USING utf8),4000));
		
	END IF;

END; //


-- SYSTEM PAYMENT TYPE TABLE
DROP TRIGGER IF EXISTS TBL_SYSTEM_PAYMENT_TYPE_UPDATE//
CREATE TRIGGER TBL_SYSTEM_PAYMENT_TYPE_UPDATE
AFTER UPDATE
   ON TBL_SYSTEM_PAYMENT_TYPE FOR EACH ROW

BEGIN

	DECLARE vIPClient VARCHAR(20);
	DECLARE vTranx VARCHAR(2000) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vUser VARCHAR(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vOld VARCHAR(4000);
	DECLARE vNew VARCHAR(4000);
	DECLARE vLogId INTEGER;
	DECLARE vVersion DECIMAL(4,2);
	
	-- Find username of person performing the INSERT into table
	SELECT SUBSTRING_INDEX(USER(), '@', 1) INTO vUser;
	SELECT CAST((CASE WHEN INSTR(@@GLOBAL.version,'-') > 0 THEN LEFT(@@GLOBAL.version, INSTR(@@GLOBAL.version,'-')-1) ELSE @@GLOBAL.version END) AS DECIMAL(4,1)) INTO vVersion;
   
	IF vUser <> 'root' THEN
		-- Verify the version
		IF vVersion >= 5.7 THEN
			-- Generates JSON object for trace
			SELECT JSON_OBJECT('RESOURCE_NAME', OLD.RESOURCE_NAME,
								'IS_BLOCKED', OLD.IS_BLOCKED)
				INTO vOld;

			-- Generates JSON object for trace
			SELECT JSON_OBJECT('RESOURCE_NAME', NEW.RESOURCE_NAME,
								'IS_BLOCKED', NEW.IS_BLOCKED)
				INTO vNew;
		ELSE
			-- Generates STRING object for trace
			SELECT CONCAT('RESOURCE_NAME:', OLD.RESOURCE_NAME,
							' IS_BLOCKED:', OLD.IS_BLOCKED)
				INTO vOld;

			-- Generates STRING object for trace
			SELECT CONCAT('RESOURCE_NAME:', NEW.RESOURCE_NAME,
							' IS_BLOCKED:', NEW.IS_BLOCKED)
				INTO vNew;
		END IF;
			
		-- Find IP of person performing the INSERT into table
		SELECT IFNULL(L.USER_IP,'localhost') INTO vIPClient FROM TBL_SYSTEM_LOG L WHERE NEW.MODIFIED_BY = L.USER_ID AND L.TEXT_TRANSACTION = 'LOGIN' ORDER BY L.LOGDATE DESC LIMIT 1;
	   
		-- Define the transaction
		SET vTranx = CONCAT('Update SYSTEM PAYMENT TYPE Id:',NEW.ID);

		-- Insert record into log table
		INSERT INTO TBL_SYSTEM_LOG (ID,USER_IP,USER_ID,LOGDATE,TEXT_TRANSACTION) VALUES (0,vIPClient,NEW.MODIFIED_BY,SYSDATE(),vTranx);

		-- Insert the trace 
		INSERT INTO TBL_SYSTEM_TRACE (ID,LOG_ID,TABLE_ORIGIN,RECORD_ID,OLD_RECORD,NEW_RECORD) VALUES (0,LAST_INSERT_ID(),'TBL_SYSTEM_PAYMENT_TYPE',NEW.ID,LEFT(CONVERT(vOld USING utf8),4000),LEFT(CONVERT(vNew USING utf8),4000));
		
	END IF;

END; //


-- SYSTEM RATE TABLE
DROP TRIGGER IF EXISTS TBL_SYSTEM_RATE_UPDATE//
CREATE TRIGGER TBL_SYSTEM_RATE_UPDATE
AFTER UPDATE
   ON TBL_SYSTEM_RATE FOR EACH ROW

BEGIN

	DECLARE vIPClient VARCHAR(20);
	DECLARE vTranx VARCHAR(2000) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vUser VARCHAR(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vOld VARCHAR(4000);
	DECLARE vNew VARCHAR(4000);
	DECLARE vLogId INTEGER;
	DECLARE vVersion DECIMAL(4,2);
	
	-- Find username of person performing the INSERT into table
	SELECT SUBSTRING_INDEX(USER(), '@', 1) INTO vUser;
	SELECT CAST((CASE WHEN INSTR(@@GLOBAL.version,'-') > 0 THEN LEFT(@@GLOBAL.version, INSTR(@@GLOBAL.version,'-')-1) ELSE @@GLOBAL.version END) AS DECIMAL(4,1)) INTO vVersion;
   
	IF vUser <> 'root' THEN
		-- Verify the version
		IF vVersion >= 5.7 THEN
			-- Generates JSON object for trace
			SELECT JSON_OBJECT('DISTANCE_INITIAL', OLD.DISTANCE_INITIAL,
								'DISTANCE_FINAL', OLD.DISTANCE_FINAL,
								'RATE', OLD.RATE,
								'FLASH', OLD.FLASH,
								'ROUND_TRIP', OLD.ROUND_TRIP,
								'FINAL_ROUND_TRIP', OLD.FINAL_ROUND_TRIP,
								'IS_BLOCKED', OLD.IS_BLOCKED)
				INTO vOld;

			-- Generates JSON object for trace
			SELECT JSON_OBJECT('DISTANCE_INITIAL', NEW.DISTANCE_INITIAL,
								'DISTANCE_FINAL', NEW.DISTANCE_FINAL,
								'RATE', NEW.RATE,
								'FLASH', NEW.FLASH,
								'ROUND_TRIP', NEW.ROUND_TRIP,
								'FINAL_ROUND_TRIP', NEW.FINAL_ROUND_TRIP,
								'IS_BLOCKED', NEW.IS_BLOCKED)
				INTO vNew;
		ELSE
			-- Generates STRING object for trace
			SELECT CONCAT('DISTANCE_INITIAL:', OLD.DISTANCE_INITIAL,
							' DISTANCE_FINAL:', OLD.DISTANCE_FINAL,
							' RATE:', OLD.RATE,
							' FLASH:', OLD.FLASH,
							' ROUND_TRIP:', OLD.ROUND_TRIP,
							' FINAL_ROUND_TRIP:', OLD.FINAL_ROUND_TRIP,
							' IS_BLOCKED:', OLD.IS_BLOCKED)
				INTO vOld;

			-- Generates STRING object for trace
			SELECT CONCAT('DISTANCE_INITIAL:', NEW.DISTANCE_INITIAL,
							' DISTANCE_FINAL:', NEW.DISTANCE_FINAL,
							' RATE:', NEW.RATE,
							' FLASH:', NEW.FLASH,
							' ROUND_TRIP:', NEW.ROUND_TRIP,
							' FINAL_ROUND_TRIP:', NEW.FINAL_ROUND_TRIP,
							' IS_BLOCKED:', NEW.IS_BLOCKED)
				INTO vNew;
		END IF;
			
		-- Find IP of person performing the INSERT into table
		SELECT IFNULL(L.USER_IP,'localhost') INTO vIPClient FROM TBL_SYSTEM_LOG L WHERE NEW.MODIFIED_BY = L.USER_ID AND L.TEXT_TRANSACTION = 'LOGIN' ORDER BY L.LOGDATE DESC LIMIT 1;
	   
		-- Define the transaction
		SET vTranx = CONCAT('Update SYSTEM RATE Id:',NEW.ID);

		-- Insert record into log table
		INSERT INTO TBL_SYSTEM_LOG (ID,USER_IP,USER_ID,LOGDATE,TEXT_TRANSACTION) VALUES (0,vIPClient,NEW.MODIFIED_BY,SYSDATE(),vTranx);

		-- Insert the trace 
		INSERT INTO TBL_SYSTEM_TRACE (ID,LOG_ID,TABLE_ORIGIN,RECORD_ID,OLD_RECORD,NEW_RECORD) VALUES (0,LAST_INSERT_ID(),'TBL_SYSTEM_RATE',NEW.ID,LEFT(CONVERT(vOld USING utf8),4000),LEFT(CONVERT(vNew USING utf8),4000));
		
	END IF;

END; //


-- SYSTEM RESOURCE TABLE
DROP TRIGGER IF EXISTS TBL_SYSTEM_RESOURCE_UPDATE//
CREATE TRIGGER TBL_SYSTEM_RESOURCE_UPDATE
AFTER UPDATE
   ON TBL_SYSTEM_RESOURCE FOR EACH ROW

BEGIN

	DECLARE vIPClient VARCHAR(20);
	DECLARE vTranx VARCHAR(2000) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vUser VARCHAR(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vOld VARCHAR(4000);
	DECLARE vNew VARCHAR(4000);
	DECLARE vLogId INTEGER;
	DECLARE vVersion DECIMAL(4,2);
	
	-- Find username of person performing the INSERT into table
	SELECT SUBSTRING_INDEX(USER(), '@', 1) INTO vUser;
	SELECT CAST((CASE WHEN INSTR(@@GLOBAL.version,'-') > 0 THEN LEFT(@@GLOBAL.version, INSTR(@@GLOBAL.version,'-')-1) ELSE @@GLOBAL.version END) AS DECIMAL(4,1)) INTO vVersion;
   
	IF vUser <> 'root' THEN
		-- Verify the version
		IF vVersion >= 5.7 THEN
			-- GeneRESOURCEs JSON object for trace
			SELECT JSON_OBJECT('RESOURCE_NAME', OLD.RESOURCE_NAME,
								'RESOURCE_TEXT', OLD.RESOURCE_TEXT,
								'LANGUAGE_ID', OLD.LANGUAGE_ID,
								'IS_SYSTEM', OLD.IS_SYSTEM,
								'IS_BLOCKED', OLD.IS_BLOCKED)
				INTO vOld;

			-- GeneRESOURCEs JSON object for trace
			SELECT JSON_OBJECT('RESOURCE_NAME', NEW.RESOURCE_NAME,
								'RESOURCE_TEXT', NEW.RESOURCE_TEXT,
								'LANGUAGE_ID', NEW.LANGUAGE_ID,
								'IS_SYSTEM', NEW.IS_SYSTEM,
								'IS_BLOCKED', NEW.IS_BLOCKED)
				INTO vNew;
		ELSE
			-- GeneRESOURCEs STRING object for trace
			SELECT CONCAT('RESOURCE_NAME:', OLD.RESOURCE_NAME,
							' RESOURCE_TEXT:', OLD.RESOURCE_TEXT,
							' LANGUAGE_ID:', OLD.LANGUAGE_ID,
							' IS_SYSTEM:', OLD.IS_SYSTEM,
							' IS_BLOCKED:', OLD.IS_BLOCKED)
				INTO vOld;

			-- GeneRESOURCEs STRING object for trace
			SELECT CONCAT('RESOURCE_NAME:', NEW.RESOURCE_NAME,
							' RESOURCE_TEXT:', NEW.RESOURCE_TEXT,
							' LANGUAGE_ID:', NEW.LANGUAGE_ID,
							' IS_SYSTEM:', NEW.IS_SYSTEM,
							' IS_BLOCKED:', NEW.IS_BLOCKED)
				INTO vNew;
		END IF;
			
		-- Find IP of person performing the INSERT into table
		SELECT IFNULL(L.USER_IP,'localhost') INTO vIPClient FROM TBL_SYSTEM_LOG L WHERE NEW.MODIFIED_BY = L.USER_ID AND L.TEXT_TRANSACTION = 'LOGIN' ORDER BY L.LOGDATE DESC LIMIT 1;
	   
		-- Define the transaction
		SET vTranx = CONCAT('Update SYSTEM RESOURCE Id:',NEW.ID);

		-- Insert record into log table
		INSERT INTO TBL_SYSTEM_LOG (ID,USER_IP,USER_ID,LOGDATE,TEXT_TRANSACTION) VALUES (0,vIPClient,NEW.MODIFIED_BY,SYSDATE(),vTranx);

		-- Insert the trace 
		INSERT INTO TBL_SYSTEM_TRACE (ID,LOG_ID,TABLE_ORIGIN,RECORD_ID,OLD_RECORD,NEW_RECORD) VALUES (0,LAST_INSERT_ID(),'TBL_SYSTEM_RESOURCE',NEW.ID,LEFT(CONVERT(vOld USING utf8),4000),LEFT(CONVERT(vNew USING utf8),4000));
		
	END IF;

END; //


-- SYSTEM USER TABLE
DROP TRIGGER IF EXISTS TBL_SYSTEM_USER_UPDATE//
CREATE TRIGGER TBL_SYSTEM_USER_UPDATE
AFTER UPDATE
   ON TBL_SYSTEM_USER FOR EACH ROW

BEGIN

	DECLARE vIPClient VARCHAR(20);
	DECLARE vTranx VARCHAR(2000) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vUser VARCHAR(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vOld VARCHAR(4000);
	DECLARE vNew VARCHAR(4000);
	DECLARE vLogId INTEGER;
	DECLARE vVersion DECIMAL(4,2);
	
	-- Find username of person performing the INSERT into table
	SELECT SUBSTRING_INDEX(USER(), '@', 1) INTO vUser;
	SELECT CAST((CASE WHEN INSTR(@@GLOBAL.version,'-') > 0 THEN LEFT(@@GLOBAL.version, INSTR(@@GLOBAL.version,'-')-1) ELSE @@GLOBAL.version END) AS DECIMAL(4,1)) INTO vVersion;
   
	IF vUser <> 'root' THEN
		-- Verify the version
		IF vVersion >= 5.7 THEN
			-- Generates JSON object for trace
			SELECT JSON_OBJECT('THE_PASSWORD', OLD.THE_PASSWORD, 
								'FIRST_NAME', OLD.FIRST_NAME,
								'LAST_NAME', OLD.LAST_NAME,
								'IDENTIFICATION', OLD.IDENTIFICATION,
								'EMAIL', OLD.EMAIL,
								'ADDRESS', OLD.ADDRESS,
								'PHONE', OLD.PHONE,
								'CELLPHONE', OLD.CELLPHONE,
								'CITY_ID', OLD.CITY_ID,
								'LATITUDE', OLD.LATITUDE,
								'LONGITUDE', OLD.LONGITUDE,
								'FACEBOOK_USER', OLD.FACEBOOK_USER,
								'GOOGLE_USER', OLD.GOOGLE_USER,
								'ACCESS_ID', OLD.ACCESS_ID,
								'REFERENCE', OLD.REFERENCE,
								'CHANGE_PASSWORD', OLD.CHANGE_PASSWORD,
								'IS_BLOCKED', OLD.IS_BLOCKED)
				INTO vOld;

			-- Generates JSON object for trace
			SELECT JSON_OBJECT('THE_PASSWORD', NEW.THE_PASSWORD, 
								'FIRST_NAME', NEW.FIRST_NAME,
								'LAST_NAME', NEW.LAST_NAME,
								'IDENTIFICATION', NEW.IDENTIFICATION,
								'EMAIL', NEW.EMAIL,
								'ADDRESS', NEW.ADDRESS,
								'PHONE', NEW.PHONE,
								'CELLPHONE', NEW.CELLPHONE,
								'CITY_ID', NEW.CITY_ID,
								'LATITUDE', NEW.LATITUDE,
								'LONGITUDE', NEW.LONGITUDE,
								'FACEBOOK_USER', NEW.FACEBOOK_USER,
								'GOOGLE_USER', NEW.GOOGLE_USER,
								'ACCESS_ID', NEW.ACCESS_ID,
								'REFERENCE', NEW.REFERENCE,
								'CHANGE_PASSWORD', NEW.CHANGE_PASSWORD,
								'IS_BLOCKED', NEW.IS_BLOCKED)
				INTO vNew;
		ELSE
			-- Generates STRING object for trace
			SELECT CONCAT('THE_PASSWORD:', OLD.THE_PASSWORD, 
							' FIRST_NAME:', OLD.FIRST_NAME,
							' LAST_NAME:', OLD.LAST_NAME,
							' IDENTIFICATION:', OLD.IDENTIFICATION,
							' EMAIL:', OLD.EMAIL,
							' ADDRESS:', OLD.ADDRESS,
							' PHONE:', OLD.PHONE,
							' CELLPHONE:', OLD.CELLPHONE,
							' CITY_ID:', OLD.CITY_ID,
							' LATITUDE:', OLD.LATITUDE,
							' LONGITUDE:', OLD.LONGITUDE,
							' FACEBOOK_USER:', OLD.FACEBOOK_USER,
							' GOOGLE_USER:', OLD.GOOGLE_USER,
							' ACCESS_ID:', OLD.ACCESS_ID,
							' REFERENCE:', OLD.REFERENCE,
							' CHANGE_PASSWORD:', OLD.CHANGE_PASSWORD,
							' IS_BLOCKED:', OLD.IS_BLOCKED)
				INTO vOld;

			-- Generates STRING object for trace
			SELECT CONCAT('THE_PASSWORD:', NEW.THE_PASSWORD, 
							' FIRST_NAME:', NEW.FIRST_NAME,
							' LAST_NAME:', NEW.LAST_NAME,
							' IDENTIFICATION:', NEW.IDENTIFICATION,
							' EMAIL:', NEW.EMAIL,
							' ADDRESS:', NEW.ADDRESS,
							' PHONE:', NEW.PHONE,
							' CELLPHONE:', NEW.CELLPHONE,
							' CITY_ID:', NEW.CITY_ID,
							' LATITUDE:', NEW.LATITUDE,
							' LONGITUDE:', NEW.LONGITUDE,
							' FACEBOOK_USER:', NEW.FACEBOOK_USER,
							' GOOGLE_USER:', NEW.GOOGLE_USER,
							' ACCESS_ID:', NEW.ACCESS_ID,
							' REFERENCE:', NEW.REFERENCE,
							' CHANGE_PASSWORD:', NEW.CHANGE_PASSWORD,
							' IS_BLOCKED:', NEW.IS_BLOCKED)
				INTO vNew;
		END IF;
			
		-- Find IP of person performing the INSERT into table
		SELECT IFNULL(L.USER_IP,'localhost') INTO vIPClient FROM TBL_SYSTEM_LOG L WHERE NEW.MODIFIED_BY = L.USER_ID AND L.TEXT_TRANSACTION = 'LOGIN' ORDER BY L.LOGDATE DESC LIMIT 1;
	   
		-- Define the transaction
		SET vTranx = CONCAT('Update SYSTEM_USER Id:',NEW.ID);

		-- Insert record into log table
		INSERT INTO TBL_SYSTEM_LOG (ID,USER_IP,USER_ID,LOGDATE,TEXT_TRANSACTION) VALUES (0,vIPClient,NEW.MODIFIED_BY,SYSDATE(),vTranx);

		-- Insert the trace 
		INSERT INTO TBL_SYSTEM_TRACE (ID,LOG_ID,TABLE_ORIGIN,RECORD_ID,OLD_RECORD,NEW_RECORD) VALUES (0,LAST_INSERT_ID(),'TBL_SYSTEM_USER',NEW.ID,LEFT(CONVERT(vOld USING utf8),4000),LEFT(CONVERT(vNew USING utf8),4000));
		
	END IF;

END; //


-- SYSTEM VEHICLE TYPE TABLE
DROP TRIGGER IF EXISTS TBL_SYSTEM_VEHICLE_TYPE_UPDATE//
CREATE TRIGGER TBL_SYSTEM_VEHICLE_TYPE_UPDATE
AFTER UPDATE
   ON TBL_SYSTEM_VEHICLE_TYPE FOR EACH ROW

BEGIN

	DECLARE vIPClient VARCHAR(20);
	DECLARE vTranx VARCHAR(2000) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vUser VARCHAR(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vOld VARCHAR(4000);
	DECLARE vNew VARCHAR(4000);
	DECLARE vLogId INTEGER;
	DECLARE vVersion DECIMAL(4,2);
	
	-- Find username of person performing the INSERT into table
	SELECT SUBSTRING_INDEX(USER(), '@', 1) INTO vUser;
	SELECT CAST((CASE WHEN INSTR(@@GLOBAL.version,'-') > 0 THEN LEFT(@@GLOBAL.version, INSTR(@@GLOBAL.version,'-')-1) ELSE @@GLOBAL.version END) AS DECIMAL(4,1)) INTO vVersion;
   
	IF vUser <> 'root' THEN
		-- Verify the version
		IF vVersion >= 5.7 THEN
			-- GeneVEHICLE_TYPEs JSON object for trace
			SELECT JSON_OBJECT('RESOURCE_NAME', OLD.RESOURCE_NAME,
								'IS_BLOCKED', OLD.IS_BLOCKED)
				INTO vOld;

			-- GeneVEHICLE_TYPEs JSON object for trace
			SELECT JSON_OBJECT('RESOURCE_NAME', NEW.RESOURCE_NAME,
								'IS_BLOCKED', NEW.IS_BLOCKED)
				INTO vNew;
		ELSE
			-- GeneVEHICLE_TYPEs STRING object for trace
			SELECT CONCAT('RESOURCE_NAME:', OLD.RESOURCE_NAME,
							' IS_BLOCKED:', OLD.IS_BLOCKED)
				INTO vOld;

			-- GeneVEHICLE_TYPEs STRING object for trace
			SELECT CONCAT('RESOURCE_NAME:', NEW.RESOURCE_NAME,
							' IS_BLOCKED:', NEW.IS_BLOCKED)
				INTO vNew;
		END IF;
			
		-- Find IP of person performing the INSERT into table
		SELECT IFNULL(L.USER_IP,'localhost') INTO vIPClient FROM TBL_SYSTEM_LOG L WHERE NEW.MODIFIED_BY = L.USER_ID AND L.TEXT_TRANSACTION = 'LOGIN' ORDER BY L.LOGDATE DESC LIMIT 1;
	   
		-- Define the transaction
		SET vTranx = CONCAT('Update SYSTEM VEHICLE TYPE Id:',NEW.ID);

		-- Insert record into log table
		INSERT INTO TBL_SYSTEM_LOG (ID,USER_IP,USER_ID,LOGDATE,TEXT_TRANSACTION) VALUES (0,vIPClient,NEW.MODIFIED_BY,SYSDATE(),vTranx);

		-- Insert the trace 
		INSERT INTO TBL_SYSTEM_TRACE (ID,LOG_ID,TABLE_ORIGIN,RECORD_ID,OLD_RECORD,NEW_RECORD) VALUES (0,LAST_INSERT_ID(),'TBL_SYSTEM_VEHICLE_TYPE',NEW.ID,LEFT(CONVERT(vOld USING utf8),4000),LEFT(CONVERT(vNew USING utf8),4000));
		
	END IF;

END; //


-- SYSTEM ZONE TABLE
DROP TRIGGER IF EXISTS TBL_SYSTEM_ZONE_UPDATE//
CREATE TRIGGER TBL_SYSTEM_ZONE_UPDATE
AFTER UPDATE
   ON TBL_SYSTEM_ZONE FOR EACH ROW

BEGIN

	DECLARE vIPClient VARCHAR(20);
	DECLARE vTranx VARCHAR(2000) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vUser VARCHAR(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vOld VARCHAR(4000);
	DECLARE vNew VARCHAR(4000);
	DECLARE vLogId INTEGER;
	DECLARE vVersion DECIMAL(4,2);
	
	-- Find username of person performing the INSERT into table
	SELECT SUBSTRING_INDEX(USER(), '@', 1) INTO vUser;
	SELECT CAST((CASE WHEN INSTR(@@GLOBAL.version,'-') > 0 THEN LEFT(@@GLOBAL.version, INSTR(@@GLOBAL.version,'-')-1) ELSE @@GLOBAL.version END) AS DECIMAL(4,1)) INTO vVersion;
   
	IF vUser <> 'root' THEN
		-- Verify the version
		IF vVersion >= 5.7 THEN
			-- GeneZONEs JSON object for trace
			SELECT JSON_OBJECT('PARENT_ZONE', OLD.PARENT_ZONE,
								'ZONE_NAME', OLD.ZONE_NAME,
								'CITY_ID', OLD.CITY_ID,
								'LATITUDE_FROM', OLD.LATITUDE_FROM,
								'LONGITUDE_FROM', OLD.LONGITUDE_FROM,
								'STREET_TYPE', OLD.STREET_TYPE,
								'FROM_STREET', OLD.FROM_STREET,
								'ADDON_FROM_STREET', OLD.ADDON_FROM_STREET,
								'TO_STREET', OLD.TO_STREET,
								'ADDON_TO_STREET', OLD.ADDON_TO_STREET,
								'LATITUDE_TO', OLD.LATITUDE_TO,
								'LONGITUDE_TO', OLD.LONGITUDE_TO,
								'AVENUE_TYPE', OLD.AVENUE_TYPE,
								'FROM_AVENUE', OLD.FROM_AVENUE,
								'ADDON_FROM_AVENUE', OLD.ADDON_FROM_AVENUE,
								'TO_AVENUE', OLD.TO_AVENUE,
								'ADDON_TO_AVENUE', OLD.ADDON_TO_AVENUE,
								'IS_BLOCKED', OLD.IS_BLOCKED)
				INTO vOld;

			-- GeneZONEs JSON object for trace
			SELECT JSON_OBJECT('PARENT_ZONE', NEW.PARENT_ZONE,
								'ZONE_NAME', NEW.ZONE_NAME,
								'CITY_ID', NEW.CITY_ID,
								'LATITUDE_FROM', NEW.LATITUDE_FROM,
								'LONGITUDE_FROM', NEW.LONGITUDE_FROM,
								'STREET_TYPE', NEW.STREET_TYPE,
								'FROM_STREET', NEW.FROM_STREET,
								'ADDON_FROM_STREET', NEW.ADDON_FROM_STREET,
								'TO_STREET', NEW.TO_STREET,
								'ADDON_TO_STREET', NEW.ADDON_TO_STREET,
								'LATITUDE_TO', NEW.LATITUDE_TO,
								'LONGITUDE_TO', NEW.LONGITUDE_TO,
								'AVENUE_TYPE', NEW.AVENUE_TYPE,
								'FROM_AVENUE', NEW.FROM_AVENUE,
								'ADDON_FROM_AVENUE', NEW.ADDON_FROM_AVENUE,
								'TO_AVENUE', NEW.TO_AVENUE,
								'ADDON_TO_AVENUE', NEW.ADDON_TO_AVENUE,
								'IS_BLOCKED', NEW.IS_BLOCKED)
				INTO vNew;
		ELSE
			-- GeneZONEs STRING object for trace
			SELECT CONCAT(' PARENT_ZONE:', OLD.PARENT_ZONE,
							' ZONE_NAME:', OLD.ZONE_NAME,
							' CITY_ID:', OLD.CITY_ID,
							' LATITUDE_FROM:', OLD.LATITUDE_FROM,
							' LONGITUDE_FROM:', OLD.LONGITUDE_FROM,
							' STREET_TYPE:', OLD.STREET_TYPE,
							' FROM_STREET:', OLD.FROM_STREET,
							' ADDON_FROM_STREET:', OLD.ADDON_FROM_STREET,
							' TO_STREET:', OLD.TO_STREET,
							' ADDON_TO_STREET:', OLD.ADDON_TO_STREET,
							' LATITUDE_TO:', OLD.LATITUDE_TO,
							' LONGITUDE_TO:', OLD.LONGITUDE_TO,
							' AVENUE_TYPE:', OLD.AVENUE_TYPE,
							' FROM_AVENUE:', OLD.FROM_AVENUE,
							' ADDON_FROM_AVENUE:', OLD.ADDON_FROM_AVENUE,
							' TO_AVENUE:', OLD.TO_AVENUE,
							' ADDON_TO_AVENUE:', OLD.ADDON_TO_AVENUE,
							' IS_BLOCKED:', OLD.IS_BLOCKED)
				INTO vOld;

			-- GeneZONEs STRING object for trace
			SELECT CONCAT('PARENT_ZONE:', NEW.PARENT_ZONE,
							' ZONE_NAME:', NEW.ZONE_NAME,
							' CITY_ID:', NEW.CITY_ID,
							' LATITUDE_FROM:', NEW.LATITUDE_FROM,
							' LONGITUDE_FROM:', NEW.LONGITUDE_FROM,
							' STREET_TYPE:', NEW.STREET_TYPE,
							' FROM_STREET:', NEW.FROM_STREET,
							' ADDON_FROM_STREET:', NEW.ADDON_FROM_STREET,
							' TO_STREET:', NEW.TO_STREET,
							' ADDON_TO_STREET:', NEW.ADDON_TO_STREET,
							' LATITUDE_TO:', NEW.LATITUDE_TO,
							' LONGITUDE_TO:', NEW.LONGITUDE_TO,
							' AVENUE_TYPE:', NEW.AVENUE_TYPE,
							' FROM_AVENUE:', NEW.FROM_AVENUE,
							' ADDON_FROM_AVENUE:', NEW.ADDON_FROM_AVENUE,
							' TO_AVENUE:', NEW.TO_AVENUE,
							' ADDON_TO_AVENUE:', NEW.ADDON_TO_AVENUE,
							' IS_BLOCKED:', NEW.IS_BLOCKED)
				INTO vNew;
		END IF;
			
		-- Find IP of person performing the INSERT into table
		SELECT IFNULL(L.USER_IP,'localhost') INTO vIPClient FROM TBL_SYSTEM_LOG L WHERE NEW.MODIFIED_BY = L.USER_ID AND L.TEXT_TRANSACTION = 'LOGIN' ORDER BY L.LOGDATE DESC LIMIT 1;
	   
		-- Define the transaction
		SET vTranx = CONCAT('Update SYSTEM ZONE Id:',NEW.ID);

		-- Insert record into log table
		INSERT INTO TBL_SYSTEM_LOG (ID,USER_IP,USER_ID,LOGDATE,TEXT_TRANSACTION) VALUES (0,vIPClient,NEW.MODIFIED_BY,SYSDATE(),vTranx);

		-- Insert the trace 
		INSERT INTO TBL_SYSTEM_TRACE (ID,LOG_ID,TABLE_ORIGIN,RECORD_ID,OLD_RECORD,NEW_RECORD) VALUES (0,LAST_INSERT_ID(),'TBL_SYSTEM_ZONE',NEW.ID,LEFT(CONVERT(vOld USING utf8),4000),LEFT(CONVERT(vNew USING utf8),4000));
		
	END IF;

END; //


-- VEHICLE TABLE
DROP TRIGGER IF EXISTS TBL_VEHICLE_UPDATE//
CREATE TRIGGER TBL_VEHICLE_UPDATE
AFTER UPDATE
   ON TBL_VEHICLE FOR EACH ROW

BEGIN

	DECLARE vIPClient VARCHAR(20);
	DECLARE vTranx VARCHAR(2000) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vUser VARCHAR(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	DECLARE vOld VARCHAR(4000);
	DECLARE vNew VARCHAR(4000);
	DECLARE vLogId INTEGER;
	DECLARE vVersion DECIMAL(4,2);
	
	-- Find username of person performing the INSERT into table
	SELECT SUBSTRING_INDEX(USER(), '@', 1) INTO vUser;
	SELECT CAST((CASE WHEN INSTR(@@GLOBAL.version,'-') > 0 THEN LEFT(@@GLOBAL.version, INSTR(@@GLOBAL.version,'-')-1) ELSE @@GLOBAL.version END) AS DECIMAL(4,1)) INTO vVersion;
   
	IF vUser <> 'root' THEN
		-- Verify the version
		IF vVersion >= 5.7 THEN
			-- GeneZONEs JSON object for trace
			SELECT JSON_OBJECT('EMPLOYEE_ID', OLD.EMPLOYEE_ID,
								'VEHICLE_TYPE_ID', OLD.VEHICLE_TYPE_ID,
								'PLATE', OLD.PLATE,
								'BRAND', OLD.BRAND,
								'MODEL', OLD.MODEL,
								'YEAR', OLD.YEAR,
								'SERIAL_NUMBER', OLD.SERIAL_NUMBER,
								'INSURANCE_NUMBER', OLD.INSURANCE_NUMBER,
								'INSURANCE_COMPANY', OLD.INSURANCE_COMPANY,
								'EXPIRATION_DATE', OLD.EXPIRATION_DATE,
								'IS_BLOCKED', OLD.IS_BLOCKED)
				INTO vOld;

			-- GeneZONEs JSON object for trace
			SELECT JSON_OBJECT('EMPLOYEE_ID', NEW.EMPLOYEE_ID,
								'VEHICLE_TYPE_ID', NEW.VEHICLE_TYPE_ID,
								'PLATE', NEW.PLATE,
								'BRAND', NEW.BRAND,
								'MODEL', NEW.MODEL,
								'YEAR', NEW.YEAR,
								'SERIAL_NUMBER', NEW.SERIAL_NUMBER,
								'INSURANCE_NUMBER', NEW.INSURANCE_NUMBER,
								'INSURANCE_COMPANY', NEW.INSURANCE_COMPANY,
								'EXPIRATION_DATE', NEW.EXPIRATION_DATE,
								'IS_BLOCKED', NEW.IS_BLOCKED)
				INTO vNew;
		ELSE
			-- GeneZONEs STRING object for trace
			SELECT CONCAT('EMPLOYEE_ID:', OLD.EMPLOYEE_ID,
							' VEHICLE_TYPE_ID:', OLD.VEHICLE_TYPE_ID,
							' PLATE:', OLD.PLATE,
							' BRAND:', OLD.BRAND,
							' MODEL:', OLD.MODEL,
							' YEAR:', OLD.YEAR,
							' SERIAL_NUMBER:', OLD.SERIAL_NUMBER,
							' INSURANCE_NUMBER:', OLD.INSURANCE_NUMBER,
							' INSURANCE_COMPANY:', OLD.INSURANCE_COMPANY,
							' EXPIRATION_DATE:', OLD.EXPIRATION_DATE,
							' IS_BLOCKED:', OLD.IS_BLOCKED)
				INTO vOld;

			-- GeneZONEs STRING object for trace
			SELECT CONCAT('EMPLOYEE_ID:', NEW.EMPLOYEE_ID,
							' VEHICLE_TYPE_ID:', NEW.VEHICLE_TYPE_ID,
							' PLATE:', NEW.PLATE,
							' BRAND:', NEW.BRAND,
							' MODEL:', NEW.MODEL,
							' YEAR:', NEW.YEAR,
							' SERIAL_NUMBER:', NEW.SERIAL_NUMBER,
							' INSURANCE_NUMBER:', NEW.INSURANCE_NUMBER,
							' INSURANCE_COMPANY:', NEW.INSURANCE_COMPANY,
							' EXPIRATION_DATE:', NEW.EXPIRATION_DATE,
							' IS_BLOCKED:', NEW.IS_BLOCKED)
				INTO vNew;
		END IF;
			
		-- Find IP of person performing the INSERT into table
		SELECT IFNULL(L.USER_IP,'localhost') INTO vIPClient FROM TBL_SYSTEM_LOG L WHERE NEW.MODIFIED_BY = L.USER_ID AND L.TEXT_TRANSACTION = 'LOGIN' ORDER BY L.LOGDATE DESC LIMIT 1;
	   
		-- Define the transaction
		SET vTranx = CONCAT('Update VEHICLE Id:',NEW.ID);

		-- Insert record into log table
		INSERT INTO TBL_SYSTEM_LOG (ID,USER_IP,USER_ID,LOGDATE,TEXT_TRANSACTION) VALUES (0,vIPClient,NEW.MODIFIED_BY,SYSDATE(),vTranx);

		-- Insert the trace 
		INSERT INTO TBL_SYSTEM_TRACE (ID,LOG_ID,TABLE_ORIGIN,RECORD_ID,OLD_RECORD,NEW_RECORD) VALUES (0,LAST_INSERT_ID(),'TBL_VEHICLE',NEW.ID,LEFT(CONVERT(vOld USING utf8),4000),LEFT(CONVERT(vNew USING utf8),4000));
		
	END IF;

END; //



DELIMITER ;