-- SELECTS IT */
USE VTAPPCORP;

-- AREA TYPES
DROP VIEW IF EXISTS VIE_AREA_TYPES_SUMMARY;
CREATE VIEW VIE_AREA_TYPES_SUMMARY AS
SELECT M.ID, M.AREA_TYPE_NAME, M.PARENT_ID, P.AREA_TYPE_NAME PARENT_AREA_NAME, M.REGISTERED_ON, M.REGISTERED_BY, M.MODIFIED_ON, M.MODIFIED_BY, M.IS_BLOCKED
    FROM TBL_AREA_TYPE M
      LEFT JOIN TBL_AREA_TYPE P ON (M.PARENT_ID = P.ID)
    WHERE M.IS_BLOCKED = FALSE;


-- AREAS VIEW */
DROP VIEW IF EXISTS VIE_AREA_SUMMARY;
CREATE VIEW VIE_AREA_SUMMARY AS
  SELECT A.ID AREA_ID, A.AREA_NAME, A.TITLE, A.COSTCENTER, A.REGISTERED_ON, A.REGISTERED_BY, A.MODIFIED_ON, A.MODIFIED_BY, A.IS_BLOCKED, 
		C.ID CLIENT_ID, C.CLIENT_NAME, C.CITY_ID, C.IDENTIFICATION, A.AREA_TYPE_ID, CONCAT(T.AREA_TYPE_NAME,' ',T.PARENT_AREA_NAME) PARENT_AREA_NAME,
		P.ID PARTNER_ID, P.PARTNER_NAME, A.PARTNER
    FROM TBL_AREA A
		INNER JOIN TBL_CLIENT C ON (C.ID = A.CLIENT_ID)
		LEFT JOIN VIE_AREA_TYPES_SUMMARY T ON (A.AREA_TYPE_ID = T.ID)
		LEFT JOIN TBL_PARTNER_CLIENT PC ON (A.CLIENT_ID = PC.CLIENT_ID)
		LEFT JOIN TBL_PARTNER P ON (PC.PARTNER_ID = P.ID)
    ORDER BY A.REGISTERED_ON DESC;


-- CITIES VIEW */
DROP VIEW IF EXISTS VIE_CITIES_SUMMARY;
CREATE VIEW VIE_CITIES_SUMMARY AS
SELECT C.ID, C.COUNTRY, C.CAPITAL, C.CURRENCY, C.CURRENCYCODE, T.ID CITY_ID, T.CITY_NAME
    FROM TBL_SYSTEM_COUNTRY AS C
  		LEFT JOIN TBL_SYSTEM_CITY T ON (C.ID = T.COUNTRY_ID)
    ORDER BY C.COUNTRY;


-- DIRECT CHAT VIEW */
DROP VIEW IF EXISTS VIE_DIRECT_CHAT_SUMMARY;
CREATE VIEW VIE_DIRECT_CHAT_SUMMARY AS
SELECT D.ID, D.SENDER, D.DESTINY, D.MESSAGE, D.PRIORITY, D.REGISTERED_ON,
        CONCAT(SUBSTRING_INDEX(U.FIRST_NAME,' ',1),' ',SUBSTRING_INDEX(U.LAST_NAME,' ',1)) COLLATE utf8_unicode_ci AS USER_NAME,
		D.READED
  FROM TBL_DIRECT_CHAT D
    LEFT JOIN TBL_SYSTEM_USER U ON (U.ID COLLATE utf8_unicode_ci = D.SENDER)
  ORDER BY D.REGISTERED_ON DESC;


-- LOG VIEW */
DROP VIEW IF EXISTS VIE_LOG_SUMMARY;
CREATE VIEW VIE_LOG_SUMMARY AS
SELECT L.ID, L.USER_ID, DATE(L.LOGDATE) DATE, TIME(L.LOGDATE) TIME, L.TEXT_TRANSACTION,
        CASE
            WHEN L.TEXT_TRANSACTION = 'LOGIN' THEN 'fa fa-sign-in bg-info'
            WHEN L.TEXT_TRANSACTION = 'AUTO-LOGOFF' THEN 'fa fa-hourglass bg-warning'
            WHEN L.TEXT_TRANSACTION = 'SESSION END' THEN 'fa fa-sign-out bg-danger'
			WHEN L.TEXT_TRANSACTION = 'REMEMBER PASSWORD' THEN 'fa fa-key bg-success'
            WHEN LEFT(L.TEXT_TRANSACTION,3) = 'Add' THEN 'fa fa-plus-square bg-success'
            WHEN LEFT(L.TEXT_TRANSACTION,6) = 'Update' THEN 'fa fa-pencil-square-o bg-primary'
			WHEN LEFT(L.TEXT_TRANSACTION,6) = 'Change' THEN 'fa fa-camera bg-purple'
			ELSE 'fa fa-exclamation-triangle'
        END AS ICON,
		T.TABLE_ORIGIN, T.RECORD_ID, T.OLD_RECORD, T.NEW_RECORD, L.LOGDATE
  FROM TBL_SYSTEM_LOG L
      LEFT JOIN TBL_SYSTEM_TRACE T ON (L.ID = T.LOG_ID)
  ORDER BY L.USER_ID, L.LOGDATE DESC;
  
  
-- NOTIFICATION VIEW */
DROP VIEW IF EXISTS VIE_NOTIFICATION_SUMMARY;
CREATE VIEW VIE_NOTIFICATION_SUMMARY AS
SELECT N.ID NOTIFICATION_ID, N.USER_ID, N.TYPE_ID, T.ICON, R.RESOURCE_TEXT, R.LANGUAGE_ID, N.MESSAGE, N.SOURCE, N.REGISTERED_ON, N.REGISTERED_BY,
    N.VIEWED_ON
  FROM TBL_SYSTEM_NOTIFICATION N
      INNER JOIN TBL_SYSTEM_NOTIFICATION_TYPE T ON (N.TYPE_ID = T.ID)
      INNER JOIN TBL_SYSTEM_RESOURCE R ON (T.RESOURCE_NAME = R.RESOURCE_NAME)
  ORDER BY N.REGISTERED_ON DESC;


-- RESOURCES VIEW */
DROP VIEW IF EXISTS VIE_RESOURCES_SUMMARY;
CREATE VIEW VIE_RESOURCES_SUMMARY AS
SELECT R.ID, R.RESOURCE_NAME, R.RESOURCE_TEXT, RL.RESOURCE_TEXT LANGUAGE_NAME, R.IS_SYSTEM, R.IS_BLOCKED, RL.LANGUAGE_ID, R.LANGUAGE_ID LNG_ID
    FROM TBL_SYSTEM_RESOURCE R
        INNER JOIN TBL_SYSTEM_LANGUAGE L ON (R.LANGUAGE_ID = L.ID)
        INNER JOIN TBL_SYSTEM_RESOURCE RL ON (L.LANGUAGE_NAME = RL.RESOURCE_NAME)
  ORDER BY R.RESOURCE_NAME;


-- CLIENT PAYMENT TYPE TYPE */
DROP VIEW IF EXISTS VIE_CLIENT_PAYMENT_TYPE_SUMMARY;
CREATE VIEW VIE_CLIENT_PAYMENT_TYPE_SUMMARY AS
  SELECT P.ID CLIENT_PAYMENT_TYPE_ID, R.RESOURCE_TEXT CLIENT_PAYMENT_TYPE, P.REGISTERED_ON, P.REGISTERED_BY, P.MODIFIED_ON, P.MODIFIED_BY, P.IS_BLOCKED, R.LANGUAGE_ID
    FROM TBL_SYSTEM_CLIENT_PAYMENT_TYPE P
		INNER JOIN TBL_SYSTEM_RESOURCE R ON (R.RESOURCE_NAME = P.RESOURCE_NAME)
    ORDER BY P.REGISTERED_ON DESC;
  
  
-- CLIENT VIEW */
DROP VIEW IF EXISTS VIE_CLIENT_SUMMARY;
CREATE VIEW VIE_CLIENT_SUMMARY AS
  SELECT A.ID CLIENT_ID, A.CLIENT_NAME, A.IDENTIFICATION, A.ADDRESS, A.PHONE, A.PHONE_ALT, A.CELLPHONE, A.CELLPHONE_ALT, C.ID COUNTRY_ID, 
		C.COUNTRY, T.ID CITY_ID, IFNULL(T.CITY_NAME,C.CAPITAL) CITY, A.LATITUDE, A.LONGITUDE, A.EMAIL, A.EMAIL_ALT, 
		A.CONTACT_NAME, A.EMAIL_CONTACT, A.PHONE_CONTACT, A.CELLPHONE_CONTACT, A.REGISTERED_BY, A.REGISTERED_ON, A.IS_BLOCKED, A.MODIFIED_BY,
		A.MODIFIED_ON, A.CLIENT_PAYMENT_TYPE_ID, P.CLIENT_PAYMENT_TYPE, R.ID PARTNER_ID,  R.PARTNER_NAME
    FROM TBL_CLIENT A
      INNER JOIN TBL_SYSTEM_CITY T ON (T.ID = A.CITY_ID)
	  LEFT JOIN TBL_SYSTEM_COUNTRY C ON (T.COUNTRY_ID = C.ID)
	  LEFT JOIN VIE_CLIENT_PAYMENT_TYPE_SUMMARY P ON (A.CLIENT_PAYMENT_TYPE_ID = P.CLIENT_PAYMENT_TYPE_ID)
	  LEFT JOIN TBL_PARTNER_CLIENT PC ON (PC.CLIENT_ID = A.ID)
	  LEFT JOIN TBL_PARTNER R ON (R.ID = PC.PARTNER_ID)
    ORDER BY A.CLIENT_NAME;  
  
  
-- PARTNER VIEW */
DROP VIEW IF EXISTS VIE_PARTNER_SUMMARY;
CREATE VIEW VIE_PARTNER_SUMMARY AS
  SELECT A.ID PARTNER_ID, A.PARTNER_NAME, A.IDENTIFICATION, A.ADDRESS, A.PHONE, A.PHONE_ALT, A.CELLPHONE, A.CELLPHONE_ALT, C.ID COUNTRY_ID, 
		C.COUNTRY, T.ID CITY_ID, IFNULL(T.CITY_NAME,C.CAPITAL) CITY, A.LATITUDE, A.LONGITUDE, A.EMAIL, A.EMAIL_ALT, 
		A.CONTACT_NAME, A.EMAIL_CONTACT, A.PHONE_CONTACT, A.CELLPHONE_CONTACT, A.REGISTERED_BY, A.REGISTERED_ON, A.IS_BLOCKED, A.MODIFIED_BY,
		A.MODIFIED_ON, A.SKIN
    FROM TBL_PARTNER A
      INNER JOIN TBL_SYSTEM_CITY T ON (T.ID = A.CITY_ID)
	  LEFT JOIN TBL_SYSTEM_COUNTRY C ON (T.COUNTRY_ID = C.ID)
    ORDER BY A.PARTNER_NAME;  
  

-- EMPLOYEE VIEW */
DROP VIEW IF EXISTS VIE_EMPLOYEE_SUMMARY;
CREATE VIEW VIE_EMPLOYEE_SUMMARY AS
  SELECT E.ID EMPLOYEE_ID, E.FIRST_NAME, E.MIDDLE_NAME, E.LAST_NAME,
		CONCAT(NULLIF(E.FIRST_NAME, ''),IF(NULLIF(E.FIRST_NAME, '') IS NULL,'',' '),NULLIF(E.LAST_NAME, '')) COLLATE utf8_unicode_ci AS FULL_NAME, 
		E.IDENTIFICATION, E.USER_ID, E.ADDRESS, E.PHONE, E.CELLPHONE, C.ID COUNTRY_ID, C.COUNTRY, T.ID CITY_ID, 
		IFNULL(T.CITY_NAME,C.CAPITAL) CITY, E.LATITUDE, E.LONGITUDE, E.EMAIL, E.LAST_CONNECTION, E.REGISTERED_ON, E.REGISTERED_BY, E.IS_BLOCKED,
		E.MODIFIED_BY, E.MODIFIED_ON, A.AREA_NAME, E.AREA_ID, P.PARTNER_NAME, E.PARTNER_ID, RA.RESOURCE_TEXT ACCESS_NAME, RA.LANGUAGE_ID, E.ACCESS_ID,
		(SELECT COUNT(V.ID) FROM TBL_VEHICLE V WHERE V.EMPLOYEE_ID = E.ID) VEHICLES
    FROM TBL_EMPLOYEE E
		INNER JOIN TBL_SYSTEM_CITY T ON (E.CITY_ID = T.ID)
		INNER JOIN TBL_SYSTEM_COUNTRY C ON (C.ID = T.COUNTRY_ID)
		INNER JOIN TBL_PARTNER P ON (P.ID = E.PARTNER_ID)
		INNER JOIN TBL_SYSTEM_ACCESS SA ON (SA.ID = E.ACCESS_ID)
		INNER JOIN TBL_SYSTEM_RESOURCE RA ON (RA.RESOURCE_NAME = SA.RESOURCE_NAME)
		LEFT JOIN TBL_AREA A ON (E.AREA_ID = A.ID)
	ORDER BY E.LAST_NAME, E.FIRST_NAME;


-- VEHICLE TYPE VIEW */
DROP VIEW IF EXISTS VIE_VEHICLE_TYPE_SUMMARY;
CREATE VIEW VIE_VEHICLE_TYPE_SUMMARY AS
  SELECT T.ID VEHICLE_TYPE_ID, RVT.RESOURCE_TEXT VEHICLE_TYPE_NAME, RVT.LANGUAGE_ID, T.ICON 
    FROM TBL_SYSTEM_VEHICLE_TYPE T 
		INNER JOIN TBL_SYSTEM_RESOURCE RVT ON (RVT.RESOURCE_NAME = T.RESOURCE_NAME);
	

-- VEHICLE VIEW */
DROP VIEW IF EXISTS VIE_VEHICLE_SUMMARY;
CREATE VIEW VIE_VEHICLE_SUMMARY AS
  SELECT V.ID VEHICLE_ID, V.PLATE, V.BRAND, V.MODEL, V.YEAR, V.SERIAL_NUMBER, V.INSURANCE_NUMBER, V.INSURANCE_COMPANY, V.EXPIRATION_DATE,
		E.EMPLOYEE_ID, E.FULL_NAME, E.IDENTIFICATION, E.USER_ID, E.ADDRESS, E.PHONE, E.CELLPHONE, E.COUNTRY_ID, E.COUNTRY, E.CITY_ID, E.CITY, 
		E.LATITUDE, E.LONGITUDE, E.EMAIL, E.LAST_CONNECTION, E.AREA_NAME, E.AREA_ID, E.PARTNER_NAME, E.PARTNER_ID, E.ACCESS_NAME, E.LANGUAGE_ID, E.ACCESS_ID,
		V.REGISTERED_ON, V.REGISTERED_BY, V.IS_BLOCKED, V.MODIFIED_BY, V.MODIFIED_ON, CONCAT(V.BRAND,' ',V.MODEL,' ',V.YEAR) VEHICLE_FULL_NAME,
		T.VEHICLE_TYPE_ID, T.VEHICLE_TYPE_NAME, T.ICON
    FROM TBL_VEHICLE V
		INNER JOIN VIE_EMPLOYEE_SUMMARY E ON (E.EMPLOYEE_ID = V.EMPLOYEE_ID)
		INNER JOIN VIE_VEHICLE_TYPE_SUMMARY T ON (T.VEHICLE_TYPE_ID = V.VEHICLE_TYPE_ID AND T.LANGUAGE_ID = E.LANGUAGE_ID)
	ORDER BY E.LAST_NAME, E.FIRST_NAME, V.PLATE;


-- ZONE VIEW */
DROP VIEW IF EXISTS VIE_ZONE_SUMMARY;
CREATE VIEW VIE_ZONE_SUMMARY AS
  SELECT Z.ID ZONE_ID, Z.ZONE_NAME, Z.PARENT_ZONE, Z.CITY_ID, C.COUNTRY, C.CITY_NAME, 
		Z.LATITUDE_FROM, Z.LONGITUDE_FROM, Z.STREET_TYPE, Z.FROM_STREET, Z.ADDON_FROM_STREET,
		Z.TO_STREET, Z.ADDON_TO_STREET, 
		CONCAT(Z.STREET_TYPE,' ',Z.FROM_STREET,' ',Z.ADDON_FROM_STREET,' - ',Z.TO_STREET,' ',Z.ADDON_TO_STREET) FULL_STREET,
		Z.LATITUDE_TO, Z.LONGITUDE_TO, Z.AVENUE_TYPE, Z.FROM_AVENUE, Z.ADDON_FROM_AVENUE,
		Z.TO_AVENUE, Z.ADDON_TO_AVENUE,
		CONCAT(Z.AVENUE_TYPE,' ',Z.FROM_AVENUE,' ',Z.ADDON_FROM_AVENUE,' - ',Z.TO_AVENUE,' ',Z.ADDON_TO_AVENUE) FULL_AVENUE,
		Z.REGISTERED_ON, Z.REGISTERED_BY, Z.IS_BLOCKED, Z.MODIFIED_BY, Z.MODIFIED_ON,
		CASE 
			WHEN Z.PARENT_ZONE IS NULL THEN '' 
			ELSE (SELECT ZZ.ZONE_NAME FROM TBL_SYSTEM_ZONE ZZ WHERE ZZ.ID = Z.PARENT_ZONE)
		END PARENT_ZONE_NAME
    FROM TBL_SYSTEM_ZONE Z
		INNER JOIN VIE_CITIES_SUMMARY C ON (Z.CITY_ID = C.ID)
	ORDER BY C.CITY_NAME, Z.ZONE_NAME;


-- USERS VIEW */
DROP VIEW IF EXISTS VIE_SUMMARY_USER;
DROP VIEW IF EXISTS VIE_USER_SUMMARY;
CREATE VIEW VIE_USER_SUMMARY AS
SELECT U.ID USER_ID, CONCAT(NULLIF(U.FIRST_NAME, ''),IF(NULLIF(U.FIRST_NAME, '') IS NULL,'',' '),NULLIF(U.LAST_NAME, '')) FULL_NAME,
      U.EMAIL EMAIL, R.RESOURCE_TEXT ACCESS_NAME, U.REGISTERED_ON REGISTERED_ON, U.IS_BLOCKED, A.ID ACCESS_ID,
      R.LANGUAGE_ID, U.CHANGE_PASSWORD, AR.AREA_NAME, A.PREFIX, U.REFERENCE, 
      (SELECT MAX(L.LOGDATE) FROM TBL_SYSTEM_LOG L WHERE L.USER_ID = U.ID AND L.TEXT_TRANSACTION = 'LOGIN') LAST_LOGIN,
      (SELECT MAX(L.LOGDATE) FROM TBL_SYSTEM_LOG L WHERE L.USER_ID = U.ID AND L.TEXT_TRANSACTION IN ('AUTO-LOGOFF','SESSION END')) LAST_LOGOUT,
	  U.ON_LINE
    FROM TBL_SYSTEM_USER U
      INNER JOIN TBL_SYSTEM_ACCESS A ON (U.ACCESS_ID = A.ID)
      INNER JOIN TBL_SYSTEM_RESOURCE R ON (A.RESOURCE_NAME = R.RESOURCE_NAME)
      LEFT JOIN TBL_EMPLOYEE E ON (E.USER_ID = U.ID)
      LEFT JOIN VIE_AREA_SUMMARY AR ON (E.AREA_ID = AR.AREA_ID)
    ORDER BY U.REGISTERED_ON DESC;


-- CLIENT TYPE */
DROP VIEW IF EXISTS VIE_CLIENT_TYPE_SUMMARY;
CREATE VIEW VIE_CLIENT_TYPE_SUMMARY AS
  SELECT C.ID CLIENT_TYPE_ID, R.RESOURCE_TEXT CLIENT_TYPE, C.REGISTERED_ON, C.REGISTERED_BY, C.MODIFIED_ON, C.MODIFIED_BY, C.IS_BLOCKED, R.LANGUAGE_ID
    FROM TBL_SYSTEM_CLIENT_TYPE C
		INNER JOIN TBL_SYSTEM_RESOURCE R ON (R.RESOURCE_NAME = C.RESOURCE_NAME)
    ORDER BY C.REGISTERED_ON DESC;


-- PAYMENT TYPE TYPE */
DROP VIEW IF EXISTS VIE_PAYMENT_TYPE_SUMMARY;
CREATE VIEW VIE_PAYMENT_TYPE_SUMMARY AS
  SELECT P.ID PAYMENT_TYPE_ID, R.RESOURCE_TEXT PAYMENT_TYPE, C.CLIENT_TYPE, C.CLIENT_TYPE_ID, P.REGISTERED_ON, P.REGISTERED_BY, P.MODIFIED_ON, P.MODIFIED_BY, P.IS_BLOCKED, R.LANGUAGE_ID
    FROM TBL_SYSTEM_PAYMENT_TYPE P
		INNER JOIN VIE_CLIENT_TYPE_SUMMARY C ON (C.CLIENT_TYPE_ID = P.CLIENT_TYPE_ID)
		INNER JOIN TBL_SYSTEM_RESOURCE R ON (R.RESOURCE_NAME = P.RESOURCE_NAME)
    ORDER BY P.REGISTERED_ON DESC;


-- POSITION VIEW */
DROP VIEW IF EXISTS VIE_POSITION_SUMMARY;
CREATE VIEW VIE_POSITION_SUMMARY AS
  SELECT P.ID POSITION_ID, P.POSITION_NAME, P.TITLE, P.REGISTERED_ON, P.REGISTERED_BY, P.MODIFIED_ON, P.MODIFIED_BY, P.IS_BLOCKED,
       A.AREA_ID, A.AREA_NAME, A.COSTCENTER, A.CLIENT_NAME, A.CLIENT_ID
    FROM TBL_POSITION P
		INNER JOIN VIE_AREA_SUMMARY A ON (A.AREA_ID = P.AREA_ID)
    ORDER BY P.REGISTERED_ON DESC;


-- QUOTA TYPE VIEW */
DROP VIEW IF EXISTS VIE_QUOTA_TYPE_SUMMARY;
CREATE VIEW VIE_QUOTA_TYPE_SUMMARY AS
SELECT N.ID QUOTA_TYPE_ID, R.RESOURCE_TEXT QUOTA_NAME, N.AMOUNT QUOTA_TYPE_AMOUNT, R.LANGUAGE_ID 
  FROM TBL_QUOTA_TYPE N
      INNER JOIN TBL_SYSTEM_RESOURCE R ON (N.RESOURCE_NAME = R.RESOURCE_NAME)
  ORDER BY N.REGISTERED_ON DESC;


-- QUOTA VIEW
DROP VIEW IF EXISTS VIE_QUOTA_SUMMARY;
CREATE VIEW VIE_QUOTA_SUMMARY AS
	SELECT Q.ID QUOTA_ID, Q.AMOUNT, Q.USED, Q.AMOUNT-Q.USED BALANCE, Q.CREDIT_CARD_NUMBER, Q.CREDIT_CARD_NAME, Q.DATE_EXPIRATION, Q.VERIFICATION_CODE, 
			Q.DIFERRED_TO, Q.PAYMENT_ID, Q.IS_PAYED, Q.IS_VERIFIED, Q.REGISTERED_ON, Q.REGISTERED_BY, Q.MODIFIED_ON, Q.MODIFIED_BY, Q.IS_BLOCKED,
			T.QUOTA_TYPE_ID, T.QUOTA_NAME, T.QUOTA_TYPE_AMOUNT, T.LANGUAGE_ID, C.CLIENT_ID, C.CLIENT_NAME, C.IDENTIFICATION, C.EMAIL
		FROM TBL_QUOTA Q 
			INNER JOIN VIE_QUOTA_TYPE_SUMMARY T ON (Q.QUOTA_TYPE_ID = T.QUOTA_TYPE_ID)
			INNER JOIN VIE_CLIENT_SUMMARY C ON (Q.CLIENT_ID = C.CLIENT_ID)
	ORDER BY Q.REGISTERED_ON DESC;

	
-- PAYMENT STATE VIEW */
DROP VIEW IF EXISTS VIE_PAYMENT_STATE_SUMMARY;
CREATE VIEW VIE_PAYMENT_STATE_SUMMARY AS
SELECT N.ID PAYMENT_STATE_ID, R.RESOURCE_TEXT PAYMENT_STATE_NAME, R.LANGUAGE_ID 
  FROM TBL_PAYMENT_STATE N
      INNER JOIN TBL_SYSTEM_RESOURCE R ON (N.RESOURCE_NAME = R.RESOURCE_NAME)
  ORDER BY N.REGISTERED_ON DESC;
	

-- PAYMENT TYPE VIEW */
DROP VIEW IF EXISTS VIE_PAYMENT_TYPE_SUMMARY;
CREATE VIEW VIE_PAYMENT_TYPE_SUMMARY AS
SELECT N.ID PAYMENT_TYPE_ID, R.RESOURCE_TEXT PAYMENT_TYPE_NAME, R.LANGUAGE_ID 
  FROM TBL_PAYMENT_TYPE N
      INNER JOIN TBL_SYSTEM_RESOURCE R ON (N.PAYMENT_TYPE = R.RESOURCE_NAME)
  ORDER BY N.REGISTERED_ON DESC;

	
-- SERVICE STATE VIEW	
DROP VIEW IF EXISTS VIE_SERVICE_STATE_SUMMARY;
CREATE VIEW VIE_SERVICE_STATE_SUMMARY AS
SELECT N.ID SERVICE_STATE_ID, R.RESOURCE_TEXT SERVICE_STATE_NAME, R.LANGUAGE_ID, CAST(SUBSTRING_INDEX(N.RESOURCE_NAME, '_', -1) AS UNSIGNED) ID_STATE, N.ICON 
  FROM TBL_SERVICE_STATE N
      INNER JOIN TBL_SYSTEM_RESOURCE R ON (N.RESOURCE_NAME = R.RESOURCE_NAME)
  ORDER BY N.REGISTERED_ON DESC;


-- DEKIVERY TYPE VIEW	
DROP VIEW IF EXISTS VIE_DELIVERY_TYPE_SUMMARY;
CREATE VIEW VIE_DELIVERY_TYPE_SUMMARY AS
SELECT N.ID DELIVERY_TYPE_ID, R.RESOURCE_TEXT DELIVERY_TYPE_NAME, R.LANGUAGE_ID 
  FROM TBL_DELIVERY_TYPE N
      INNER JOIN TBL_SYSTEM_RESOURCE R ON (N.RESOURCE_NAME = R.RESOURCE_NAME)
  ORDER BY N.REGISTERED_ON DESC;
  
  
-- PAYMENT VIEW
DROP VIEW IF EXISTS VIE_PAYMENT_SUMMARY;
CREATE VIEW VIE_PAYMENT_SUMMARY AS
SELECT P.ID PAYMENT_ID, T.PAYMENT_TYPE_ID, T.PAYMENT_TYPE_NAME, T.LANGUAGE_ID, S.PAYMENT_STATE_ID, S.PAYMENT_STATE_NAME,
		C.CLIENT_ID, C.CLIENT_NAME, C.IDENTIFICATION CLIENT_IDENTIFICATION, C.ADDRESS CLIENT_ADDRESS, C.PHONE CLIENT_PHONE, C.CELLPHONE CLIENT_CELLPHONE,
		P.TRANSACTION_ID, P.GATEWAY, P.URL_GATEWAY, P.IP_CLIENT, P.RISK, P.RESPONSE, P.RESPONSE_TRACE, P.PAYMENT_METHOD, P.PAYMENT_METHOD_TYPE, 
		P.PAYMENT_REQUESTED, P.PAYMENT_VALUE, P.PAYMENT_TAX_PERCENT, P.PAYMENT_TAX, P.PAYMENT_VALUE_ADD, P.AUTHORIZATION_CODE, P.AUTHORIZATION_ADDITIONAL_CODE,
		P.PAYMENT_ENTITY, P.PAYER_EMAIL, P.PAYER_NAME, P.PAYER_IDENTIFICATION, P.PAYER_PHONE, P.OBSERVATION, P.IS_BLOCKED, P.REGISTERED_BY, P.REGISTERED_ON,
		P.MODIFIED_BY, P.MODIFIED_ON
	FROM TBL_PAYMENT P
		INNER JOIN VIE_PAYMENT_TYPE_SUMMARY T ON (P.PAYMENT_TYPE_ID = T.PAYMENT_TYPE_ID)
		INNER JOIN VIE_PAYMENT_STATE_SUMMARY S ON (P.PAYMENT_STATE_ID = S.PAYMENT_STATE_ID AND S.LANGUAGE_ID = T.LANGUAGE_ID)
		INNER JOIN VIE_CLIENT_SUMMARY C ON (P.CLIENT_ID = C.CLIENT_ID)
	ORDER BY P.REGISTERED_ON DESC;


-- ZONES VIEW
DROP VIEW IF EXISTS VIE_ZONE_SUMMARY;
CREATE VIEW VIE_ZONE_SUMMARY AS
SELECT Z.ID ZONE_ID, Z.PARENT_ZONE, Z.ZONE_NAME, Z.LATITUDE_FROM, Z.LONGITUDE_FROM, Z.STREET_TYPE, Z.FROM_STREET, Z.ADDON_FROM_STREET, Z.TO_STREET,
		Z.ADDON_TO_STREET, Z.LATITUDE_TO, Z.LONGITUDE_TO, Z.AVENUE_TYPE, Z.FROM_AVENUE, Z.ADDON_FROM_AVENUE, Z.TO_AVENUE, Z.ADDON_TO_AVENUE, Z.IS_BLOCKED,
		Z.REGISTERED_BY, Z.REGISTERED_ON, Z.MODIFIED_BY, Z.MODIFIED_ON, C.CITY_ID, C.CITY_NAME, C.COUNTRY, 
		CONCAT(Z.STREET_TYPE,' ',Z.FROM_STREET,' ',Z.ADDON_FROM_STREET,' ',Z.TO_STREET,' ',Z.ADDON_TO_STREET) FULL_STREET,
		CONCAT(Z.AVENUE_TYPE,' ',Z.FROM_AVENUE,' ',Z.ADDON_FROM_AVENUE,' ',Z.TO_AVENUE,' ',Z.ADDON_TO_AVENUE) FULL_AVENUE
	FROM TBL_SYSTEM_ZONE Z
		INNER JOIN VIE_CITIES_SUMMARY C ON (C.CITY_ID = Z.CITY_ID)
	ORDER BY Z.REGISTERED_BY;

  
-- SERVICE VIEW  
DROP VIEW IF EXISTS VIE_SERVICE_SUMMARY;
CREATE VIEW VIE_SERVICE_SUMMARY AS
SELECT S.ID SERVICE_ID, S.USER_ID, C.CLIENT_ID, C.CLIENT_NAME, C.IDENTIFICATION CLIENT_IDENTIFICATION, C.ADDRESS CLIENT_ADDRESS, C.PHONE CLIENT_PHONE, C.CELLPHONE CLIENT_CELLPHONE,
		S.REQUESTED_BY, S.REQUESTED_EMAIL, S.REQUESTED_PHONE, S.REQUESTED_CELLPHONE, S.REQUESTED_IP, S.REQUESTED_ADDRESS, S.DELIVER_DESCRIPTION, S.OBSERVATION,
		S.DELIVER_TO, S.DELIVER_EMAIL, S.DELIVER_PHONE, S.DELIVER_CELLPHONE, S.DELIVER_ADDRESS, S.PRICE, S.IS_BLOCKED, S.REGISTERED_BY, S.REGISTERED_ON,
		S.MODIFIED_BY, S.MODIFIED_ON, T.DELIVERY_TYPE_ID, T.DELIVERY_TYPE_NAME, S.TOTAL_WIDTH, S.TOTAL_HEIGHT, S.TOTAL_LENGTH, S.TOTAL_WEIGHT,
		ZR.CITY_ID REQUEST_CITY_ID, ZR.CITY_NAME REQUEST_CITY_NAME, ZR.COUNTRY REQUEST_COUNTRY, ZR.LATITUDE_FROM LAT_REQUEST_INI, ZR.LATITUDE_TO LAT_REQUEST_END, 
		ZR.LONGITUDE_FROM LON_REQUEST_INI, ZR.LONGITUDE_TO LON_REQUEST_END, ZR.ZONE_NAME ZONE_NAME_REQUEST,
		ZD.CITY_ID DELIVERY_CITY_ID, ZD.CITY_NAME DELIVERY_CITY_NAME, ZD.COUNTRY DELIVERY_COUNTRY, ZD.LATITUDE_FROM LAT_DELIVERY_INI, ZD.LATITUDE_TO LAT_DELIVERY_END, 
		ZD.LONGITUDE_FROM LON_DELIVERY_INI, ZD.LONGITUDE_TO LON_DELIVERY_END, ZD.ZONE_NAME ZONE_NAME_DELIVERY, S.STATE_ID, M.SERVICE_STATE_NAME, T.LANGUAGE_ID,
		S.REQUESTED_ZONE, S.DELIVER_ZONE, S.ROUND_TRIP, S.QUANTITY, S.FRAGILE, VT.VEHICLE_TYPE_ID, VT.VEHICLE_TYPE_NAME, S.TIME_START_TO_DELIVER, S.TIME_FINISH_TO_DELIVER, 
		M.ID_STATE, VT.ICON
	FROM TBL_SERVICE S
		INNER JOIN VIE_ZONE_SUMMARY ZR ON (ZR.ZONE_ID = S.REQUESTED_ZONE)
		INNER JOIN VIE_ZONE_SUMMARY ZD ON (ZD.ZONE_ID = S.DELIVER_ZONE)
		INNER JOIN VIE_DELIVERY_TYPE_SUMMARY T ON (T.DELIVERY_TYPE_ID = S.DELIVERY_TYPE)
		INNER JOIN VIE_SERVICE_STATE_SUMMARY M ON (M.SERVICE_STATE_ID = S.STATE_ID AND M.LANGUAGE_ID = T.LANGUAGE_ID)
		INNER JOIN VIE_CLIENT_SUMMARY C ON (C.CLIENT_ID = S.CLIENT_ID)
		LEFT JOIN VIE_VEHICLE_TYPE_SUMMARY VT ON (VT.VEHICLE_TYPE_ID = S.VEHICLE_TYPE_ID AND VT.LANGUAGE_ID = T.LANGUAGE_ID)
	ORDER BY S.REGISTERED_ON DESC;


-- SERVICE LOG VIEW
DROP VIEW IF EXISTS VIE_SERVICE__LOG_SUMMARY;
DROP VIEW IF EXISTS VIE_SERVICE_LOG_SUMMARY;
CREATE VIEW VIE_SERVICE_LOG_SUMMARY AS
SELECT L.ID SERVICE_LOG_ID, 
		S.ID SERVICE_ID, S.USER_ID, S.CLIENT_ID, 
		C.CLIENT_NAME, C.IDENTIFICATION CLIENT_IDENTIFICATION, C.ADDRESS CLIENT_ADDRESS, C.PHONE CLIENT_PHONE, C.CELLPHONE CLIENT_CELLPHONE,
		S.REQUESTED_BY, S.REQUESTED_EMAIL, S.REQUESTED_PHONE, S.REQUESTED_CELLPHONE, S.REQUESTED_IP, S.REQUESTED_ADDRESS, S.DELIVER_DESCRIPTION, S.OBSERVATION,
		S.DELIVER_TO, S.DELIVER_EMAIL, S.DELIVER_PHONE, S.DELIVER_CELLPHONE, S.DELIVER_ADDRESS, S.PRICE, S.IS_BLOCKED, L.REGISTERED_BY, L.REGISTERED_ON,
		L.MODIFIED_BY, L.MODIFIED_ON, 
		S.DELIVERY_TYPE, RDT.RESOURCE_TEXT DELIVERY_TYPE_NAME,
		ZR.CITY_ID REQUEST_CITY_ID, CR.CITY_NAME REQUEST_CITY_NAME, CR.COUNTRY REQUEST_COUNTRY, ZR.LATITUDE_FROM LAT_REQUEST_INI, ZR.LATITUDE_TO LAT_REQUEST_END, 
		ZR.LONGITUDE_FROM LON_REQUEST_INI, ZR.LONGITUDE_TO LON_REQUEST_END, ZR.ZONE_NAME ZONE_NAME_REQUEST,
		ZD.CITY_ID DELIVERY_CITY_ID, CD.CITY_NAME DELIVERY_CITY_NAME, CD.COUNTRY DELIVERY_COUNTRY, ZD.LATITUDE_FROM LAT_DELIVERY_INI, ZD.LATITUDE_TO LAT_DELIVERY_END, 
		ZD.LONGITUDE_FROM LON_DELIVERY_INI, ZD.LONGITUDE_TO LON_DELIVERY_END, ZD.ZONE_NAME ZONE_NAME_DELIVERY, 
		S.STATE_ID, RMS.RESOURCE_TEXT SERVICE_STATE_NAME, RMS.LANGUAGE_ID,
		S.REQUESTED_ZONE, S.DELIVER_ZONE, S.ROUND_TRIP, S.QUANTITY, S.FRAGILE, 
		S.VEHICLE_TYPE_ID, VR.RESOURCE_TEXT VEHICLE_TYPE_NAME, S.TIME_START_TO_DELIVER, S.TIME_FINISH_TO_DELIVER, V.ICON ICON_VEHICLE,
		CAST(SUBSTRING_INDEX(SD.RESOURCE_NAME, '_', -1) AS UNSIGNED) ID_STATE,
		L.STATE_INITIAL_ID, L.STATE_FINAL_ID, L.EMPLOYEE_INITIAL_ID, L.EMPLOYEE_FINAL_ID, L.VEHICLE_INITIAL_ID, L.VEHICLE_FINAL_ID,
		L.OBSERVATION LOG_OBSERVATION, L.LAST_POSITION,
		CONCAT(NULLIF(EI.FIRST_NAME, ''),IF(NULLIF(EI.FIRST_NAME, '') IS NULL,'',' '),NULLIF(EI.LAST_NAME, '')) EMPLOYEE_INITIAL_NAME,
		CONCAT(NULLIF(EF.FIRST_NAME, ''),IF(NULLIF(EF.FIRST_NAME, '') IS NULL,'',' '),NULLIF(EF.LAST_NAME, '')) EMPLOYEE_FINAL_NAME,
		EI.PARTNER_ID PARTNER_INITIAL_ID,
		EF.PARTNER_ID PARTNER_FINAL_ID,
		RMI.RESOURCE_TEXT STATE_INITIAL_NAME, 
		RMF.RESOURCE_TEXT STATE_FINAL_NAME,
		CONCAT(VI.BRAND,' ',VI.MODEL,' ',VI.YEAR,' ',VI.PLATE) VEHICLE_INITIAL_NAME,
		CONCAT(VF.BRAND,' ',VF.MODEL,' ',VF.YEAR,' ',VF.PLATE) VEHICLE_FINAL_NAME,
		DATE(L.REGISTERED_ON) DATE, TIME(L.REGISTERED_ON) TIME, SD.ICON,
		WI.PARTNER_NAME PARTNER_INITIAL_NAME,
		WF.PARTNER_NAME PARTNER_FINAL_NAME
	FROM TBL_SERVICE_LOG L
		INNER JOIN TBL_SERVICE S ON (L.SERVICE_ID = S.ID)
		INNER JOIN TBL_SERVICE_STATE SD ON (SD.ID = S.STATE_ID)
		INNER JOIN TBL_SYSTEM_RESOURCE RMS ON (RMS.RESOURCE_NAME = SD.RESOURCE_NAME)
		INNER JOIN TBL_CLIENT C ON (S.CLIENT_ID = C.ID)
		INNER JOIN TBL_SERVICE_STATE MI ON (MI.ID = L.STATE_INITIAL_ID)
		INNER JOIN TBL_SYSTEM_RESOURCE RMI ON (RMI.RESOURCE_NAME = MI.RESOURCE_NAME AND RMI.LANGUAGE_ID = RMS.LANGUAGE_ID)
		INNER JOIN TBL_SERVICE_STATE MF ON (MF.ID = L.STATE_FINAL_ID)
		INNER JOIN TBL_SYSTEM_RESOURCE RMF ON (RMF.RESOURCE_NAME = MF.RESOURCE_NAME AND RMI.LANGUAGE_ID = RMS.LANGUAGE_ID)
		INNER JOIN TBL_DELIVERY_TYPE DT ON (DT.ID = S.DELIVERY_TYPE)
		INNER JOIN TBL_SYSTEM_RESOURCE RDT ON (RDT.RESOURCE_NAME = DT.RESOURCE_NAME AND RDT.LANGUAGE_ID = RMS.LANGUAGE_ID)
		LEFT JOIN TBL_SYSTEM_ZONE ZR ON (ZR.ID = S.REQUESTED_ZONE)
		LEFT JOIN VIE_CITIES_SUMMARY CR ON (CR.CITY_ID = ZR.CITY_ID)
		LEFT JOIN TBL_SYSTEM_ZONE ZD ON (ZD.ID = S.DELIVER_ZONE)		
		LEFT JOIN VIE_CITIES_SUMMARY CD ON (CD.CITY_ID = ZD.CITY_ID)
		LEFT JOIN TBL_SYSTEM_VEHICLE_TYPE V ON (V.ID = S.VEHICLE_TYPE_ID)
		LEFT JOIN TBL_SYSTEM_RESOURCE VR ON (VR.RESOURCE_NAME = V.RESOURCE_NAME AND VR.LANGUAGE_ID = RMS.LANGUAGE_ID)
		LEFT JOIN TBL_EMPLOYEE EI ON (EI.ID = L.EMPLOYEE_INITIAL_ID)
		LEFT JOIN TBL_EMPLOYEE EF ON (EF.ID = L.EMPLOYEE_FINAL_ID)
		LEFT JOIN TBL_PARTNER WI ON (WI.ID = EI.PARTNER_ID)
		LEFT JOIN TBL_PARTNER WF ON (WF.ID = EF.PARTNER_ID)
		LEFT JOIN TBL_VEHICLE VI ON (VI.ID = L.VEHICLE_INITIAL_ID)
		LEFT JOIN TBL_VEHICLE VF ON (VF.ID = L.VEHICLE_FINAL_ID)
	ORDER BY L.REGISTERED_ON DESC;


-- QUOTA EMPLOYEE 
DROP VIEW IF EXISTS VIE_QUOTA_EMPLOYEE_SUMMARY;
CREATE VIEW VIE_QUOTA_EMPLOYEE_SUMMARY AS
SELECT Q.ID QUOTA_EMPLOYEE_ID, Q.AMOUNT AMOUNT_ASSIGNED, Q.USED USED_ASSIGNED, Q.IS_BLOCKED, Q.REGISTERED_ON, Q.REGISTERED_BY, Q.MODIFIED_BY, Q.MODIFIED_ON, U.LANGUAGE_ID,
		C.CLIENT_ID, C.CLIENT_NAME, C.IDENTIFICATION, U.QUOTA_ID, U.AMOUNT, U.USED, U.BALANCE, U.CREDIT_CARD_NUMBER, U.CREDIT_CARD_NAME, U.DATE_EXPIRATION, 
		U.DIFERRED_TO, U.QUOTA_TYPE_ID, U.QUOTA_NAME, U.QUOTA_TYPE_AMOUNT, S.FULL_NAME, S.ACCESS_NAME, S.ACCESS_ID, S.AREA_NAME, Q.AREA_ID, S.USER_ID
	FROM TBL_QUOTA_EMPLOYEE Q
		INNER JOIN VIE_CLIENT_SUMMARY C ON (Q.CLIENT_ID = C.CLIENT_ID)
		LEFT JOIN VIE_QUOTA_SUMMARY U ON (Q.QUOTA_ID = U.QUOTA_ID)
		LEFT JOIN VIE_USER_SUMMARY S ON (S.USER_ID = Q.USER_ID AND S.LANGUAGE_ID = U.LANGUAGE_ID)
	ORDER BY Q.REGISTERED_ON DESC;


-- PARTNER CLIENT 
DROP VIEW IF EXISTS VIE_PARTNER_CLIENT_SUMMARY;
CREATE VIEW VIE_PARTNER_CLIENT_SUMMARY AS
SELECT PC.ID PARTNER_CLIENT_ID, P.PARTNER_ID, P.PARTNER_NAME, P.IDENTIFICATION, P.ADDRESS, P.CITY, C.CLIENT_ID, C.CLIENT_NAME, C.IDENTIFICATION CLIENT_IDENTIFICATION, C.ADDRESS CLIENT_ADDRESS,
		C.CITY CLIENT_CITY, E.EMPLOYEE_ID, E.FULL_NAME, E.USER_ID, PC.IS_BLOCKED, PC.REGISTERED_ON, PC.REGISTERED_BY, P.SKIN
	FROM TBL_PARTNER_CLIENT PC
		INNER JOIN VIE_PARTNER_SUMMARY P ON (P.PARTNER_ID = PC.PARTNER_ID)
		INNER JOIN VIE_CLIENT_SUMMARY C ON (C.CLIENT_ID = PC.CLIENT_ID AND C.PARTNER_ID = PC.PARTNER_ID)
		LEFT JOIN VIE_EMPLOYEE_SUMMARY E ON (E.EMPLOYEE_ID = PC.EMPLOYEE_ID)
	ORDER BY PC.REGISTERED_ON DESC;
	
	
-- MY CLIENTS
DROP VIEW IF EXISTS VIE_MY_CLIENTS;
CREATE VIEW VIE_MY_CLIENTS AS
SELECT C.PARTNER_CLIENT_ID, C.PARTNER_ID, C.PARTNER_NAME, C.ADDRESS, C.CITY, 
		C.CLIENT_ID, C.CLIENT_NAME, C.CLIENT_IDENTIFICATION, C.CLIENT_ADDRESS, C.CLIENT_CITY, 
        COUNT(C.EMPLOYEE_ID) EMPLEADOS,
        SUM(CASE 
			WHEN S.ID_STATE = 1 THEN 1
            ELSE 0
            END) ACTIVOS,
		SUM(CASE
			WHEN S.ID_STATE = 2 THEN 1
            ELSE 0
            END) PENDIENTES,
		SUM(CASE
			WHEN S.ID_STATE = 1 THEN 0
			WHEN S.ID_STATE = 2 THEN 0
            ELSE 1
            END) SERVICIOS,
		COUNT(S.SERVICE_ID) TOTAL_SERVICIOS
	FROM VIE_PARTNER_CLIENT_SUMMARY C
		LEFT JOIN VIE_SERVICE_SUMMARY S ON (C.CLIENT_ID = S.CLIENT_ID)
	GROUP BY C.PARTNER_CLIENT_ID, C.PARTNER_ID, C.PARTNER_NAME, C.ADDRESS, C.CITY, C.CLIENT_ID, C.CLIENT_NAME, C.CLIENT_IDENTIFICATION, 
		C.CLIENT_ADDRESS, C.CLIENT_CITY;
		
-- EMPLOYEES BY SERVICE
DROP VIEW IF EXISTS VIE_EMPLOYEES_SERVICE;
CREATE VIEW VIE_EMPLOYEES_SERVICE AS
SELECT E.EMPLOYEE_ID, E.FULL_NAME, (SELECT COUNT(DISTINCT S.SERVICE_ID) FROM TBL_SERVICE_LOG S WHERE S.EMPLOYEE_FINAL_ID = E.EMPLOYEE_ID OR S.EMPLOYEE_INITIAL_ID = E.EMPLOYEE_ID) CANTIDAD
	FROM VIE_EMPLOYEE_SUMMARY E;
		
		
-- EMPLOYEES ASSIGNED
DROP VIEW IF EXISTS VIE_EMPLOYEE_ASSIGNED_SUMMARY;
CREATE VIEW VIE_EMPLOYEE_ASSIGNED_SUMMARY AS
SELECT E.EMPLOYEE_ID, E.FULL_NAME, (SELECT COUNT(DISTINCT S.SERVICE_ID) FROM TBL_SERVICE_LOG S WHERE S.EMPLOYEE_FINAL_ID = E.EMPLOYEE_ID OR S.EMPLOYEE_INITIAL_ID = E.EMPLOYEE_ID) CANTIDAD,
		P.REGISTERED_ON, P.REGISTERED_BY, P.CLIENT_ID, P.PARTNER_ID, P.PARTNER_NAME
	FROM VIE_EMPLOYEE_SUMMARY E
		LEFT JOIN VIE_PARTNER_CLIENT_SUMMARY P ON (E.EMPLOYEE_ID = P.EMPLOYEE_ID);
	
-- EMPLOYEES UNASSIGNED
DROP VIEW IF EXISTS VIE_EMPLOYEE_UNASSIGNED_SUMMARY;
CREATE VIEW VIE_EMPLOYEE_UNASSIGNED_SUMMARY AS
SELECT E.EMPLOYEE_ID, E.FULL_NAME, (SELECT COUNT(DISTINCT S.SERVICE_ID) FROM TBL_SERVICE_LOG S WHERE S.EMPLOYEE_FINAL_ID = E.EMPLOYEE_ID OR S.EMPLOYEE_INITIAL_ID = E.EMPLOYEE_ID) CANTIDAD,
		P.REGISTERED_ON, P.REGISTERED_BY, P.ID PARTNER_ID, P.PARTNER_NAME
	FROM TBL_PARTNER P
		INNER JOIN VIE_EMPLOYEE_SUMMARY E ON (E.PARTNER_ID = P.ID);


		
-- JOURNEY VIEW	
DROP VIEW IF EXISTS VIE_JOURNEY_SUMMARY;
CREATE VIEW VIE_JOURNEY_SUMMARY AS
SELECT N.ID JOURNEY_ID, R.RESOURCE_TEXT JOURNEY_NAME, R.LANGUAGE_ID, N.IS_BLOCKED 
  FROM TBL_JOURNEY N
      INNER JOIN TBL_SYSTEM_RESOURCE R ON (N.RESOURCE_NAME = R.RESOURCE_NAME)
  ORDER BY N.REGISTERED_ON DESC;
  

-- VEHICLE PROTECTION VIEW */
DROP VIEW IF EXISTS VIE_VEHICLE_PROTECTION_SUMMARY;
CREATE VIEW VIE_VEHICLE_PROTECTION_SUMMARY AS
  SELECT P.ID VEHICLE_PROTECTION_ID, RVT.RESOURCE_TEXT VEHICLE_PROTECTION_NAME, RVT.LANGUAGE_ID, V.VEHICLE_TYPE_ID, V.VEHICLE_TYPE_NAME, V.ICON
    FROM TBL_SYSTEM_VEHICLE_PROTECTION P 
		INNER JOIN TBL_SYSTEM_RESOURCE RVT ON (RVT.RESOURCE_NAME = P.RESOURCE_NAME)
		INNER JOIN VIE_VEHICLE_TYPE_SUMMARY V ON (P.VEHICLE_TYPE_ID = V.VEHICLE_TYPE_ID AND RVT.LANGUAGE_ID = V.LANGUAGE_ID);


-- SYSTEM COLOR
DROP VIEW IF EXISTS VIE_SYSTEM_COLOR_SUMMARY;
CREATE VIEW VIE_SYSTEM_COLOR_SUMMARY AS
SELECT C.ID COLOR_ID, R.RESOURCE_TEXT COLOR_NAME, C.HEXA HEXADECIMAL, C.CLASS_NAME, R.LANGUAGE_ID, C.IS_BLOCKED 
  FROM TBL_SYSTEM_COLOR C
		INNER JOIN TBL_SYSTEM_RESOURCE R ON (C.RESOURCE_NAME = R.RESOURCE_NAME)
	WHERE C.IS_BLOCKED = FALSE
	ORDER BY C.REGISTERED_ON DESC;


-- USER ADDRESSES
DROP VIEW IF EXISTS VIE_USER_ADDRESSES_SUMMARY;
CREATE VIEW VIE_USER_ADDRESSES_SUMMARY AS
SELECT U.ID USER_ADDRESS_ID, U.ADDRESS_NAME, U.ADDRESS, U.IS_ORIGIN, U.LATITUDE, U.LONGITUDE,
		S.USER_ID, S.FULL_NAME, S.EMAIL, S.ACCESS_ID, S.ACCESS_NAME,
		Z.ZONE_ID, Z.ZONE_NAME, Z.PARENT_ZONE, ZP.ZONE_NAME PARENT_ZONE_NAME,
		IFNULL(C.CITY_ID, Z.CITY_ID) CITY_ID, IFNULL(C.CITY_NAME, Z.CITY_NAME) CITY_NAME, IFNULL(C.COUNTRY,Z.COUNTRY) COUNTRY, U.IS_BLOCKED 
  FROM TBL_USER_ADDRESSES U
		INNER JOIN VIE_USER_SUMMARY S ON (U.USER_ID = S.USER_ID)
		INNER JOIN VIE_ZONE_SUMMARY Z ON (U.ZONE_ID = Z.ZONE_ID)
		LEFT JOIN VIE_CITIES_SUMMARY C ON (C.CITY_ID = U.CITY_ID)		
		LEFT JOIN VIE_ZONE_SUMMARY ZP ON (Z.PARENT_ZONE = ZP.ZONE_ID)
	WHERE U.IS_BLOCKED = FALSE
	ORDER BY U.REGISTERED_ON DESC;


-- PARTNER RATES
DROP VIEW IF EXISTS VIE_PARTNER_RATE_SUMMARY;
CREATE VIEW VIE_PARTNER_RATE_SUMMARY AS
SELECT R.ID PARTNER_RATE_ID, P.PARTNER_NAME, P.IDENTIFICATION, P.ADDRESS, P.SKIN, R.PARTNER_ID, R.IS_BLOCKED, 
		R.DISTANCE_MIN, R.DISTANCE_MAX, R.PRICE, R.ROUND_TRIP, R.TIME_MIN, R.TIME_MAX, 
		V.VEHICLE_TYPE_ID, V.VEHICLE_TYPE_NAME, V.ICON
  FROM TBL_PARTNER_RATE R
		INNER JOIN TBL_PARTNER P ON (R.PARTNER_ID = P.ID)
		INNER JOIN VIE_VEHICLE_TYPE_SUMMARY V ON (V.VEHICLE_TYPE_ID = R.VEHICLE_TYPE_ID)
	WHERE R.IS_BLOCKED = FALSE
	ORDER BY R.REGISTERED_ON DESC;
